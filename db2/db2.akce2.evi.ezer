#pragma test
# ------------------------------------------------------------------------------------------------ #
# Karta pro evidenci členů (verze 2)                                                               #
#                                                                                                  #
# Ans(w)er/Ezer                                     (c) 2007-2014 Martin Šmídek <martin@smidek.eu> #
# ------------------------------------------------------------------------------------------------ #

# --------------------------------------------------------------------------------==> globální jména
# načtení rodiny a osoby
# stačí udat jedno z nich - osoba musí být udané členem rodiny

proc evid_load(ido,idr) { page.evid_load(ido,idr) }

proc evid_osoba(_ido)  { panel.focus; m.o.a.click(0,1); lst.seek_osoba(_ido,m.o.a.par) }
proc evid_rodina(_idr) { panel.focus; m.r.a.click(0,1); lst.seek_rodina(_idr,m.r.a.par) }

proc osoby_show()       { page.oso.show_osoba(1); }     // obnova údajů o osobě  (z konfigurace)
proc rodina_show()      { page.rod.show_rodina; }       // obnova údajů o rodině (z konfigurace)
# ----------------------------------------------------------------------------------==> inicializace
proc onfirstfocus() {
  osoba_config.start; rodina_config.start;
  lst.start; page.start; cmd.start; }
proc up(x)   { x.get.set_css('shift_up','shift_down'); x.set_css('shift_up','shift_down','.*') }
proc down(x) { x.get.set_css('shift_down','shift_up'); x.set_css('shift_down','shift_up','.*') }
# ------------------------------------------------------------------------------------------==> MENU
var menu_item=0
var menu_par=0
menu m {type:'left', active:*, format:'f-'
  menu r {title:'rodiny',type:'group', skill:'yae;fae;cae'
    item a {title:'[fa-group]všechny rodiny'    par:°{lst:'r',tit:'všechny rodiny, co ',cnd:"1"}}
    item t {title:'[fa-wrench fa-red](test)'           par:°{lst:'r',tit:'testovací rodiny, co ',
                                                cnd:"r.id_rodina IN (383,2287,14,3329)"},skill:'m'}
  }
  menu o {title:'osoby',type:'group', skill:'yae;fae;cae'
    item a {title:'[fa-user]všechny kontakty'   par:°{lst:'o',tit:'všechny osoby, co ',cnd:'1'}}
    item   {title:'[fa-male]muži'               par:°{lst:'o',tit:'všichni muži, co ',
                                                cnd:"o.sex=1 AND TIMESTAMPDIFF(YEAR,narozeni,NOW())>=18"}}
    item   {title:'[fa-female]ženy'             par:°{lst:'o',tit:'všechny ženy, co ',
                                                cnd:"o.sex=2 AND TIMESTAMPDIFF(YEAR,narozeni,NOW())>=18"}}
    item   {title:'[fa-child]děti'              par:°{lst:'o',tit:'všechny děti, co ',
                                                cnd:"TIMESTAMPDIFF(YEAR,narozeni,NOW())<18"}}
    item t {title:'[fa-wrench fa-red](test)'           par:°{lst:'o',tit:'testovací osoby, co ',
                                                cnd:"o.id_osoba IN (679,4031,4504,5877)"},skill:'m'}
  }
  menu f {title:'poslední úpravy rodin',type:'group', skill:'yad;fad'
    item   {title:'[fa-medkit]dnes'    par:°{lst:'f',tit:'úpravy za 24 hodin',days:'1',cnd:"1"}}
    item   {title:'[fa-medkit]včera'   par:°{lst:'f',tit:'úpravy za 48 hodin',days:'2',cnd:"1"}}
    item   {title:'[fa-medkit]týden'   par:°{lst:'f',tit:'úpravy za 7 dnů',days:'7',cnd:"1"}}
    item   {title:'[fa-medkit]měsíc'   par:°{lst:'f',tit:'úpravy za 30 dnů',days:'30',cnd:"1"}}
    item   {title:'[fa-medkit]rok'     par:°{lst:'f',tit:'úpravy za 365 dnů',days:'365',cnd:"1"}}
    item   {title:'[fa-medkit]všechny' par:°{lst:'f',tit:'všechny úpravy',days:'99999',cnd:"1"}}
  }
  menu h {title:'poslední úpravy osob',type:'group', skill:'yad;fad'
    item   {title:'[fa-medkit]dnes'    par:°{lst:'h',tit:'úpravy za 24 hodin',days:'1',cnd:"1"}}
    item   {title:'[fa-medkit]včera'   par:°{lst:'h',tit:'úpravy za 48 hodin',days:'2',cnd:"1"}}
    item   {title:'[fa-medkit]týden'   par:°{lst:'h',tit:'úpravy za 7 dnů',days:'7',cnd:"1"}}
    item   {title:'[fa-medkit]měsíc'   par:°{lst:'h',tit:'úpravy za 30 dnů',days:'30',cnd:"1"}}
    item   {title:'[fa-medkit]rok'     par:°{lst:'h',tit:'úpravy za 365 dnů',days:'365',cnd:"1"}}
    item   {title:'[fa-medkit]všechny' par:°{lst:'h',tit:'všechny úpravy',days:'99999',cnd:"1"}}
#     item   {title:'[fa-medkit fa-red]podle pachatele' par:°{lst:'h',tit:'úpravy, které provedl(a)',days:'99999',cnd:"1"}
#     }
  }
#   menu s {title:'hromadné úpravy evidence',type:'group', skill:'yad;fad'
#     item   {title:'[fa-phone]OSOBY: kontakt osobní/rodinný'
#             par:°{lst:'x',mod:'k',tit:'opravy kontaktů osob',cnd:"1"},skill:'yad;fad'}
#     item   {title:'[fa-envelope-o]OSOBY: adresa osobní/rodinná'
#             par:°{lst:'x',mod:'a',tit:'opravy adres osob',   cnd:"1"},skill:'yad;fad'}
#     item   {title:'[fa-wrench fa-red]OPRAVIT osoba.kontakt,adresa' ,skill:'m'
#       proc onclick(i) { menu_item.set(i);
#         confirm(ask('data2_transform_2014',object('cmd','kontakty,adresy')));
#         alert(ask('data2_transform_2014',object('cmd','kontakty+,adresy+')));
#     }}
#     item   {title:'[fa-wrench fa-red]OPRAVIT rodina.nazev' ,skill:'m'
#       proc onclick(i) { menu_item.set(i);
#         confirm(ask('data2_transform_2014',object('cmd','nazvy')));
#         alert(ask('data2_transform_2014',object('cmd','nazvy+')));
#     }}
# #     item   {title:'[fa-wrench fa-red]OPRAVIT *.stat' ,skill:'m'
# #       proc onclick(i) { menu_item.set(i);
# #         confirm(ask('data_transform',°{cmd:'stat'}),"<br>provést transformaci dat?");
# #         alert(ask('data_transform',°{cmd:'stat+'}));
# #     }}
#     item   {title:'[fa-group]tipy duplicit rodin'
#             par:°{lst:'y',tit:'nejedinečné názvy',   cnd:"y.deleted=''"},skill:'yad;fad'}
#     item   {title:'[fa-user]tipy duplicit osob'
#             par:°{lst:'z',tit:'nejedinečná příjmení',cnd:"z.deleted=''"},skill:'yad;fad'}
#     item   {title:'[fa-female]tipy duplicit žen'
#             par:°{lst:'z',tit:'příjmení & rodné',    cnd:"z.deleted=''"},skill:'yad;fad'
#       proc onclick(i) { menu_item.set(i); alert(ask('elim_rodne')) }}
#     proc onclick(i) { menu_item.set(i);
#       page.oso.set_mode(1,'E'); lst.mode.set('x'); lst.bx_mode.set(i.par.mod); lst.idx.set(0);
#       lst.reload(i.par.lst,i.par.cnd,i.par.tit);
#     }
#   }
  proc onclick (i) { menu_item.set(i); menu_par.set(i.par);
    page.oso.set_mode(0,'E');
    lst.reload(i.par.lst,i.par.cnd,i.par.tit);
  }
}
# --------------------------------------------------------------------------------------------- stav
var evi_barvit_zmeny=0          // 1: v page.evid budou zvýrazněna pole se změnou
# --------------------------------------------------------------------------------------------- uses
# const min_h=540           // minimální výška (nelze jednoduše měnit - jsou k ní vztaženy souřadnice)
const min_h=395           // minimální výška (nelze jednoduše měnit - jsou k ní vztaženy souřadnice)
use lst:  form _lst  [0,0,,]
use page: form _page [370,10,,]
use cmd:  form _cmd  [370,min_h-120,,]
# ============================================================================================> _lst
form _lst [,,370,*] {
  # ---------------------------------------------- interface
  proc load_osoba(_ido) {                       // zobrazí rodinu v kontextu všech
    _reload('o',1,_ido,0)
  }
  proc load_rodina(_idr) {                      // zobrazí osobu v kontextu všech
    _reload('r',1,0,_idr)
  }
  proc reload(_mode,_cnd,_tit) {                // zobrazí rodiny či osoby podle daných podmínek
    tit.set(_tit); _reload(_mode,_cnd,0,0)
  }
  proc _reload(_mode,_cnd,_ido,_idr) {          // zobrazí rodinu či osobu podle daných podmínek
    mode.set(_mode); cnd.set(_cnd);             // - zapamatuje podmínky pro refresh
    form.display(2,_mode);
#     eq(_mode,'x'); idx.set(_ido); [_ido; bx.init_queries ]; [ bx_reload(_cnd) ]
#   | eq(_mode,'y'); idy.set(_idr); [_idr; by.init_queries ]; [ by_reload(_cnd) ]
#   | eq(_mode,'z'); idz.set(_ido); [_ido; bz.init_queries ]; [ bz_reload(_cnd) ]
#   |
    eq(_mode,'o'); ido.set(_ido); [_ido; bo.init_queries ]; [ bo_reload(_cnd) ]
  | eq(_mode,'h'); idh.set(_ido); [_ido; bh.init_queries ]; [ bh_reload(_cnd) ]
  | eq(_mode,'f'); idf.set(_idr); [_idr; bf.init_queries ]; [ bf_reload(_cnd) ]
  | eq(_mode,'r'); idr.set(_idr); [_idr; br.init_queries ]; [ br_reload(_cnd) ]
  }
  proc refresh() {                              // zobrazí rodiny či osoby podle starých podmínek
    _reload(mode.get,cnd.get,ido.get,idr.get)   //   s případnou inicializací
  }
  proc refresh2() {                             // zobrazí rodiny či osoby podle starých podmínek
#     eq(mode.get,'x'); [ bx_reload(cnd.get) ]    //   beze změny filtru
#   | eq(mode.get,'y'); [ by_reload(cnd.get) ]
#   | eq(mode.get,'z'); [ bz_reload(cnd.get) ]
#   |
    eq(mode.get,'o'); [ bo_reload(cnd.get) ]
  | eq(mode.get,'h'); [ bh_reload(cnd.get) ]
  | eq(mode.get,'f'); [ bf_reload(cnd.get) ]
  | eq(mode.get,'r'); [ br_reload(cnd.get) ]
  }
  proc seek_osoba(_ido,par) {           // zviditelní seznam nesmazaných osob a zobrazí osobu
    [ virgin.get; start ];
    tit.set(par.tit); [ eq(mode.get,'o') | mode.set('o');form.display(2,'o') ];
    bo_cnd.set(1); bo_filtr.set(1); bo_having.set(1); o_vyber.key(1);
    bo.init_queries(0); ido.set(_ido);
    bo.browse_seek(conc("id_osoba=",_ido),"o.deleted=''",1); page.evid_load(_ido,0);
  }
  proc seek_rodina(_idr,par) {          // zviditelní seznam nesmazaných rodin a zobrazí rodinu
    [ virgin.get; start ];
    tit.set(par.tit); [ eq(mode.get,'r') | mode.set('r'); form.display(2,'r') ];
    br_cnd.set(1); br_filtr.set(1); br_having.set(1); r_vyber.key(1);
    br.init_queries(0); idr.set(_idr);
    br.browse_seek(conc("id_rodina=",_idr),"r.deleted=''",1); page.evid_load(0,_idr);
  }
  # ---------------------------------------------- stav a inicializace
  var virgin=1
  var mode:text,                                // o|r
      cnd:text                                  // zapamatovaná podmínka
  var idr= 0                                    // naposledy vybraná rodina
  var ido= 0                                    // naposledy vybraná osoba
  var idh= 0                                    // naposledy vybraná osoba  při prohlídce historie změn
  var idf= 0                                    // naposledy vybraná rodina při prohlídce historie změn
  var idx= 0                                    // naposledy vybraná osoba pro opravy kontaktu
  var idz= 0                                    // naposledy vybraná osoba pro tip na eliminaci
  var idy= 0                                    // naposledy vybraná rodina pro tip na eliminaci
  proc start() { [                              // při startu vynecháme prázdná příjmení
    o_vyber.key( 1); o_vyber.refresh; //bo_filtr.set(o_vyber.get);
#     x_vyber.key(51); x_vyber.refresh;
    r_vyber.key( 1); r_vyber.refresh; //br_filtr.set(r_vyber.get);
#     [ by.nazev.set_query(1,"B",0) ];            // ... kvůli pomalosti dotazu
#     [ bz.prijmeni.set_query(1,"Ba",0) ];        // ... kvůli pomalosti dotazu
#     [ br.nazev.set_query(1,"-$",0) ];
#     [ bo.prijmeni.set_query(1,"-$",0) ];
    virgin.set(0);
  ] }
  # ---------------------------------------------- společné prvky
  label [10,2,347,25] { css:'ae_work' }
  label tit [16,8,137,14] { format:'r', css:'frame_label_big' }
  # ==============================================> H - HISTORIE ZMĚN OSOB
  var bh_cnd=1, bh_filtr=1
  proc bh_reload(cnd) { echo("bh_reload ",virgin.get);
    [ virgin.get; start ];
    evi_barvit_zmeny.set(1); bh_cnd.set(cnd);
    idh.get; [ bh.browse_seek(conc("id_osoba=",idh.get)); bh.onrowclick ]
  | bh.browse_load(conc(cnd," AND ",bh_filtr.get,
      " AND kdy BETWEEN ADDDATE(NOW(),-",menu_par.get('days'),") AND NOW()"
    ));
  }
  view h: table osoba
  view ht: table tvori  { join_type:"LEFT", join:"USING(id_osoba)" }
  view hh: table _track { join:"ON kde='osoba' AND klic=id_osoba" }
  browse bh [10,30,,] {tag:'h', group_by:'h.id_osoba'
      rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
    show id_o { data:h.id_osoba }
    show id_r { data:ht.id_rodina }
    show id_h { data:hh.id_track }
    show barva { expr:"h.deleted=''" }
    show prijmeni [,,70,] { data:h.prijmeni, title:'příjmení', format:'q*s+' }
    show jmeno [,,70,] { data:h.jmeno, title:'jméno', format:'q*s' }
    show [,,54,] { title:'obec', data:h.obec, format:'q*s' }
    show kdo [,,30,] { title:'kdo', expr:"SUBSTR(MAX(CONCAT(kdy,kdo)),20)", format:'q*s'
      help:'kdo naposledy provedl změnu'}
    show kdy [,,65,] { title:"kdy", expr:"SUBSTR(MAX(CONCAT(kdy,kdo)),1,10)", sql_pipe:'sql_date1',
      format:'q*s', help:'kdy byla naposledy provedana změna'}
    show [,,20,] { title:"změn", expr:"COUNT(*)", help:'celkem změn v daném období', format:'rq*s' }
    proc onrowclick() { idh.set(id_o.get); page.evid_load(idh.get,0); }
  }
  # ==============================================> F - HISTORIE ZMĚN RODIN
  var bf_cnd=1, bf_filtr=1
  proc bf_reload(cnd) { echo("bf_reload ",virgin.get);
    [ virgin.get; start ];
    evi_barvit_zmeny.set(1); bf_cnd.set(cnd);
    idf.get; [ bf.browse_seek(conc("id_osoba=",idf.get)); bf.onrowclick ]
  | bf.browse_load(conc(cnd," AND ",bf_filtr.get,
      " AND kdy BETWEEN ADDDATE(NOW(),-",menu_par.get('days'),") AND NOW()"
    ));
  }
  view f: table rodina
#   view ht: table tvori  { join_type:"LEFT", join:"USING(id_osoba)" }
  view fh: table _track { join:"ON kde='rodina' AND klic=id_rodina" }
  browse bf [10,30,,] {tag:'f', group_by:'f.id_rodina'
      rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
#     show id_o { data:f.id_osoba }
    show id_r { data:f.id_rodina }
    show id_f { data:fh.id_track }
    show barva { expr:"f.deleted=''" }
    show nazev [,,70,] { data:f.nazev, title:'příjmení', format:'q*s+' }
#     show jmeno [,,70,] { data:h.jmeno, title:'jméno', format:'q*s' }
    show [,,54+70,] { title:'obec', data:f.obec, format:'q*s' }
    show kdo [,,30,] { title:'kdo', expr:"SUBSTR(MAX(CONCAT(kdy,kdo)),20)", format:'q*s'
      help:'kdo naposledy provedl změnu'}
    show kdy [,,65,] { title:"kdy", expr:"SUBSTR(MAX(CONCAT(kdy,kdo)),1,10)", sql_pipe:'sql_date1',
      format:'q*s', help:'kdy byla naposledy provedana změna'}
    show [,,20,] { title:"změn", expr:"COUNT(*)", help:'celkem změn v daném období', format:'rq*s' }
    proc onrowclick() { idf.set(id_r.get); page.evid_load(0,idf.get); }
  }
#   # ==============================================> X - ÚPRAVY OSOB
#   var bx_cnd=1, bx_filtr=1, bx_having=1, bx_mode='k'
#   proc bx_reload(cnd) { echo("bx_reload ",virgin.get);
#     [ virgin.get; start ];
#     [ eq(bx_mode.get,'k');
#       bx.a.width( 0); bx.ax.width( 0); bx.ar.width( 0);
#       bx.k.width(15); bx.kx.width(80); bx.kr.width(80)
#     | bx.k.width( 0); bx.kx.width( 0); bx.kr.width( 0);
#       bx.a.width(15); bx.ax.width(80); bx.ar.width(80) ];
#     bx_cnd.set(cnd);
#     idx.get; [ bx.browse_seek(conc("id_osoba=",idx.get)); bx.onrowclick ]
#   | bx.browse_load(conc(cnd," AND ",bx_filtr.get),'',
#       conc(cconc(eq(bx_mode.get,'k'),"kx!='' AND kr!='' AND kx!=kr",
#         "ax!='' AND ax!='CZ' AND ar!='' AND ar!='CZ' AND ax!=ar")," AND ",bx_having.get));
#   }
#   select x_vyber [163,5,189,] {tag:'x', type:'map'
#     map_pipe:map_evi_vyber_x.hodnota, options:map_evi_vyber_x.zkratka, format:'t'
#     help:'výběrová podmínka, doplňující případně zadaná kritéria'
#     proc onchange() { refresh; idx.set(0); bx_reload(bx_cnd.get) }
#     proc refresh() {
#       bx_filtr.set(this.get);
#       bx_having.set(ask('select','ikona','_cis',conc("druh='evi_vyber_o' AND data=",this.key)));
#       echo("bx_having=",bx_having.get);
#       [ bx_having.get | bx_having.set(1) ] }
#   }
#   view x: table osoba
#   view xt: table tvori  { join:"USING(id_osoba)" }
#   view xr: table rodina { join:"ON xr.id_rodina=xt.id_rodina" }
#   view xrt: table tvori { join:"ON xrt.id_rodina=xr.id_rodina" }
#   browse bx [10,30,,] {tag:'x', group_by:'x.id_osoba'
#       rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
#     show id_o { data:x.id_osoba }
#     show id_t { data:xt.id_tvori }
#     show id_r { data:xr.id_rodina }
#     show barva { expr:"x.deleted=''" }
#     show _rodin { expr:"COUNT(DISTINCT xt.id_rodina)" }
#     show _clenu { expr:"COUNT(DISTINCT xrt.id_tvori)" }
#     show prijmeni [,,70,] { data:x.prijmeni, title:'příjmení', format:'q*s+' }
#     show jmeno [,,70,] { data:x.jmeno, title:'jméno', format:'q*s' }
#     show k [,,15,] { title:'o', help:'osobní', data:x.kontakt, format:'q*s' }
#     show kx [,,80,] { title:'kon.osobní', format:'tq*s', expr:"
#       REPLACE(REPLACE(CONCAT(x.telefon,x.email),' ',''),';',',')" }
#     show kr [,,80,] { title:'kon.rodinný', format:'q*s', expr:"
#       IFNULL(SUBSTR(MIN(CONCAT(xt.role,REPLACE(REPLACE(CONCAT(xr.telefony,xr.emaily),' ',''),';',','))),2),'')" }
#     show a [,,0,] { title:'o', help:'osobní', data:x.adresa, format:'q*s' }
#     show ax [,,0,] { title:'adr.osobní', format:'tq*s',expr:"
#       TRIM(CONCAT(x.psc,x.obec,x.ulice,x.stat))" }
#     show ar [,,0,] { title:'adr.rodinná', format:'q*s', expr:"
#       IFNULL(SUBSTR(MIN(CONCAT(xt.role,TRIM(CONCAT(xr.psc,xr.obec,xr.ulice,xr.stat)))),2),'')" }
#
#     proc onrowclick() { idx.set(id_o.get); page.evid_load(idx.get,0); }
#   }
#   # ==============================================> Z - NEJEDNOZNAČNÉ OSOBY
#   var bz_cnd=1
#   proc bz_reload(cnd) {
#     [ virgin.get; start ];
#     bz_cnd.set(cnd);
#     idz.get; [ bz.browse_seek(conc("id_osoba=",idz.get)); bz.onrowclick ]
#   | bz.browse_load(conc(cnd,' AND ISNULL(klic)'),'',"_pocet>1")
#   }
#   view z: table osoba
#   view zt: table _track { join_type:"LEFT", join:"ON klic=z.id_osoba AND op='r' AND kde='osoba'" }
#   browse bz [10,30,,] {tag:'z', group_by:'z.id_osoba'
#       rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
#     show id_o { data:z.id_osoba }
#     show id_tr { data:zt.id_track }
#     show barva { expr:"z.deleted=''" }
#     show _pocet { title:'#',expr:"
#       (SELECT COUNT(*) AS _n FROM osoba AS o
#         WHERE o.deleted='' AND o.prijmeni=z.prijmeni AND o.jmeno=z.jmeno
#           AND YEAR(o.narozeni)=YEAR(z.narozeni))" }
#     show prijmeni [,,75,] { data:z.prijmeni, title:'příjmení', format:'q*s+' }
#     show [,,35,] { expr:"YEAR(z.narozeni)", title:'nar.', format:'q*s' }
#     show [,,85,] { data:z.ulice, title:'ulice', format:'q*s' }
#     show [,,40,] { data:z.psc,   title:'psč',   format:'tq*s' }
#     show [,,80,] { data:z.obec,  title:'obec',  format:'q*s' }
#
#     proc onrowclick() { idz.set(id_o.get); page.evid_load(idz.get,0); }
#   }
#   # ==============================================> Y - NEJEDNOZNAČNÉ RODINY
#   var by_cnd=1
#   proc by_reload(cnd) {
#     [ virgin.get; start ];
#     by_cnd.set(cnd);
#     idy.get; [ by.browse_seek(conc("id_osoba=",idy.get)); by.onrowclick ]
#   | by.browse_load(conc(cnd,' AND ISNULL(klic)'),'',"_pocet>1")
#   }
#   view y: table rodina
#   view yt: table _track { join_type:"LEFT", join:"ON klic=y.id_rodina AND op='r' AND kde='rodina'" }
#   browse by [10,30,,] {tag:'y', group_by:'y.id_rodina'
#       rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
#     show id_r { data:y.id_rodina }
#     show id_tr { data:yt.id_track }
#     show barva { expr:"y.deleted=''" }
#     show _pocet [,,20,] { title:'#', expr:"
#       (SELECT COUNT(*) FROM rodina AS r WHERE r.deleted='' AND r.nazev=y.nazev AND r.psc=y.psc)" }
#     show nazev [,,75,] { data:y.nazev, title:'název', format:'q*s+' }
#     show [,,80,] { data:y.ulice, title:'ulice', format:'q*s' }
#     show [,,60,] { data:y.psc,   title:'psč',   format:'tq*s' }
#     show [,,80,] { data:y.obec,  title:'obec',  format:'q*s' }
#
#     proc onrowclick() { idy.set(id_r.get); page.evid_load(0,idy.get); }
#   }
  # ==============================================> O - OSOBY
  var bo_cnd=1, bo_filtr= 1, bo_having= 1
  proc bo_reload(cnd) {
    [ virgin.get; start ];
    bo_cnd.set(cnd);
    ido.get; [ bo.browse_seek(conc("id_osoba=",ido.get)); /*bo.onrowclick*/ ]
  | bo.browse_load(conc('o.access & ',access.get,' AND ',cnd," AND ",bo_filtr.get),'',bo_having.get);
  | page.page_init
  }
  select o_vyber [163,5,154,] {tag:'o', type:'map'
    map_pipe:map_evi_vyber_o.hodnota, options:map_evi_vyber_o.zkratka, format:'t'
    help:'výběrová podmínka, doplňující případně zadaná kritéria'
    proc onchange() { refresh; ido.set(0); bo_reload(bo_cnd.get) }
    proc refresh() {
      bo_filtr.set(this.get);
      bo_having.set(ask('select','ikona','_cis',conc("druh='evi_vyber_o' AND data=",this.key)));
      [ bo_having.get | bo_having.set(1) ] }
  }
  check o_filtr [320,5,50,] {tag:'o', title:"filtr", format:'t', value:'0'
    proc onchange () {
      bo_filtr.set(o_vyber.get);
      { this.get; filtr_osob.modal(282,258); bo_filtr.set(conc(bo_filtr.get,filtr_osob.sql.get));
      | this.set(0); filtr_osob.filtr_clear };
      ido.set(0); bo_reload(bo_cnd.get);
  }}
  view o: table osoba
  view ot: table tvori  { join_type:"LEFT", join:"USING(id_osoba)" }
  view of: table rodina { join_type:"LEFT", join:"USING(id_rodina)" }
  view os: table spolu  { join_type:"LEFT", join:"USING(id_osoba)" }
  view op: table pobyt  { join_type:"LEFT", join:"USING(id_pobyt)" }
  browse bo [10,30,,] {tag:'o', group_by:'o.id_osoba'
      rows:27, buf_rows:60, qry_rows:1, css_rows:'barva,0:neucast'
    show id_o { data:o.id_osoba }
    show id_t { data:ot.id_tvori }
    show id_r { data:of.id_rodina }
    show id_p { data:os.id_pobyt }
    show _rodin { expr:"COUNT(*)" }
    show barva { expr:"o.deleted=''" }
    show _funkce { expr:"GROUP_CONCAT(DISTINCT op.funkce)" }
    show access { data:o.access }
    show prijmeni [,,70,] { data:o.prijmeni, title:'příjmení', format:'q*s+'
      css_cell:'access,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show jmeno [,,70,] { data:o.jmeno, title:'jméno', format:'q*s' }
#     show [,,60,] { title:'obec', data:o.obec, format:'q*s' }
    show [,,60,] { title:'obec', expr:"IF(o.adresa,o.obec,of.obec)", format:'q*s' }
    show nar [,,50,] { title:'rrmmdd', data:o.narozeni, sql_pipe:'sql_yymmdd', format:'q@s'
      help:'datum narození ve tvaru rrmmdd'}
    show _vek [,,20,] { title:"věk", expr:"TIMESTAMPDIFF(YEAR,narozeni,NOW())", format:'rsq*' }
    // volitelná položka
    show mail  [,,44,] { data:o.email, title:'emaily',help:'osobní emaily', format:'tq%s' }
    show _id_o [,,0,] { data:o.id_osoba, title:'ID osoby',help:'osobní číslo', format:'rq*s' }
    proc onrowclick() { ido.set(id_o.get); page.evid_load(ido.get,0); }
    proc onclick() {
      mail.width; mail.width(0);  _id_o.width(44)
    |             mail.width(44); _id_o.width(0)
    }
  }
  # ==============================================> R - RODINY
  var br_cnd=1, br_filtr= 1, br_having= 1
  proc br_reload(cnd) {
    [ virgin.get; start ];
    br_cnd.set(cnd);
    idr.get; [ br.browse_seek(conc("id_rodina=",idr.get)); br.onrowclick ]
  | br.browse_load(conc('r.access & ',access.get,' AND ',cnd," AND ",br_filtr.get),'',br_having.get);
  }
  select r_vyber [163,5,154,] {tag:'r', type:'map'
    map_pipe:map_evi_vyber_r.hodnota, options:map_evi_vyber_r.zkratka, format:'t'
    help:'výběrová podmínka, doplňující případně zadaná kritéria'
    proc onchange() { refresh; idr.set(0); br_reload(br_cnd.get) }
    proc refresh() {
      br_filtr.set(this.get);
      br_having.set(ask('select','ikona','_cis',conc("druh='evi_vyber_r' AND data=",this.key)));
      [ br_having.get | br_having.set(1) ] }
  }
  check r_filtr [320,5,50,] {tag:'r', title:"filtr", format:'t', value:'0'
    proc onchange () {
      br_filtr.set(r_vyber.get);
      { this.get; filtr_rodin.modal(282,258); br_filtr.set(conc(br_filtr.get,filtr_rodin.sql.get));
      | this.set(0); filtr_rodin.filtr_clear };
      idr.set(0); br_reload(br_cnd.get);
  }}
  view r: table rodina
  view rt: table tvori { join_type:'LEFT', join:"USING(id_rodina)" }
  view rto: table osoba { join_type:'LEFT', join:"USING(id_osoba)" }
  browse br [10,30,,] {tag:'r', rows:27, buf_rows:60, qry_rows:1, group_by:'r.id_rodina', css_rows:'barva,0:neucast'
    show id_r { data:r.id_rodina }
    show id_t { data:rt.id_tvori }
    show barva { expr:"r.deleted=''" }
    show _clenu { expr:"COUNT(*)" }
    show access { data:r.access }
    show nazev [,,70,] { data:r.nazev, title:'rodina', format:'q*s+',
      css_cell:'access,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show jmena [,,130,] { expr:"GROUP_CONCAT(rto.jmeno ORDER BY rt.role)", title:'jména', format:'tq%s' }
    show [,,50,] { title:'obec', data:r.obec, format:'q*s' }
    // volitelná položka
    show maily [,,66,] { data:r.emaily, title:'emaily', help:'rodinné emaily', format:'tq%s' }
    show _id_r [,,0,] { data:r.id_rodina, title:'ID rodiny',help:'číslo rodiny', format:'rq*s' }
    proc onrowclick() {  idr.set(id_r.get); page.evid_load(0,idr.get); }
    proc onclick() {
      maily.width; maily.width(0);  _id_r.width(66)
    |              maily.width(66); _id_r.width(0)
    }
  }
}
# ===========================================================================================> _page
# formulář se záložkami
form _page {
  # ---------------------------------------------- interface
  # 0,r = zobrazení rodiny a náhodné osoby (prioritně s role='a')
  # o,0 = zobrazení osoby a náhodně rodiny (prioritně tu, kde má roli 'a' nebo 'b')
  # o,r = zobrazení rodiny a její osoby (nebo warning, že to nesedí a pokračování jako v o,0)
  proc evid_load(ido,idr) { var x:object        // zobrazí a zapamatuje podmínky
    idr0.set(idr); ido0.set(ido);
    form.idr.set(idr); form.ido.set(ido);
    page_load; }
  proc refresh() {                              // zobrazí rodiny či osoby podle starých podmínek
    evid_load(ido0.get,idr0.get) }
  # ---------------------------------------------- stav a inicializace
  var idr0=0, idr=0     // původní a zobrazená rodina
  var ido0=0, ido=0     // původní a zobrazený člen (jehož rodina, role, rodiny jsou zobrazeny)
  proc start() {
    cvak(evid); oso.show_osoba(1); rod.show_rodina; up(oso); up(rod); down(dar)
  }
  # ---------------------------------------------- pomocné procedury
  # načtení osoby a jeho rodin
  proc page_load() { var x:object
    page_init;
    x.set(ask('evid2_cleni',ido.get,idr.get,conc(cconc(ido.get,lst.bo_filtr.get,lst.br_filtr.get))));
    x.msg; [ x.rodina; rod_load(x.rodina) ]; alert(x.msg)
  | idr.set(x.rodina); x.rodina; rod.enable(1,'.*');
    cleni.browse_fill(x.cleni); cleni.raise('onrowclick',ido.get);
    rod_load(x.rodina);  // rod.r.load(x.rodina); rod.call('od_svatby');
  | rod.enable(0,'.*'); osoba_load
  }
  # vyčištění stránky
  proc page_init() {
#     [ eq(lst.mode.get,'o'); dary.display(1); [ eq(curr.get,'dary'); dar.display(1) ]
#     | dary.display(0); dar.display(0) ];
    oso.init; rod.init; cleni.browse_init; act.akc.browse_init;
    oso.set_helps(0,'zluty','oranzovy'); rod.set_helps(0,'zluty','oranzovy') }
  # změna v některém z formulářů
  proc d_change(x) { cmd.is_chng }
  # žádná změna
  proc page_same() { return(and(form.same,rod.same,oso.same)) }
  # zruš příznaky změn
  proc page_plain() { form.plain; rod.plain; oso.plain; }
  # načíst aktivní osobu do aktivní záložky
  proc osoba_load() {
    switch(curr.get,
    'evid',{ oso_load(ido.get) },
    'akce',{ oso_load(ido.get); act.ucasti(ido.get,conc(oso.prijmeni.get,' ',oso.jmeno.get)) },
    'albu',{ alb.galery('rodina',idr.get) },
    'dary',{ oso_load(ido.get); dar.dary(ido.get,conc(oso.prijmeni.get,' ',oso.jmeno.get)) }
    );
    [ cmd.part('o_smaz');
      cmd.o_smaz.display(not(page.oso.deleted.get)); cmd.o_obnov.display(page.oso.deleted.get) ];
  }
  # načíst osobu do záložky evid s doplněním informací z _track je-li lst.mode='x'
  proc oso_load(ido) { var ret: object
    or(evi_barvit_zmeny.get,eq(lst.mode.get,'x'));
    oso.set_helps(0,'zluty','oranzovy');
    ret.set(ask('elim2_data_osoba',ido));
    oso.load(ido); oso.show_osoba(1);
    oso.set_helps(ret.chng,'zluty','oranzovy');
  | oso.load(ido); oso.show_osoba(1);
  }
  # načíst rodinu s doplněním informací z _track je-li lst.mode='x'
  proc rod_load(idr) { var ret: object
    [ or(evi_barvit_zmeny.get,eq(lst.mode.get,'x'));
      ret.set(ask('elim2_data_rodina',idr));
      rod.r.load(idr); rod.call('od_svatby');
      rod.set_helps(ret.chng,'zluty','oranzovy');
    | rod.r.load(idr); rod.call('od_svatby')
    ];
    [ cmd.part('r_smaz');
      cmd.r_smaz.display(not(page.rod.r_deleted.get));
      cmd.r_obnov.display(page.rod.r_deleted.get) ];
  }
  # ----------------------------------------------==> záložky
  var curr:object                               // aktuální záložka
  proc cvak(i) {
    form.set_css('ae_butt_off','ae_butt_on','_'); i.set_css('ae_butt_on','ae_butt_off');
    curr.set(i._id); form.display(0,i.par.off); form.display(1,i.par.on)  }
  label evid [ 12,0,120,20] {par:°{on:'C|O',off:'B|F|D'}, tag:'_', title:'<b>Osobní údaje</b>',
    proc onclick() { cvak(this); osoba_load }}
  label akce [152,0,120,20] {par:°{on:'C|O|B',off:'F|D'}, tag:'_', title:'<b>Účast na akcích</b>',
    proc onclick() { cvak(this); osoba_load }}
  label albu [292,0,120,20] {par:°{on:'C|F',off:'O|B|D'}, tag:'_', title:'<b>Fotografie</b>',
    proc onclick() { cvak(this); osoba_load }}
  label dary [452,0,120,20] {par:°{on:'C|O|D',off:'F'},   tag:'_', title:'<b>Dary</b>',
    proc onclick() { cvak(this); osoba_load }}
  label frame [0,16,706,min_h-150] { css:'ae_work'
    proc onclick() { cmd.get.set_css('shift_down','shift_up') }}
  # ==============================================> C: EVIDENCE RODINY
  view r: table rodina
  use rod: form _rodina2p [5,20,,] { tag:'Cf'   // view r:rodina
    proc on_click() { up(page.oso); up(page.rod); down(page.dar) }
    proc onchanged() { page.d_change('r') }     // reakce na změnu ve formuláři => změna tlačítek
    proc rodina_changed() {                     // reakce na změnu select:rodiny => výměna členů
      eq(page.idr.get,rod.rodiny.key)
    | page.idr.set(rod.rodiny.key);             // - změna lokálního idr
      page.page_load
    }
    proc rodina_edit() { page.d_change('r') }
  }
  # ----------------------------------------------==> ... členové rodiny
  label [10,40,200,] {tag:'C', title:"členi zobrazené rodiny" }
  browse cleni [10,54,107,191] {tag:'Cb', rows:8, buf_rows:50, css_rows:'barva,0:neucast,2:seda'
    var last=1
    show id_osoba
    show id_tvori
    show barva
    show rodiny
    show org
    show jmeno [,,110,] {title:'jména'
      css_cell:'org,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show vek   [,,30,] {title:'věk', format:'r' }
    show role  [,,10,] {title:'role'}
    proc onrowclick() {
      accessed(org.get);
      // zobrazení člena rodiny, případná úprava focus
      last.set(this.browse_active);
      ido.set(id_osoba.get);                    // změna lokálního ido
      rod.t.key(id_tvori.get); rod.t_role.set(role.get);
      rod.rodiny.selects(rodiny.get); rod.rodiny.key(idr.get);
      [ eq(lst.mode.get,'o');                   // pokud jde o jinou osobu než je v lst
        { eq(ido.get,ido0.get); lst.bo.browse_focus
        | lst.bo.blur(1) }
      ];
      osoba_load
    | warning("nemáte oprávnění vidět údaje o osobě z jiné organizace");
      this.browse_active(last.get)
    }
  }
  # ==============================================> O: EVIDENCE OSOBY
  use oso: form _osoba2x  [200,20,,] { tag:'O'  // view o:osoba
    proc on_click() { up(page.oso); up(page.rod); down(page.dar) }
    proc onchanged() { page.d_change('o') }
    menu detail { type:'context'
      item { title:'EVID konfigurace formuláře', proc onclick () { osoba_config.tune(panel) } }
    }
  }
  # ==============================================> . kontextové menu
  menu ctx { type:'context', join:frame
    item { title:'sjednotit kopie osob', skill:'fad|fad;yad|yad'
      proc onclick () { elim.osoby(ido.get,oso.jmeno.get,oso.prijmeni.get); }} //lst.refresh2 } }
    item { title:'sjednotit kopie rodin', skill:'fad|fad;yad|yad'
      proc onclick () { elim.rodiny(idr.get,rod.rodiny.get); }} // lst.refresh2 } }
    item { title:'sjednotit kopie členů rodiny', skill:'fad|fad;yad|yad'
      proc onclick () { idr.get; elim.cleni(idr.get); }} //lst.refresh2 } }
    item { title:'-zvýrazňovat změněné údaje'  proc onclick () { evi_barvit_zmeny.set(1)} }
    item { title:'nezvýrazňovat změněné údaje' proc onclick () { evi_barvit_zmeny.set(0)} }
  }
  use act: form _aktivity [450, 20,,]  { tag:'B', format:'n' }
  use alb: form foto._alb [200, 20,,]  { tag:'F', format:'n' }
  use dar: form _dary     [  5,-57,,]  { tag:'D', format:'n' }
}
# ------------------------------------------------------------------------------------------==> DARY
form _dary [,,440,min_h-160] {css:'ae_frame shift_down'
  proc onclick() { up(page.dar); down(page.oso); down(page.rod) }
  label frame [2,3,78,] { css:'frame_label_up', title:'přehled darů - '}
  label jmeno [79,3,172,] { css:'frame_label_up'}
  label ido   [378,3,50,] { format:'r' }
  label idd   [378,18,50,] { format:'r' }
  proc dary(_ido,_jmeno) {
    form.init; ido.set(_ido); jmeno.set(_jmeno);
    b.browse_load(conc("da.deleted='' AND ukon='d' AND id_osoba=",_ido))
  }
  proc refresh() { dary(id_o.get,jmeno.get) }
  # seznam darů
  view da: table dar
  view do: table osoba { join:"USING(id_osoba)" }
  browse b [5,20,,] { rows:9, qry_rows:1
    show id_d { data:da.id_dar }
    show id_o { data:do.id_osoba }
    show access { data:da.access }
    show [,,13,] { data:da.ukon, title:'způsob', format:'q*s'
      css_cell:'access,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show castka [,,70,] { data:da.castka, title:'částka', format:'rq*s' }
    show [,,80,] { data:da.dat_od, title:'přijetí', format:'rq*s' }
    show [,,80,] { data:da.dat_do, title:'potvrzení', format:'rq*s' }
    proc onrowclick() { form.load(id_d.get); idd.set(id_d.get); form_state('n|s','u|z'); }
  }
  # formulář pro úpravu darů
  # skryté položky
  field id_o { data:da.id_osoba }
  field ukon { data:da.ukon }
  field del  { data:da.deleted }
  # viditelné položky
  const Ld=293
  field castka [Ld,40,65,] {data:da.castka, help:'darovaná částka', format:'xr', title:'^částka'}
  field datum  [Ld,75,85,] {type:'date', data:da.dat_od, help:'datum přijetí daru', format:'xRUr', title:'^dar přijat dne'}
  field potvrz [Ld,110,85,] {type:'date', data:da.dat_do, help:'datum odeslání potvrzení', format:'RUr', title:'^potvrzeno dne'}
  field pozn   [Ld,145,137,] {data:da.note, help:'poznámka', format:'x', title:'^poznámka'}
  # --------------------------- fixované údaje
  var _dar_fixovan: number
  proc onstart() { _dar_fixovan.set(0) }
  menu { type:'context'
    item fix { title:'zapamatuj fixované údaje'
      proc onclick () { form.option('x:1'); _dar_fixovan.set(1);  form.focus } }
    item unfix { title:'zapomeň fixované údaje'
      proc onclick () { form.option('x:0'); _dar_fixovan.set(0); form.focus } }
  }
  # tlačítka a obslužné procedury
  proc form_init() {
    b.browse_init; form.init; form_state('n','u|z|s'); }
  proc form_state(on,off) {
    form.enable(1,on); form.enable(0,off); }
  proc onchanged () {
    form_state('u|z','n|s') }
  label cmd [Ld,175,137,50] { css:'ae_parm', style:'z-index:1' }
  # -------------------------- Nový
  button [cmd.l+6,cmd.t+5,,] { tag:'n', title:'[fa-database] Nový',  help:'Vložit nový dar', style:'z-index:2'
    proc onclick() {
      form.init(2); form_state('u|z','n|s');
      id_o.set(ido.get); id_o.change(1); del.set(''); del.change(1);
      ukon.set('d'); ukon.change(1); castka.change(1);
      { _dar_fixovan.get | datum.set(now); datum.change(1) };
  }}
  # -------------------------- Uložit
  button [cmd.l+63,cmd.t+5,,] {tag:'u', title:'[fa-save] Uložit',  help:'Uložit změněná data', style:'z-index:2'
    proc onclick() {
      form.same
    | // oprava
      form.key; form.save; form.load;
      [ b.browse_seek; form_state('n|s','u|z') ]
    | // přidání
      id_o.get;
      form.insert; form.load;
      b.raise('onrowclick',b.browse_seek(conc('id_dar=',form.key))); form_state('n|s','u|z');
#       [ osoby.b.browse_row | osoby.b.browse_init ]
    | error('chyba při vkládání daru - nenastavený člen')
  }}
  # -------------------------- Zpět
  button [cmd.l+6,cmd.t+27,,] {tag:'z', title:'[fa-undo] Zpět',  help:'Neměnit změněná data', style:'z-index:2'
    proc onclick() {
      b.browse_count; form.load(b.id_d.get); form_state('n|s','u|z')
    | form.init; form_state('n','u|z|s')
  }}
  # -------------------------- Smazat
  button [cmd.l+63,cmd.t+27,,] {tag:'s', title:'[fa-times fa-red] Vymazat',  help:'Smazat tento dar', style:'z-index:2'
    proc onclick() {
      confirm("opravdu smazat dar ",b.castka.get," od ",jmeno.get,"?");
      del.set(conc('D ',sys('user','abbr'),' ',now)); del.change; form.save;
      refresh
  }}
}
# --------------------------------------------------------------------------------------==> AKTIVITY
# jsou vidět všechny aktivity dané osoby ve všech organizacích,
# k přepnutí na akci musí být dostatečná funkční i datová oprávnění
form _aktivity [,,248,min_h-160] {css:'ae_frame shift_up'
  view a: table akce
  view p: table pobyt { join:'ON a.id_duakce=p.id_akce' }
  view s: table spolu { join:'USING(id_pobyt)' }
  label frame [2,3,96,] { css:'frame_label_up', title:'účasti na akcích - '}
  label jmeno [96,3,130,] { css:'frame_label_up' }
  field ido [186,0,50,] { format:'or', css:'Label' }
  browse akc [4,20,,] { rows:21, qry_rows:1, buf_rows:50, optimize:°{ask:'evid2_browse_act_ask'}
    show ida { data:a.id_duakce }
    show idp { data:p.id_pobyt }
    show ids { data:s.id_spolu }
    show fce { data:p.funkce }
    show org { data:a.access }
    show rok  [,, 30,] { title:'rok', format:'q*s-', help:"rok konání akce"
      css_cell:'org,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show akce [,,128,] { title:'název', format:'tq*s', help:"název akce" }
    show _vek [,, 20,] { title:'věk', help:"stáří v době konání akce" }
    show _fce [,, 30,] { title:'fce', help:"funkce na akci"
      data:p.funkce, map_pipe:ms_akce_funkce.zkratka, format:'q*s' }
    proc onsubmit() { na_akci }
    proc na_akci() {
      has_skill('yaa;faa;caa'); accessed(org.get);
      echo('přepnuto na akci ',akce.get);
#       [ eq(fce.get,99);
#         pece.akce_show(ida.get,ids.get,conc(akce.get,' (',rok.get,')'),'EVIDENCE')
#       | ucast.akce_show(ida.get,idp.get,conc(akce.get,' (',rok.get,')'),'EVIDENCE')
#       ]
    }
  }
  button [-40,2,,] { title:'^akce', css:'db_evidence', help:'též lze skočit dvojklikem na řádku s akcí'
    proc onclick() { akc.na_akci } }
  proc ucasti(_ido,_jmeno) {
    form.display(_ido); _ido; ido.set(_ido); jmeno.set(_jmeno);
    akc.browse_load(conc('a.spec=0 AND s.id_osoba=',_ido),"datum_od DESC")
  }
}
# ============================================================================================> _CMD
# změny v evidenci
form _cmd [,,706,32] { css:'ae_frame'
  # ---------------------------------------------- stav a inicializace
  var mode:text  // 'novy_clen' nebo 'nova_rodina' nebo ''
  proc start() { set_state('show'); }
  proc onclick() { form.set_css('shift_up','shift_down') }
  # ---------------------------------------------- pomocné procedury
  proc is_chng() { eq(mode.get,'show'); set_state('edit') }
  proc set_state(_mode) {
    mode.set(_mode);
    switch(mode.get,
    'newo',{ # nový člen rodiny
             m.enable(0); form.enable(1,'s'); form.enable(0,'x'); lst.bo.enable(0); lst.br.enable(0);
             page.oso.init; page.rod.t.init;
             page.cleni.enable(0); page.rod.enable(0,'r|R'); },
    'newr',{ # nová rodina s nastaveným členem
             m.enable(0); form.enable(1,'s'); form.enable(0,'x'); lst.bo.enable(0); lst.br.enable(0);
             page.oso.enable(0,'.*'); page.rod.t.init; page.rod.init;
             page.display(0,'Cb'); page.cleni.enable(0);
             page.rod.display(0,'R'); page.rod.display(1,'r|n'); page.rod.enable(1,'.*'); },
    'newro',{ # nová rodina s novým členem
             m.enable(0); form.enable(1,'s'); form.enable(0,'x'); lst.bo.enable(0); lst.br.enable(0);
             page.oso.init; page.rod.t.init; page.rod.init;
             page.display(0,'Cb'); page.cleni.enable(0);
             page.rod.display(0,'R'); page.rod.display(1,'r|n'); },
    'edit',{ # editace údajů rodiny nebo/i člena
             m.enable(0); form.enable(1,'s'); form.enable(0,'x'); lst.bo.enable(0); lst.br.enable(0);
             page.cleni.enable(0); page.rod.rodiny.enable(0); },
    'show',{ # jen zabrazení
             m.enable(1); form.enable(0,'s'); form.enable(1,'x'); page.oso.enable(1,'.*');
             lst.bo.enable(1); lst.br.enable(1);
             page.display(1,'C'); page.cleni.enable(1); page.rod.enable(1,'r|R'); }
    );
  }
  proc reload(depth) { // depth ... hloubka znovunačtení
    set_state('show'); page.page_plain; warning;
    page.rod.display(1,'a'); page.rod.display(0,'m|n');
    switch(depth,
    'curr',{ [ page.cleni.raise('onrowclick',page.oso.key); page.rod.r.load(page.idr.get) ] },
    'page',{ page.refresh },
    'lst', { lst.refresh });
  }
  // ==> ... zpět
  label  [0,0,136,30] { css:'ae_parm', skill:'yaa+;faa+;caa+' }
  button [7,6,,] {tag:'s', type:'html', title:'[fa-undo] Zpět',  help:'Neměnit změněná data', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    proc onclick() { reload('curr') } }
  // ==> ... uložit změny
  button [64,6,66,] {tag:'s', type:'html', title:'[fa-save] Uložit',  help:'Uložit změněná data', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    proc onclick() { var ok:number, idr:number, ido:number, depth:text
      # ------------------------ vytvoření nového člena rodiny: osoba+tvori
      eq(mode.get,'newo');
      page.oso.insert;
      tvori.insert_record(object('id_osoba',page.oso.key,'id_rodina',page.idr.get,'role',page.rod.t_role.get));
      reload('page');
    | # ------------------------ vytvoření rodiny a prvního člena
      eq(mode.get,'newro');
      page.rod.r.insert; page.oso.insert;
      tvori.insert_record(object(
        'id_osoba',page.oso.key,'id_rodina',page.rod.r.key,'role',page.rod.t_role.get));
      reload('lst');
    | # ------------------------ vytvoření rodiny a připojení nastaveného člena
      eq(mode.get,'newr');
      page.rod.r.insert;
      tvori.insert_record(object(
        'id_osoba',page.oso.key,'id_rodina',page.rod.r.key,'role',page.rod.t_role.get));
      reload('lst');
    | # ------------------------ oprava
      eq(mode.get,'edit');
      depth.set('curr');
      [ page.oso.same
      | [ or(page.oso.jmeno.changed, page.oso.prijmeni.changed, page.oso.narozeni.changed);
          depth.set('page') ];
        page.oso.save ];
      [ page.rod.same | [page.rod.r.save];
        page.rod.t_role.changed; ask('akce2_save_role',page.rod.t.key,page.rod.t_role.get);
        depth.set('page') ];
      reload(depth);
    | error("Uložit co?")
    }
  }
  # RODINA
  label [144,9,80,] { title:"<b>Rodina:</b>" }
  // ==> ... rodina: nová, vymazat
  button [188,6,,] {tag:'x', type:'html', title:'[fa-heart] Nová rodina',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Vytvoření nové rodiny s prvním členem'
    proc onclick() { var jmeno:text
      // buďto úplně nová s novým členem, nebo nová s nastaveným členem
      jmeno.set(conc(page.oso.prijmeni.get," ",page.oso.jmeno.get));
      switch(choose(conc("Mám vytvořit novou rodinu s novým členem, <br>nebo s ",jmeno,"?"),
          conc("nový člen:2,",jmeno,":1,Zpět:0")),
      0,{ stop },
      1,{ set_state('newr');
          page.rod.access.set(access.get); foreach(page.rod.tagged('N'),change_x); },
      2,{ set_state('newro');
          page.rod.access.set(access.get); foreach(page.rod.tagged('N'),change_x);
          page.oso.access.set(access.get); foreach(page.oso.tagged('I'),change_x); }
      )
  }}
  // vymazat
  button r_smaz [287,6,,] {tag:'x', title:'[fa-times fa-red] Vymazat', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vymazání informací o rodině z evidence', format:'d'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',0,page.idr.get,'conf_rod'));
      { eq(ret.ok,1);                           // rodinu lze smazat
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',0,page.idr.get,'del_rod')); warning(ret.html);
          reload('page');
        ]
      | alert(ret.html) }                       // nastal problém
  } }
  // obnovit
  button r_obnov [287,6,,] {tag:'x', title:'[fa-plus fa-red] Obnovit', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Obnovení informací o smazané rodině', format:'n'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',0,page.idr.get,'undel_rod'));
      warning(ret.html); reload('lst')
  }}
  # ČLENI
  label [371,9,80,] { title:"<b>Členi:</b>" }
  // ==> ... člen: nový, přidat, vyjmout
  proc change_x(elem) { elem.change(1) }
  button novy_clen [404,6,,] {tag:'x', type:'html', title:'[fa-heart-o] Nový člen',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Vytvoření nové osoby a její zapojení do rodiny'
    proc onclick() { var _sex:number, _prijmeni:text
      _sex.set(page.oso.sex.get); _prijmeni.set(page.oso.prijmeni.get);
      set_state('newo');
      page.oso.sex.set(_sex); page.oso.prijmeni.set(_prijmeni); page.oso.narozeni.set(now);
      page.oso.access.set(access.get);
      page.rod.t_role.set('d');
      foreach(page.oso.tagged('I'),change_x); page.rod.t_role.change(1);
  } }
  // PŘIDAT
  button [490,6,,] {tag:'x', title:'[fa-plug] Přidat', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Výběr osoby z evidovaných a jeho připojení k rodině', format:'d'
    proc onclick() { PridaniJmenem1.modal(240,50)
  } }
  // VYJMOUT
  button [554,6,,] {tag:'x', title:'[fa-plug fa-rotate-180 fa-red] Vyjmout',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Vyjmutí osoby z rodiny', format:'d'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'conf_mem'));
      { eq(ret.ok,1);                           // osobu lze vyjmout
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'del_mem')); warning(ret.html);
          // obnovíme page nebo lst (když byl smazán reprezentant rodiny)
          { eq(lst.mode.get,'r'); lst.ido.set(0); reload('page')
          | eq(page.ido.get,page.ido0.get); lst.ido.set(0); reload('lst')
          | reload('page')
          } ]
      | eq(ret.ok,2);                           // nutno (a lze) smazat i s rodinou
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'del_mem')); warning(ret.html);
          ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'del_rod')); warning(ret.html);
          lst.ido.set(0); lst.idr.set(0); reload('lst') ]
      | alert(ret.html) }                       // nastal problém
  } }
  // ==> ... osoba: vymazat, obnovit
  button o_smaz [630,6,,] {tag:'x', title:'[fa-times fa-red] Vymazat', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vymazání informací o osobě nebo jednočlenné rodině z evidence', format:'d'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'conf_oso'));
      { eq(ret.ok,1);                           // osobu lze smazat
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'del_oso')); warning(ret.html);
          // obnovíme page nebo lst (když byl smazán reprezentant rodiny)
          { eq(lst.mode.get,'r'); lst.ido.set(0); reload('page')
          | eq(page.ido.get,page.ido0.get); lst.ido.set(0); reload('lst')
          | reload('page')
          } ]
      | eq(ret.ok,2);                           // nutno (a lze) smazat i s rodinou
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'del_rod')); warning(ret.html);
          lst.ido.set(0); lst.idr.set(0); reload('lst') ]
      | alert(ret.html) }                       // nastal problém
  } }
  // OBNOVIT
  button o_obnov [630,6,,] {tag:'x', title:'[fa-plus fa-red] Obnovit', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Obnovení informací o smazané osobě', format:'n'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',page.ido.get,page.idr.get,'undel_oso'));
      warning(ret.html); reload('lst')
  }}
}
# ================================================================================> Přidání jménem 1
var pall: object
proc rodina_add(p,i) {  // používá panel PridaniJmenem1
  var ret: object
  p.chck.get;
  pall.set(p.all.get);
  ret.set(ask('evid2_pridej_k_rodine',page.idr.get,pall.get));
  { ret.ok; page.evid_load(pall.get('id'),page.idr.get);
  | warning(ret.msg) }
}
panel PridaniJmenem1 [,,320,280] {type:'popup', title:'Přidání osoby do rodiny'
  use fl: form _fl [12,10,,]
  proc onfocus() { fl.jmena.focus }
  form _fl [,,300,200] {
    var last: number
    var rod: object
    var popis: text
    button [0,250,,] { title:'přidat k nastavené rodině', proc onclick() {
      each(L,rodina_add);
      panel.hide(0)
    } }
    button [160,250,,] { title:'jiná jména', proc onclick() {
      jmena.init; vse.init; L.init } }
    button [240,250,,] { title:'konec', proc onclick() {
      jmena.init; vse.init; L.init; panel.hide(0) } }
    // výběr z databáze
    select jmena [73,1,180,17] { type:'auto', format:'t'
        par:°{fce:'akce2_auto_jmena1',patt:'whole',deti:0,save:'key_only'}
      proc onchanged() {
        rod.set(ask('akce2_auto_jmena1L',this.key));
        each(rod.get,jmenovci); // nesmí volat asynchronní operace
      }
    }
    check deti [258,0,46,] { title:"i děti", value:'0', format:'t'
      proc onchange() { jmena.add_attrib('par.deti',this.get)
    }}
    proc jmenovci(p,i) {
      last.set(L.add);
      popis.set(p.nazev);
      L.part(last.get).part('info').set(popis.get);
      L.part(last.get).part('all').set(p);
    }
    // nastavení výběru
    check vse [4,0,80,16] { title:'všichni', format:'t'
      proc onchange() { each(L,nastav) }
      proc nastav (x,i) { x.chck.set(form.vse.get) }
    }
    list L [0,23,300,200] {rows:22      // anonymní group
      check chck [4,0,50,16] { title:' ', format:'t', value:'1' /*, proc onchange() { echo('jo/ne') }*/ }
      label info [23,4,300,16] {style:'white-space:nowrap', format:'t'}
      var all: object
    }
  }
}
# ======================================================================================> filtr_osob
panel filtr_osob [,,250,175] { type:'popup', title:"doplňující podmínky výběru osob"
  var sql=''
  proc filtr_set() { sql.set(cconc(1,''
    ,f.mrop.get," AND o.iniciace!=0"
    ,f.aktiv.get,conc(" AND o.aktivita RLIKE '.*",f.aktiv.get,".*'")
    ,f.jazyk.get,conc(" AND o.jazyk RLIKE '.*", f.jazyk.get,".*'")
    ,f.zajmy.get,conc(" AND o.zajmy RLIKE '.*", f.zajmy.get,".*'")
    ,f.pozn.get, conc(" AND o.note RLIKE '.*",  f.pozn.get,".*'")
    ,f.zamest.get, conc(" AND o.zamest RLIKE '.*",  f.zamest.get,".*'")
    ,f.slovaci.get,conc(" AND (o.stat='SK' OR IF(ISNULL(id_rodina),0,of.stat='SK'))")
    ,f.cizinci.get,conc(" AND (o.stat!='' AND o.stat!='SK' AND o.stat!='CZ'",
      " OR IF(ISNULL(id_rodina),0,of.stat!='' AND of.stat!='SK' AND of.stat!='CZ'))")
    // zahrne i rodinné schopnosti, ale jen pro manžele
    ,f.umi.key,conc(" AND (FIND_IN_SET('",f.umi.key,"',o.o_umi)",
      " OR ot.role IN ('a','b') AND IF(ISNULL(id_rodina),0,FIND_IN_SET('",f.umi.key,"',of.r_umi)))")
    ));
    lst.o_filtr.set_attrib('help',cconc(1,"... "
    ,f.mrop.get,        " a iniciovaní"
    ,f.zajmy.get,       " a jsou aktivní"
    ,f.jazyk.get,       " a znají jazyk"
    ,f.zajmy.get,       " a mají zájmy"
    ,f.zamest.get,      " a zaměstnání"
    ,f.pozn.get,        " s poznámkou"
    ,f.slovaci.get,     " a Slováci"
    ,f.cizinci.get,     " a cizinci"
    ,f.umi.get,         " a umí"
    ));
  }
  proc filtr_clear() { sql.set(''); lst.o_filtr.set_attrib('help',"bez filtru") }
  use f: form _f
  form _f {
    // vlevo
    field aktiv   [53,0,79,]   { title:'aktivita',    format:'t' }
    field jazyk   [53,25,79,]  { title:'jazyky',      format:'t' }
    field zajmy   [53,50,79,]  { title:'zájmy',       format:'t' }
    field zamest  [53,75,79,]  { title:'zaměst.',     format:'t' }
    field pozn    [53,100,79,] { title:'poznámka',    format:'t' }
    select umi    [53,125,99,] { type:'map0', options:ms_umi.hodnota, title:'schopnosti',
                                 value:'0', format:'t', help:"zohledňuje i rodiný um" }
    // vpravo
    check mrop    [171,1,76,17]  { title:'iniciovaní', format:'t', skill:'f|f;y|f;c|f' }
    check slovaci [171,26,76,17] { title:'Slováci', format:'t', help:"zohledňuje i rodinnou adresu" }
    check cizinci [171,51,76,17] { title:'jiní cizinci', format:'t', help:"zohledňuje i rodinnou adresu" }
    // ukončení
    button [57,156,,] { title:'[fa-filter] filtruj', proc onclick() { filtr_set; panel.hide(1) }}
    button [137,156,,] { title:'[fa-undo] zruš filtr', proc onclick() { filtr_clear; panel.hide(0) }}
  }
}
# =====================================================================================> filtr_rodin
panel filtr_rodin [,,250,175] { type:'popup', title:"doplňující podmínky výběru rodin"
  var sql=''
  proc filtr_set() { sql.set(cconc(1,''
    ,f.pozn.get, conc(" AND r.note RLIKE '.*",  f.pozn.get,".*'")
    ,f.slovaci.get," AND r.stat='SK'"
    ,f.cizinci.get," AND r.stat!='' AND r.stat!='SK' AND r.stat!='CZ'"
    ,f.umi.key,conc(" AND FIND_IN_SET('",f.umi.key,"',r.r_umi)")
    ));
    lst.r_filtr.set_attrib('help',cconc(1,"... "
    ,f.pozn.get,        " s poznámkou"
    ,f.slovaci.get,     " a Slováci"
    ,f.cizinci.get,     " a cizinci"
    ,f.umi.get,         " a umí"
    ));
  }
  proc filtr_clear() { sql.set(''); lst.r_filtr.set_attrib('help',"bez filtru") }
  use f: form _f
  form _f {
    // vlevo
    field pozn    [53,0,79,17] { title:'poznámka',    format:'t' }
    select umi    [53,25,99,]  { type:'map', options:ms_umi.hodnota,
                                   title:'schopnosti:', value:'0', format:'t' }
    // vpravo
    check slovaci [171,1,76,17] { title:'Slováci', format:'t'}
    check cizinci [171,26,76,17] { title:'jiní cizinci', format:'t' }
    // ukončení
    button [57,156,,] { title:'filtruj', proc onclick() { filtr_set; panel.hide(1) }}
    button [137,156,,] { title:'zruš filtr', proc onclick() { filtr_clear; panel.hide(0) }}
  }
}
# -------------------------------------------------------==> reakce na změny rozměrů okna prohlížeče
var  curr_h: number     // výška nad základní výšku
proc onresize(w,h) { // echo('evid2 onresize(',w,',',h,')');
  eq(curr_h.get,minus(h,min_h.get))                     // změnu šířky ignorujeme
| [ and(lt(h,min_h.get),not(eq(curr_h.get,min_h.get)));
    curr_h.set(0); h_change_all();
    menu_item.get; m.onclick(menu_item.get);
  | and(gt(h,min_h.get),not(eq(h,sum(curr_h.get,min_h.get))));
    curr_h.set(minus(h,min_h.get)); h_change_all();
    menu_item.get; m.onclick(menu_item.get);
  ];
}
# změna výšky oproti základní min_h
proc h_change_all() {
  cmd.property(object('down',curr_h.get));              // posunutí proti původnímu - omezeno na min_h
  page.frame.property(object('stretch',curr_h.get));    // protažení proti původnímu
  h_change_b;
}
# změna počtu řádků browse oproti aktuálním řádkům
proc h_change_b() { var r1:number, r2:number, h:number
  h.set(sys('screen','height'));
  r1.set(divide(sum(h.get,-147),18));
  r2.set(divide(sum(h.get,-230),18));
  not(eq(r1,lst.br.rows));
  r1.set(max(5,r1)); r2.set(max(3,r2));
  lst.br.set_attrib('rows',r1);
  lst.bo.set_attrib('rows',r1);
#   lst.bx.set_attrib('rows',r1);
  lst.bh.set_attrib('rows',r1);
  page.act.akc.set_attrib('rows',r2);
  page.act.property(object('height',sum(72,multiply(r2,18))));
}
