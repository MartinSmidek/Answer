#pragma test
# ------------------------------------------------------------------------------------------------ #
# Karta pro správu účastníků vybrané akce II.                                                      #
#                                                                                                  #
# Ans(w)er/Ezer                                     (c) 2007-2014 Martin Šmídek <martin@smidek.eu> #
# ------------------------------------------------------------------------------------------------ #

# ----------------------------------------------------------------------------==> . stavové proměnné

var the_duakce_local= 0,    // zobrazená akce - pokud se liší od the_duakce, je třeba překreslit
    virgin= 1,              // 0 - aktivivaný panel
    the_pobyt: number,
    zalozka: text,          // evid | plat | akce
    back: object,
    zmeny: object           // objekt naplněný požadavkem zobrazení nedávných změn

# -------------------------------------------------------------------------==> . inicializace panelu

# události panelu
func onfirstfocus() {
  spinner(1);
  the_duakce_local= 0;
  curr_h= 0;
  curr_w= sys('screen','width')<1280 ? 1024 : 1280;
  init_forms();
  page.evd.onclick();
  akce_onstart();
  onfocus();
  spinner(0);
  virgin= 0;
  onresize(sys('screen','width'),sys('screen','height'));
}
proc onfocus() { 
  eq(the_duakce_local.get,the_duakce.get)
| [ [ dirty.get | akce_onstart ];
    u.legenda(the_cenik.get,the_cena.get);
    u.b.xfunkce.set_attrib('css_cell',cconc(the_ms.get,"x_ms,1:zeleny,2:oranzovy,3:oranzovy",''));
    eq(the_duakce_local.get,the_duakce.get)
  | init_ucast2;
    the_duakce_local.set(the_duakce.get)
  ];
  evid.ctx.obn.enable(eq(the_druh.get,2)); // jen pro obnovy
  evid.ctx.obm.enable(eq(the_druh.get,2)); // jen pro obnovy
  // souběžné akce
  switch(the_soubeh.get,
  0,{ header.soubeh.display(0) },
  1,{ header.soubeh.display(1); panel.display(2,'akce1'); header.soubeh.set('^Děti') },
  2,{ header.soubeh.display(1); panel.display(2,'akce2');  header.soubeh.set('^Kurs') }
  );
  w_change_all;
  h_change_all;
}
proc onblur() {
  [ track.display; track.hide ];
}
# --------------------------------------------------------------------------==> . globální procedury
# přepnutí organizace
proc reaccess() { #==> . reaccess - změna
  init_ucast2
}
# nastavení pro akci v hnízdech
//proc ucast_hnizda() { var opts:object
//  echo("ucast HNIZDA=",the_hnizda.get);
//  { the_hnizda.get; 
//    header.hnizdo.set_attrib('options','ms_akce_hnizda_plus.nazev');
//    u.b.xhnizdo.set_attrib('map_pipe','ms_akce_hnizda.zkratka');
//    u.b.xhnizdo.set_query(1,'',0);
//    pob.hnizdo.set_attrib('options','ms_akce_hnizda.zkratka');
//    header.hnizdo.key(99);
//    header.hnizdo.display(1);
//    pob.hnizdo.display(1);
//    u.b._nazev.width(89); u.b.xhnizdo.width(20);
//  | header.hnizdo.display(0);
//    pob.hnizdo.display(0);
//    u.b._nazev.width(100); u.b.xhnizdo.width(0);
//    [ u.b.get_query; u.b.init_queries(1) ]
//  };
//}
func ucast_hnizda() { var opts:object
  echo(`ucast HNIZDA=${the_hnizda}`);
  if (the_hnizda) {
    header.hnizdo.set_attrib('options','ms_akce_hnizda_plus.nazev');
    u.b.xhnizdo.set_attrib('map_pipe','ms_akce_hnizda.zkratka');
    u.b.xhnizdo.set_query(1,'',0);
    pob.hnizdo.set_attrib('options','ms_akce_hnizda.zkratka');
    header.hnizdo.key(99);
    header.hnizdo.display(1);
    pob.hnizdo.display(1);
    u.b._nazev.width(89); u.b.xhnizdo.width(20);
  }
  else {
    header.hnizdo.display(0);
    pob.hnizdo.display(0);
    u.b._nazev.width(100); u.b.xhnizdo.width(0);
    if (u.b.get_query()) u.b.init_queries(1);
  }
}
# ukázání pobytu na stejné akci
proc ucast_pobyt(_idp)  {
  panel.focus; u.b.raise('onrowclick',_idp);
}
# ukázání pobytu s případným přepnutím akce
proc ucast_pobyt_akce(_idp,_ida)  {
  [ eq(_ida,the_duakce_local.get) | akce_load(_ida) ];
  ucast_pobyt(_idp)
}
# zobrazení osob - nastavených účastníků
proc osoby_show() {                             // obnova údajů o osobách
  [ os1.key; os1.show_osoba(u.dup.get) | os1.init_osoba ];
  [ os2.key; os2.show_osoba(u.dup.get) | os2.init_osoba ];
}
proc rodina_show() {                            // obnova údajů o rodině
  rod.key_rodina.get; rod.show_rodina | rod.init_rodina }
proc ucast_selected() {                         // seznam vybraných účastníků
  return(u.b.selected('get')) }
proc spolu_show() { sp1.key; sp1.show_spolu; sp2.key; sp2.show_spolu }
# úpravy formulářů pro y;f;c
proc init_forms() {
  the_pobyt.set(0);
  evid.Init;
}
# volání zajistí natažení dat z lst.the_akce z panel.onfucus
proc clear_ucast2() {
  the_duakce_local.set(0);
}
proc init_ucast2() {
  header.fill(the_title.get);
  eq(the_soubeh.get,0,1);
  # normální zobrazení
  page.page_start;
  init_forms;
  [ reload(0) ];
  panel.display(2,'akce1');
  [ u.b.browse_count; page.evd.onclick ];
| eq(the_soubeh.get,2);
  # souběžná akce - jen děti
  panel.display(1,'akce2'); panel.display(0,'akce1');
  u2.reload
}
proc prijeti_prihlasky () { var msg:text
  msg.set(ask('web_zmena_ok',the_pobyt.get,0));
  msg;
  [ confirm(msg,"<br>Beru přihlášku a vzniklé změny na vědomí.");
    msg.set(ask('web_zmena_ok',the_pobyt.get,1));
    refresh_ucast(the_pobyt.get) 
  ]
| alert("Účast ",the_pobyt.get,
      " nevznikla online přihláškou nebo tato byla již vzata na vědomí - více info ve změnách.")            
}
# --------------------------------------------------------------------------==> . změny rozměru okna

const min_h=550           // minimální výška (nelze jednoduše měnit - jsou k ní vztaženy souřadnice v use)
var   curr_h=0            // výška nad základní výšku
var   curr_w=0            // 1024 nebo 1280

proc onfirstloaded() {    // zavolá se po prvním dokončení u.b.browse_load
  w_change_all
}
//proc onresize(w,h) { // echo('ucast2 onresize(',w,',',h,')');
//  [ and(lt(h,min_h.get),not(eq(curr_h.get,min_h.get)));
//    curr_h.set(0); h_change_all
//  | and(gt(h,min_h.get),not(eq(h,sum(curr_h.get,min_h.get))));
//    curr_h.set(minus(h,min_h.get)); h_change_all ];
//  [ and(lt(w,1280),eq(curr_w.get,1280)); narrow
//  | and(gt(w,1279),eq(curr_w.get,1024)); wide ];
//}
func onresize(w,h) { 
  if (virgin) return;
  if (h<min_h && curr_h!=min_h) {
    curr_h= 0; h_change_all()
  }
  elseif (h>min_h && h!=curr_h+min_h) {
    curr_h= h-min_h; h_change_all();
  }
  if (w<1280 && curr_w==1280) 
    narrow()
  elseif (w>=1280 && curr_w==1024)
    wide();
}

# změna šířky 1024/1280
proc narrow() { curr_w.set(1024); w_change_all }
proc wide()   { curr_w.set(1280); w_change_all }
proc w_change_all() { var dite_kat_pipe:object, dite_kat_options:object
  // pro CR|MS necháme ms_akce_dita_kat
  eq(my_org.get,4,8,16)
  // podle YS/FA zvol kategorii dětí: ys_akce_dite_kat / fa_akce_dite_kat v options, map_pipe
| dite_kat_options.set(cconc(
      eq(the_org.get,1),'#.ys_akce_dite_kat.hodnota',eq(the_org.get,2),'#.fa_akce_dite_kat.hodnota',''));
  dite_kat_pipe.set(cconc(
      eq(the_org.get,1),'#.ys_akce_dite_kat.zkratka',eq(the_org.get,2),'#.fa_akce_dite_kat.zkratka',''));
  dite_kat_options;
  [ eq(the_soubeh.get,0,1);       // jen pro Kurs
    evid.c_change(cconc(eq(curr_w.get,1024),1,2));
    foreach(array(
        page.frame,evid.frame,pla.frame,act0.frame,alb0.frame,docu.frame),
      change_width);
    sp1.s_dite_kat.set_attrib('options',dite_kat_options);
    sp2.s_dite_kat.set_attrib('options',dite_kat_options);
    u2.b.kat.set_attrib('map_pipe',dite_kat_pipe);
  ];
| error('POZOR: není možné stanovit dětské kategorie')
}
proc change_width(x) { x.property(object('widen',cconc(eq(curr_w.get,1024),-250,0))) }

# změna výšky oproti základní min_h
proc h_change_all() {
  foreach(array(cmd,cmdp),change_top1);
  foreach(array(sp1,sp2,pob),change_top2);
  foreach(array(
      evid.frame,pla.frame,act0.frame,alb0.frame,docu.frame,
      pla.duvod_text,pla.navrh,pla.duvod_typ,pla.doslo,pla.uhrady_lst,
      docu.drop),
    change_height);
  change_top3;
  h_change_b;
}
# změna počtu řádků browse u.b oproti aktuálním řádkům
proc h_change_b() { var r:number, h:number
  h.set(sys('screen','height'));
  r.set(divide(sum(h.get,-190),17));
  not(eq(r,u.b.rows));
  u.b.set_attrib('rows',r);
  u2.b.set_attrib('rows',r);
  act1.akc.set_attrib('rows',sum(r,-6));
  act2.akc.set_attrib('rows',sum(r,-6));
}

proc change_top1(x) { x.property(object('down',curr_h.get))}
proc change_top2(x) { x.property(object('down',minus(curr_h.get,223)))}
proc change_top3() {
  pla.property(object('down',curr_h.get),'b');
  alb.property(object('down',curr_h.get),'b')}
proc change_height(x) { x.property(object('stretch',curr_h.get))}//,'smooth',1)) }

proc akce_load(id_akce) { lst.akce_work(id_akce); onfocus(); }

# zobrazí dočasně jinou akci s tlačítkem ZPĚT  (jen z podzáložky Aktivita)
proc akce_show(xakce,xpobyt,xnadpis,xback) { var idp:number
  page.page_start;
  [ u.b.browse_count; idp.set(u.b.key_pobyt) ];
  back.set(object('ida',the_duakce.get,'idp',idp,'tit',the_title.get,'bck',xback));
  header.zpet.display(1);
  panel.focus(1); // bez vyvolání onfocus
  the_duakce.set(xakce);
  header.fill(conc('<i>',xback,': ',xnadpis,'</i>'));
  reload(xpobyt);
  [ u.b.browse_count; page.evd.onclick ];
}
proc akce_back() {
  the_duakce.set(back.get('ida'));
  the_title.set(back.get('tit')); header.fill(the_title.get);
  reload(back.get('idp'));
  switch(back.get('bck'),
  'AKTIVITA',{ page.jin.onclick },
  'EVIDENCE',{ evi.focus(1) });
}

# -----------------------------------------------------------------------------------==> USE
# 1. zobrazení normální nebo hlavní akce
use header:form _header   [  4,  0,,]
use u:     form _ucast    [  6, 20,,]  { tag:'akce1' }               // seznam účastníků
# záložka evidence
use evid:  form _evidence [400, 10,,]      { tag:'akce1', format:'n' }
use pob:   form _pobyt    [404,590,,] { tag:'akce1', format:'n' } // pro min_h=550, min_h+40=590
use os1:   form _osoba2x [772,30,,] { tag:'akce1', format:'n', par:°{onchanged:'first_only'}
  proc on_click() { evid.z_change('o') }
  proc onchanged() { evid.d_change }
  proc elim_kopie() { elim_kopie_osob(form) }
  proc see_new_osoba() { cmd.see_new_osoba }
  proc see_old_osoba() { cmd.see_old_osoba() }
}
use os2:   form _osoba2x [1023,30,,] {tag:'2,akce1', format:'n', par:°{onchanged:'first_only'}
  proc on_click() { evid.z_change('o') }
  proc onchanged() { evid.d_change }
  proc elim_kopie() { elim_kopie_osob(form) }
}
use rod:   form _rodina2  [404,30,,]       { tag:'akce1', format:'n',  }
use sp1:   form _spolu  [772,min_h-185,,]  { tag:'akce1',   format:'n' }
use sp2:   form _spolu  [1023,min_h-185,,] { tag:'2,akce1', format:'n' }

use cmd:   form _cmd      [400,min_h-120,,]  { tag:'akce1', format:'n' }
use alb:   form foto._alb [410, 32,,]  { tag:'akce0', format:'n' }
use alb0:  form _aktivity0 [400, 10,,]  { tag:'akce0', format:'n' }
# záložka plateb
use pla:   form _platba   [400, 10,,]  { tag:'akce0', format:'n' }
use cmdp:  form _cmd_p    [400,min_h-120,,]  { tag:'akce0', format:'n' }
# záložka aktivity
use act1:  form _aktivity [420, 10,,]  { tag:'akce0', format:'n' }
use act2:  form _aktivity [700, 10,,]  { tag:'akce0', format:'n' }
use act0:  form _aktivity0 [400, 10,,]  { tag:'akce0', format:'n' }
# záložka dokumenty
use docu:  form _documents [400, 10,,]  { tag:'akce0', format:'n' }
# 2. zobrazení dětí
use u2:    form _ucast2  [   6, 20,,]  { tag:'akce2', format:'n' }   // seznam dětí
use page:  form _page     [400, 10,,]  { tag:'akce1' }

proc elim_kopie_osob(os) { var zmena:number, ido:number, idos:text
  { idos.set(os.part('keys_osoba').get);
    ido.set(os.part('key_osoba').get);
    idos;
    spinner(1); zmena.set(elim.osoby_lst(ido,idos)); spinner(0);
//    echo("elim.osoby_lst(",ido,",",idos,")=",zmena);
    refresh_ucast(the_pobyt.get);
    jump(ido)
  | warning("nebyla nalezena podezřelá kopie") }
}

proc refresh_ucast(idp) {
  [ u.b.browse_row; u.b.raise('onrowclick',idp) ];
}

proc page_clear() {
  evid.Plain;
  rod.nerodina.Init;
  evid.Init;
}
# --------------------------------------------------==> . reload
proc reload(id_pobyt) { var filtr:text, id_pobyt0:number
  spinner(1); //echo("ucast.reload start");
  cmd.b_display(1);
  the_duakce.get;
  [ u.b.browse_count; id_pobyt0.set(u.b.key_pobyt.get) | id_pobyt0.set(0) ];
  lst.the_akce.load(the_duakce.get);
  page_clear;
  filtr.set(1);
  // vytvoř filtr z polí: lid (0,1,2), tym (3,4,5,6,7,8,12), non (9,10,13,14)
  filtr.set(cconc(
    1," ( 0",
    u.lid.get," OR p.funkce IN (0,1,2)",
    u.tym.get," OR p.funkce IN (3,4,5,6,7,8,12)",
    u.non.get," OR p.funkce IN (9,10,13,14)",
    1," ) "
  ));
//  [ u.lid.get; u.tym.get
//  | u.lid.get; filtr.set("p.funkce IN (0,1,2)")
//  | u.tym.get; filtr.set("p.funkce NOT IN (0,1,2)") ];
  // vynucení výpočtu duplicit a příznaku dokumentů
  [ u.sf.get;  filtr.set(conc('/*css*/',filtr)) ];
  [ u.dup.get; filtr.set(conc('/*duplicity*/',filtr)) ];
  [ u.doc.get; filtr.set(conc('/*dokumenty*/',filtr)) ];
  [ echo("browse_load"); 
//    set_trace('f',1);
    u.b.browse_load(conc(filtr," /*AND funkce!=99*/ AND p.id_akce=",the_duakce.get),
      "IF(funkce<=2,1,funkce),_nazev",
      '',0,0,1/*1=quiet*/,
      conc('SET @akce:=',the_duakce.get,
              ",@soubeh:=",the_soubeh.get,
              ",@access:=",my_access.get,
              ",@app:='",sys('ezer','options','app'),"'"));
//    set_trace('f',0);
    u.b.browse_focus;
    [ id_pobyt; id_pobyt0.set(id_pobyt) ];
    { id_pobyt0; { u.b.raise('onrowclick',id_pobyt0)
                 | u.b.browse_seek(conc('p.id_pobyt=',id_pobyt0)) }
    | u.b.raise('onrowclick') }
  | // žádný pobyt
    cmd.set_state('none');
  ];
  spinner(0); //echo("ucast.reload end");
}
# --------------------------------------------------==> . jump
# skok na jiného účastníka akce
proc jump(ido) { var idp:number
  idp.set(ask('akce2_ido2idp',ido,the_duakce.get)); idp;
  u.b.raise('onrowclick',idp);
  rod.cleni.raise('onrowclick',ido);
}
# --------------------------------------------------==> . neni_ulozeno
# ochrana proti neuložení změny
func neni_ulozeno() { var no: number
  no= !evid.Same();
  if (no) { //echo('neni_ulozeno!');
    warning(`neuložené změny pro pobyt <b>${u.b._nazev}</b> použij [Zpět] nebo [Uložit]`);
    u.b.browse_active(u.old_row);
  }
  return(no)
}
proc neni_ulozen_clen() { var no: number
  no.set(not(and(os1.same,sp1.same,sp2.same,os2.same)));
  [ no; //echo('neni_ulozeno!');
    warning('neuložené změny pro osobu použij [Zpět] nebo [Uložit]') ];
  return(no)
}
# --------------------------------------------------==> . clear_zmeny
# obsluha označení změněných polí
proc clear_zmeny(tables) {
  zmeny.set(0);
}
# --------------------------------------------------==> . zámky
func ucast_lock_on(_table,_id) { var lock:object, msg:text
  lock= php.table_lock('on',_table,_id); 
  if (!lock.ok) {
    alert(lock.info);
    cmd.zpet.Click(); 
  }
  echo(lock.note);
}
# ========================================================================================= ovládání
# -----------------------------------------------------------------------------------------==> CMD
# ovládání
form _cmd [,,623,30] {
  # 'rodiny', 'osoby' znamená hledání mezi rodinami resp. osobami s tagem 'r' resp. 'o'
  var mode=''           // novy_clen | novy_pobyt | novy_singl | '' | rodiny | osoby
  proc set_state(_mode) { switch(_mode,
    'new', {form.enable(1,'z'); form.enable(0,'x'); form_mode.set('new')}, // blok umístění role
    'edit',{form.enable(1,'s'); form.enable(0,'x')},
    'none',{form.enable(0,'s|r|x'); form.enable(1,'n')},
    'show',{form.enable(0,'s'); form.enable(1,'x'); form_mode.set('show')}
  )}
  label [136,0,481,30] { tag:'x', css:'ae_work', style:"z-index:1;border:1px solid #f5f5f5;box-shadow: 2px 2px 10px #333" }
  //==> .. [zpět]
  label  [0,0,121,30] { tag:'r', css:'ae_parm search', skill:'yaa;faa;caa', style:"box-shadow:2px 2px 10px #333" }
  proc _reload(renew,ido) { // renew=0 vrácení původních dat a zhasnutí warningu, jinak znovunačtení
    set_state('show');
    evid.Plain;
    sp1.enable(1,'.*');
    os2.enable(1,'.*'); sp2.enable(1,'.*');
    pob.enable(1,'.*'); rod.enable(1,'.*');
    rod.cleni.enable(1);
    [ renew; reload(the_pobyt.get) | warning; u.b.browse_count; u.b.load_zalozka | evid.Init; ];
    [ ido; rod.cleni.raise('onrowclick',ido) ];
    mode.set('');
  }
  button zpet [7,6,,] { /*tag:'s,z,r',*/ title:'[fa-undo] Zpět',help:'Neměnit změněná data',css:'search'
    proc onclick() { Click }
    func Click() {
      // uvolni záznamy
      php.table_lock('off','rodina',rod.key_rodina);
      php.table_lock('off','pobyt',pob.key());
      php.table_lock('off','osoba',os1.key());
      php.table_lock('off','osoba',os2.key());
      // navrať zobrazení
      if (mode=='novy_pobyt') { rod.rodiny0.rod_end(); _reload(the_pobyt,0) }
      elseif (mode=='rodiny') { rod.rodiny0.rod_end(); _reload(the_pobyt,0) }
      elseif (mode=='osoby') { os1.see.see_end(); _reload(the_pobyt,0) }
      elseif (mode=='novy_singl') { _reload(0,0) }
//      elseif (rod.cleni.browse_count()) { _reload(0,rod.cleni.key_osoba) }
      else { _reload(1,0) }
  } }
  //==> .. [uložit]
  button [60,6,,] { tag:'s,r', title:'[fa-save] Uložit',help:'Uložit změněná data',css:'search'
                skill:'yaa|yaa+;faa|faa+;caa|caa+'
    proc onclick() { ulozit } }
  # ----------------------------------------------- přidat pobyt
  label [145,3,44,] { title:"<b>Přidat <br>pobyt:</b>" }
  #==> . + rodina
  button [188,5,,] {tag:'x,n', title:'[fa-heart] rodina',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Přidání celé rodiny'
    proc onclick() {
      set_state('new'); mode.set('rodiny'); pob.new_pobyt;
      os1.clear_osoba; os2.clear_osoba;
      rod.rodiny0.Init;
      rod.cleni.show_dup(1);
      rod.new_rodina('');
  }}
  #==> . + skupina
  button [256,5,,] {tag:'x,n', title:'[fa-heart] jednotlivci',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Přidání skupiny osob'
    proc onclick() {
      rod.nerodina.Init; pob.new_pobyt;
      rod.cleni.show_dup(1);
      rod.hide_rodina;
      pridat_osobu.Init
  }}
  # ----------------------------------------------- změnit
  label [347,3,44,] { title:"<b>Změny <br>pobytu:</b>" }
  #==> . - pobyt
  button [395,5,,] {tag:'x', title:'[fa-plug fa-rotate-180 fa-red] zruš',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vyřazení účastníka nebo páru z účasti na akci'
    func onclick() {
      if (!neni_ulozeno() && confirm(
          `Opravdu vyřadit ${u.b._nazev} ${u.b._jmena?conc('(',u.b._jmena,')'):''} z této akce?`)) { 
        spolu.delete_record(`id_pobyt=${u.b.key_pobyt}`,9999);
        pobyt.delete_record(`id_pobyt=${u.b.key_pobyt}`);
        reload(0);
      }
  } }
  #==> . + osoba
  label [452,3,44,] { title:"<b>Osobu <br>rodině:</b>" }
  button pridat_osobu [497,5,,] {tag:'x', title:'[fa-heart-o] přidej',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Přidání nové nebo již existující osoby k pobytu (případně do rodiny)'
    proc onclick() { Init }
    proc Init() { var _prijmeni:text
      set_state('new'); mode.set('osoby');
      os1.clear_osoba; os2.clear_osoba;
      [ _prijmeni.set(''); rod.cleni.browse_count; _prijmeni.set(rod.cleni.prijmeni.get) ];
      os1.see_osoba(1,_prijmeni,'',rod.key_rodina.get);
      [ rod.key; obligatory(os1.role) ]
  }}
  proc see_new_osoba() { // po rozhodnutí uživatele založit novou osobu
    form.enable(1,'s');
    [ pob.key; rod.key; confirm("patří do rodiny <b>",rod.rodiny.get,"</b> ?");
      mode.set('novy_clen');
      os1.new_osoba(1,os1.prijmeni1.get,os1.jmeno1.get,rod.key); os1.role.set('d');
      os1.access.set(the_org.get);
      foreach(array(os1.prijmeni,os1.jmeno,os1.sex,os1.narozeni,os1.role,os1.access),obligatory); stop
    | os1.new_osoba(0,os1.prijmeni1.get,os1.jmeno1.get,0);
      os1.access.set(the_org.get);
      mode.set('novy_singl');
      foreach(array(os1.prijmeni,os1.jmeno,os1.sex,os1.narozeni,os1.access),obligatory); ];
  }
  proc see_old_osoba() { var ret:object, h:number // po rozhodnutí uživatele přidat nalezenou osobu k pobytu
    // kontrola oprávněnosti - dotazem
    { function('x','y','return x&y;',the_org.get,os1.access.get)        // stejná org jako má akce?
    | confirm("máme od této osoby souhlas?");                           // čestné prohlášení
      os1.access.set(3); os1.access.change
    | zpet.Click; return                                                // nic
    };
    // vlastní vložení se zamezením duplicit a s definicí kategorie pro děti
    [ or(not(rod.key),os1.role.get) 
    | // doplnění chybějící role v rodině
      os1.role.set(choose("Doplň jakou roli má nová osoba v rodině","dítě:d,manžel:a,manželka:b,pomoc:p"))
    ];
    h.set(0);
    [ the_hnizda.get; h.set(header.hnizdo.key) ]; 
    ret.set(ask('ucast2_pridej_osobu',
      os1.key,os1.access.get,the_duakce.get,pob.key,rod.key,os1.role.get,h));
    { ret.msg; alert(ret.msg)
    | the_pobyt.set(ret.pobyt);
      _reload(1,os1.key);
    }
  }
  button zrušit_osobu [561,5,,] {tag:'x', title:'[fa-times fa-red] zruš',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Vymazání osoby z databáze'
    proc onclick() { var ret:object
      ret.set(ask('evid2_delete',rod.cleni.key_osoba.get,rod.key,'conf_oso'));
      { eq(ret.ok,1);                           // osobu lze smazat
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',rod.cleni.key_osoba.get,rod.key,'del_oso'));
          warning(ret.html);
          _reload(the_pobyt.get,0);
        ]
      | eq(ret.ok,2);                           // nutno (a lze) smazat i s rodinou
        [ confirm(ret.html);
          ret.set(ask('evid2_delete',rod.cleni.key_osoba.get,rod.key,'del_rod'));
          warning(ret.html);
          _reload(the_pobyt.get,0);
        ]
      | alert(ret.html) }                       // nastal problém
  } }
  // procedury
  proc b_display(on) {
    u.b.enable(on);
  }
  # --------------------------------------------==> uložit/vytvořit
  func ulozit() { var ok:number, idr:number, ido:number, ret:object
    // uložení změn
    if (mode=='novy_singl') {
      # ---------------------==> . new singl
      // osoba a spolu
      os1.kontakt.change(); os1.adresa.change(); // singl má jen osobní údaje
      ido= os1.insert();
      sp1.key_spolu= the_pobyt; sp1.key_spolu.change();
      sp1.key_osoba= ido; sp1.key_osoba.change();
      ret= php.ucast2_pridej_osobu(os1.key(),os1.access,the_duakce,pob.key(),rod.key(),os1.role);
      the_pobyt= ret.pobyt;
      _reload(1,ido)
    }
    elseif (mode=='novy_clen') {
      # ---------------------==> . new člen
      if (!os1.same()) {
        ido= os1.insert();
        tvori.insert_record({id_osoba:ido,id_rodina:rod.key_rodina,role:os1.role});
        // možná přidáme do pobytu
        if (confirm("Rovnou přidat na akci?"))
          sp1.pridat.na_akci(ido,rod.key_rodina,os1.role);
      }
      _reload(1,ido)
    }
    elseif (mode=='novy_pobyt') {
      rod.rodiny0.rod_end();
      # ---------------------==> . new pobyt,rodina
      // kontrola dostatečnosti údajů
      if (!rod.rodiny0) { alert("Pozor: název rodiny je povinný"); return }
      // rodina
      if (rod.same()) idr= 0; else { idr= rod.insert(); rod.plain() };
      // pobyt
      pob.key_akce= the_duakce; pob.key_akce.change();
      if (idr) { pob.i0_rodina= idr; pob.i0_rodina.change(); }
      the_pobyt= pob.insert();
      _reload(1,ido)
    }
    elseif (the_pobyt) {
      # ---------------------==> ... oprava
      if (!rod.same()) {
        rod.r.key(rod.key_rodina); rod.r.save(); php.table_lock('off','rodina',rod.r.key());
        if (rod.cleni.browse_count()) {
          rod.t_role.changed();
          php.akce2_save_role(rod.cleni.key_tvori,rod.t_role)
        }
      }
      if (!pob.same()) { pob.save(); php.table_lock('off','pobyt',pob.key()); }
      if (!os1.same()) { os1.key(); os1.save_osoba(); php.table_lock('off','osoba',os1.key()) };
      if (!os2.same()) { os2.key(); os2.save_osoba(); php.table_lock('off','osoba',os2.key()) };
      if (!sp1.same() && sp1.key()) sp1.save();
      if (!sp2.same() && sp2.key()) sp2.save();
      _reload(1,rod.cleni.browse_count() ? rod.cleni.key_osoba : 0);
    }
    else error("Uložit co?")
  }
  
//  proc ulozit() { var ok:number, idr:number, ido:number, war:text, ret:object
//    war.set('');
//    // uložení změn
//    eq(mode.get,'novy_singl');
//    # ---------------------==> . new singl
//    // osoba a spolu
//    os1.kontakt.change; os1.adresa.change; // singl má jen osobní údaje
//    ido.set(os1.insert);
//    sp1.key_spolu.set(the_pobyt.get); sp1.key_spolu.change;
//    sp1.key_osoba.set(ido); sp1.key_osoba.change;
//    ret.set(ask('ucast2_pridej_osobu',
//      os1.key,os1.access.get,the_duakce.get,pob.key,rod.key,os1.role.get));
//    the_pobyt.set(ret.pobyt);
//    _reload(1,ido)
//  | eq(mode.get,'novy_clen');
//    # ---------------------==> . new člen
//    [ os1.same
//    | ido.set(os1.insert);
//      tvori.insert_record(object('id_osoba',ido,'id_rodina',rod.key_rodina.get,
//        'role',os1.role.get));
//      // možná přidáme do pobytu
//      confirm("Rovnou přidat na akci?");
//      sp1.pridat.na_akci(ido,rod.key_rodina.get,os1.role.get);
//    ];
//    _reload(1,ido)
//  | eq(mode.get,'novy_pobyt');
//    rod.rodiny0.rod_end;
//    # ---------------------==> . new pobyt,rodina
//    // 1.osoba a rodina - kontrola dostatečnosti údajů
//    [ rod.rodiny0.get  | war.set(conc(war,' název rodiny, ')) ];
//    [ war; alert("Pozor: název rodiny je povinný"); return ];
//    // rodina
//    [ rod.same; idr.set(0) | idr.set(rod.insert); rod.plain ];
//    // pobyt
//    pob.key_akce.set(the_duakce.get); pob.key_akce.change;
//    [ idr; pob.i0_rodina.set(idr); pob.i0_rodina.change ];
//    the_pobyt.set(pob.insert);
//    _reload(1,ido)
//  | the_pobyt.get;
//    # ---------------------==> ... oprava
//    [ rod.same
//    | rod.r.key(rod.key_rodina.get); [ rod.r.save ]; ask('table_lock','off','rodina',rod.r.key);
//      rod.t_role.changed;
//      ask('akce2_save_role',rod.cleni.key_tvori.get,rod.t_role.get) ];
//    [ pob.same | pob.save; ask('table_lock','off','pobyt',pob.key) ];
//    [ os1.same | os1.key; os1.save_osoba; ask('table_lock','off','osoba',os1.key) ];
//    [ os2.same | os2.key; os2.save_osoba; ask('table_lock','off','osoba',os2.key) ];
//    [ sp1.same
//    | sp1.key;
//      // pokud byl chůvou nebo chovaným dítětem, je třeba ošetřit vazbu
//      [ eq(sp1.s_role.key,3,5);          ];
//      sp1.save; ];
//    [ sp2.same | sp2.key; sp2.save; ];
//    [ rod.cleni.browse_count; _reload(1,rod.cleni.key_osoba.get) | _reload(1,0) ]
//  | error("Uložit co?")
//  }
}
# ==========================================================================================> SEZNAM
# --------------------------------------------------------------------------------------- _header
form _header [,,380,50] {
  proc fill(x) {
    head.set(conc("<div class='karta'>",x,"</div>"))
  }
  label head [0,2,*,50]  { title:'' }
  select hnizdo [-49,7,80,] { format:'t' type:'map' options:ms_akce_hnizda_plus.nazev
    func onchanged() {
      if (this.key()==99) // všichni=default
        u.b.init_queries(1)
      elseif (this.key()==0) // nezařazení
        u.b.xhnizdo.set_query(1,'?',1)
      else 
        u.b.xhnizdo.set_query(1,substr(this,0,1),1)
  }}
  button zpet [-2,6,,] { title:'Zpět', help:'Navrátí zobrazení účastníků původní akce', format:'n',
    style:"z-index:5"
    proc onclick() { this.display(0); akce_back }
  }
  var soubeh_id:number
  button soubeh [-2,6,,] { title:'H/S', help:'Přepínač hlavní/souběžná akce', format:'n'
    proc onclick() {
      switch(the_soubeh.get,    // 1 - kurz, 2 - děti
      1,{ panel.display(1,'akce2'); panel.display(0,'akce1');
          soubeh_id.set(ask('select1','id_duakce','akce',conc('id_hlavni=',the_duakce.get)));
          akce_load(soubeh_id.get)},
      2,{ panel.display(2,'akce1');
          soubeh_id.set(ask('select1','id_hlavni','akce',conc('id_duakce=',the_duakce.get)));
          akce_load(soubeh_id.get)}
      )
  }}
}
# -----------------------------------------------------------------------------==> u/_ucast - pobyty
form _ucast [,,400,] { css:'ds_form', style:'height:fit-content'
  // legenda
  const NESTANOVENA = "<span class='blue' title:'dosud neurčená cena'> chybí </span>"
  const DLUZNIK =     " <span class='yellow' title:'dosud neuhrazená cena'> dluh </span>"
  var old_row= 0
  proc legenda(cenik,cena) {
    cenik; leg.set(conc("CENÍK: &nbsp; ",DLUZNIK.get," &nbsp;&nbsp; ",NESTANOVENA.get))
  | cena; leg.set(conc("CENA &nbsp; ",DLUZNIK.get))
  | leg.set('')
  }
  label leg [2,12,232,11]
  // omezení browse
  proc show_dup(on) { rod.cleni.show_dup(on); b.show_dup(on); }
  proc show_chain() {
    rod.chain.display(dup.get); os1.chain.display(dup.get); os2.chain.display(dup.get);
  }
  check sf [108,7,15,15] { title:'', format:'nt', value:'1', proc onchange() {
  }}
  check dup [150,7,63,15] { title:'kopie?', help:'zobrazit tipy na kopie osob a rodin',
    format:'t', value:'0', proc onchange() { show_chain }
  }
  check doc [202,7,75,15] { title:'doc', help:'zobrazit příznaky existence dokumentů a fotek'
    format:'t', value:'0', proc onchange() {
    reload(0)
  }}
  check lid [238,7,65,15] { title:'účastníci', format:'t', value:'1', 
    help:'zobrazit -, VPS, SVPS'
    proc onchange() { reload(0) }}
  check tym [304,7,43,15] { title:'tým', format:'t', value:'1', 
    help:'zobrazit kněz, psycholog, hospodář, zvuk, host, zdravotník, lektor'
    proc onchange() { reload(0) }}
  check non [344,7,63,15] { title:'není', format:'t', value:'1', 
    help:'zobrazit přihláška, náhradník, nepřijel, odhlášen'
    proc onchange() { reload(0) }}
  // seznam účastníků
  browse b [0,26,,] {buf_rows:200, rows:21, qry_rows:1, key_id:'key_pobyt',
    optimize:°{ask:'ucast2_browse_ask'}, //css_rows:"dluh,1:yellow,2:blue"
    // klíče
    show key_pobyt
    show _empty         // 1 pokud je rodina na pobytu prázdná
    show key_akce
    show key_spolu
    show key_osoba
    show key_rodina
    show keys_rodina // [,,50,] {format:'t'}  // seznam duplicitních rodin
    // akce
    show dnu
    show datum_od
    // zobrazení
    show _nazev [,,100,] { title:'příjmení', format:'s+q*'
      css_cell:'p_access_web,0:,1:ezer_ys,2:ezer_fa,3:ezer_db,17:ezer_ys ezer_web,18:ezer_fa ezer_web,19:ezer_db ezer_web' }
    # varianta A plná jména
    show _jmena [,,190,] { title:'jméno/a', format:'tsq%' 
      css_cell:'web_changes,0:,1:ezer_web1,2:ezer_web2' }
    # varianta B na úkor _jmena
    show _docs   [,,0,] { title:'dokumenty', format:"tsq", css_cell:'_dupl,0:,1:ezer_db',
      help:'d pokud má dokumenty, F/f pokud jsou fotky, popis možných kopií'
    }
    show _dupl  // 1 pokud jsou duplicity
    show c_suma  [,,0,] { title:'cena', format:"rsq=", css_cell:"dluh,1:yellow,2:blue" }
    show vratka  [,,0,] { title:'vratka', format:"rsq=", css_cell:"dluh,1:yellow,2:blue"  }
    show platba  [,,0,] { title:'platba', format:"rsq=", css_cell:"dluh,1:yellow,2:blue"  }
    show budova  [,,0,] { title:'budova', format:"rsq=" }
    show pokoj   [,,0,] { title:'pokoj', format:"rsq=" }
    show potvrzeno
    # varianta C na úkor _jmena
    show x_ms    [,,0,] { title:'lk;', format:'rq=s:e', help:'počet účastí páru na LK MS (včetně tohoto)' }
    show x_umi   [,,0,] { title:'umí', format:'sq*', help:'seznam schopností rodiny a jejích členů' }
    # je vždy vidět
    show xfunkce [,,40,] { title:'fce', format:'rq#s', map_pipe:ms_akce_funkce.zkratka,
      help:'funkce na akci', css_cell:""} // nastavuje se v panel.onfocus pro LK a obnovy
    show skupina [,,20,] { title:'sk.', format:'rq=s:e', help:'číslo skupinky'}
    show xhnizdo [,,20,] { title:'h.', format:'rq#s:e', map_pipe:ms_akce_hnizda.zkratka, 
      help:'pořadí hnízda nebo 0' css_cell:"hnizdo,0:,1:oranzovy,2:zluty,3:zeleny,4:modry,5:azurovy,6:fialovy"}
    // barvení
    show dluh, show web_changes, show _ms
    show r_access 
    show p_access_web // pobyt.access + 16 pokud došlo ke změně přes web (pobyt, rodina, spolu, osoba)
    show r_access_web // access + 16 pokud došlo ke změně přes web (rodina)
    // údaje rod
    show r_spz, show r_svatba, show r_datsvatba, show r_rozvod,
    show r_ulice, show r_psc, show r_obec, show r_stat, show r_geo_ok,
    show r_telefony, show r_emaily, show r_ms, show r_umi, show fotka, show r_note
    // údaje rod.cleni
    show r_cleni // naplní browse pro rodinu daty jejích členů
    // údaje pob
    show p_poznamka, show p_pracovni, show funkce, show hnizdo, 
    show prednasi, show skup,
    // platby
    show luzka, show pristylky, show kocarek, show pocetdnu,
    show strava_cel, show strava_cel_bm, show strava_cel_bl,
    show strava_pol, show strava_pol_bm, show strava_pol_bl,
    show c_nocleh, show c_strava, show c_program, show c_sleva, 
    show v_nocleh, show v_strava, show v_program, show v_sleva, show datplatby,
    show cstrava_cel, show cstrava_cel_bm, show cstrava_cel_bl,
    show cstrava_pol, show cstrava_pol_bm, show cstrava_pol_bl,
    show svp, show zpusobplat, show naklad_d, show poplatek_d,
    show platba_d, show potvrzeno_d, show zpusobplat_d, show datplatby_d, show ubytovani, 
    show cd, show avizo, show sleva, show vzorec, show duvod_typ, show duvod_text,
    // klíč první a druhé osoby na akci
    show ido1, show ido2
    // změna
    func load_zalozka { // ==> . load_zalozka
      switch (zalozka) {
      case 'evid':
        pob.id= key_pobyt;
        page.evd.last= key_pobyt;
        pob.key(the_pobyt);
        if (r_cleni) {
          rod.cleni.browse_fill(r_cleni,'~');
          pob.skup.browse_fill(skup,'~');
          if (pob.skup.browse_count())
            pob.skup.raise('onrowclick',key_pobyt,0,0,1);
          os1.key_osoba= ido1;
          os2.key_osoba= ido2;
        }
        else {         
          os1.key(0); os2.key(0);
        }
        reload_evid();
        break;
      case 'plat':
        pla.key(key_pobyt); pla.nove(); copy_by_name(b,pla); pla.ini();
        pla.uhrady_load();
        page.plt.last= key_pobyt;
        break;
      case 'akce':
        act1.ucasti(ido1); act2.ucasti(ido2);
        page.jin.last= key_pobyt;
        break;
      case 'foto':
        if (key_rodina) 
          alb.galery('rodina',key_rodina)
        elseif (ido1) 
          alb.galery('osoba',ido1);
        page.fot.last= key_pobyt;
        break;
      case 'docu':
        docu.ukaz();
        break;
      }
      // označ nedávno změněné hodnoty, chce-li se to
      if (zmeny) {
        js.set_css_changed(array(
            array(rod.get,'rodina',rod.key_rodina),
            array(pob.get,'pobyt',u.b.key_pobyt),
            array(os1.get,'osoba',os1.key_osoba),
            array(sp1.get,'spolu',sp1.key_spolu),
            array(os2.get,'osoba',os2.key_osoba),
            array(sp2.get,'spolu',sp2.key_spolu)
          ),
          'zmeneny',
          zmeny.chngs);
      }
    }
    proc reload_evid() {  var id2:number, row:number
      pob.skup.display(1);
//      rod.detail.web.enable(0);
      { rod.key; rod.display(1,'r|s'); copy_by_name(b,rod);
        rod.rodiny1.set(_nazev.get);
        rod.display(0,'[abnsy]'); rod.display(1,'[mo]'); rod.enable(1,'[m]');
        rod.rodiny.selects(conc(_nazev.get,':',key_rodina.get)); rod.rodiny.key(key_rodina.get);
//        [ gt(r_access_web.get,15); rod.detail.web.enable(1) ]
      | rod.display(0,'[^f]'); rod.display(1,'y'); rod.enable(0,'y');
      };
      id2.set(os2.key_osoba.get);
      { r_cleni.get;
        os1.enable(1,'.*'); sp1.enable(1,'.*');
        rod.cleni.raise('onrowclick',os1.key_osoba.get);
        row.set(rod.cleni.browse_active);
        [ eq(ucast.evid.cmode.get,2);
          { id2; os2.enable(1,'.*'); sp2.enable(1,'.*');
            rod.cleni.raise('onrowclick',id2.get);
            rod.cleni.browse_active(row)
          | os2.enable(0,'.*'); sp2.enable(0,'.*');
          }
        ]
      | rod.cleni.browse_init;
        os1.enable(0,'.*'); sp1.enable(0,'.*');
        os2.enable(0,'.*'); sp2.enable(0,'.*');
      };
      pob.show_pobyt;
      cmd.enable(0,'s');
      cmd.b_display(1);
    }
    proc onrowclick() { // ==> . onrowclick
      b.browse_count;
      neni_ulozeno // warning
    | b.browse_count;
      page.page_init;
      old_row.set(b.browse_active);
      // přechod na jiný pobyt
      os1.init; os2.init;
      sp1.init; sp2.init;
      rod.key(key_rodina.get);
      rod.key_pobyt.set(key_pobyt.get);
      the_pobyt.set(key_pobyt.get);
      copy_by_name(b,pob);
      load_zalozka
    }
    # ==> . sloupce
    proc show_dup(on) { on;
      _jmena.width(140); _docs.width(49); c_suma.width(0); platba.width(0); x_umi.width(0)
    | _jmena.width(190); _docs.width(0); c_suma.width(0); platba.width(0); x_umi.width(0)
    }
    proc onclick() {
      eq(_docs.width,49); show_dup(0)
    | platba.width; platba.width(0); c_suma.width(0); vratka.width(0); 
      budova.width(35); pokoj.width(35); _docs.width(15); _jmena.width(102)
    | budova.width; budova.width(0); pokoj.width(0); 
      _docs.width(30); x_umi.width(28); x_ms.width(19); _jmena.width(110)
    | x_umi.width; x_umi.width(0); x_ms.width(0); _docs.width(0); _jmena.width(190)
    | platba.width(35); c_suma.width(35); vratka.width(35); _docs.width(0); _jmena.width(82)
    }
    proc onrefreshed() { h_change_b }
    # ------------------------==> . kontextové_menu
    menu { type:'context' //, join:frame
      item { title:'přijetí webových změn', 
        proc onclick () { prijeti_prihlasky } }
      item { title:'zrušit výběr'
        proc onclick () { b.selected('clear') } }
    }
  }
}
# ----------------------------------------------------------------------------==> _ucast2 - jen děti
form _ucast2 [,,400,] { css:'ds_form'
  view p: table pobyt
  view a: table akce   { join:'ON a.id_duakce=p.id_akce' }
  view s: table spolu  { join:'USING(id_pobyt)' }
  view o: table osoba  { join:'ON s.id_osoba=o.id_osoba' }
  view t: table tvori  { join_type:'LEFT', join:'ON t.id_osoba=o.id_osoba' }
  // seznam dětí účastníků hlavní akce
  browse b [0,26,,] {buf_rows:200, rows:21, qry_rows:1
    show key_akce  {data:p.id_akce}
    show key_pobyt {data:p.id_pobyt}
    show key_spolu {data:s.id_spolu}
    show key_osoba {data:o.id_osoba}
    show key_tvori {data:t.id_tvori}
    show prijmeni [,,100,] { title:'příjmení', format:'s+q*', data:o.prijmeni }
    show jmeno    [,,180,] { title:'jméno', format:'tsq*', data:o.jmeno }
    show kat      [,,50,]  { title:'kat', format:'tsq#', data:s.dite_kat, 
        map_pipe:ms_akce_dite_kat.zkratka } 
  }
  proc reload() {
    b.browse_load(conc("p.id_akce=",the_hlavni.get," AND t.role='d'"))
  }
}
# ------------------------------------------------------------------------------------------==> PAGE
form _page  [,,623,20] {
  proc Show(R,P,O,S) { //==> . Show
    [ R.n; rod.display(0) | rod.display(1) ];
    [ P.n; pob.display(0) | pob.display(1) ];
    [ O.n; os1.display(0) | os1.display(1) ];
    [ S.n; sp1.display(0) | sp1.display(1) ];
  }
  # ------------------------==> . záložky
  proc tags(a,on,off) {
    form.set_css('ae_butt_off','ae_butt_on','p');
    a.set_css('ae_butt_on','ae_butt_off');
  }
  proc page_start() {
    zalozka.set('evid'); evd.onclick; tags(evd,'z','h|o|f'); cmdp.display(0); page_init }
  proc page_init() {
    evd.last.set(0); plt.last.set(0); jin.last.set(0); fot.last.set(0); evid.z_change('o') }
  label evd [12,0,105,20] {tag:'p', _sys:'*', title:'<b>Evidenční karta</b>', format:'c', css:'ae_butt_on'
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'z','h|o|f|d');
      zalozka.set('evid');
      [ u.b.browse_count; evid.Display(1); cmd.display(1); cmd.set_state('show')
      | evid.Display(2); cmd.display(1); cmd.set_state('none') ];
      pla.display(0); cmdp.display(0);
      alb0.display(0); alb.display(0); docu.display(0);
      act0.display(0); act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get)
      | last.set(the_pobyt.get);
        u.b.browse_count; u.b.load_zalozka;  ];
    }
  }
  label plt [137,0,105,20] {tag:'p', _sys:'*', title:'<b>Platba za akci</b>', format:'c',
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'h','z|o|f|d');
      zalozka.set('plat');
      evid.Display(0); cmd.display(0);
      pla.display(1); cmdp.display(1);
      alb0.display(0); alb.display(0); docu.display(0);
      pla.get.display(gt(the_cenik.get,0),'cenik'); // omezení výpisu pokud není definován ceník
      pla.display(eq(the_soubeh.get,1),'deti'); // platby za děti
      act0.display(0); act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  label jin [263,0,106,20] {tag:'p', _sys:'*', title:'<b>Přehled aktivit</b>', format:'c',
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'o','z|h|f|d');
      zalozka.set('akce');
      evid.Display(0); cmd.display(0);
      pla.display(0); cmdp.display(0);
      alb0.display(0); alb.display(0); docu.display(0);
      act0.display(1); act1.display(1); act2.display(1);
      [ eq(rod.cleni.key_osoba.get,act1.ido,act2.ido)
      | act1.ucasti(rod.cleni.key_osoba.get); act2.ucasti(0)
      ]
    }
  }
  label fot [390,0,63,20] {tag:'p', _sys:'*', title:'<b>Fotky</b>', format:'c', /*skill:'a'*/
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'f','o|z|h|d');
      zalozka.set('foto');
      evid.Display(0); cmd.display(0);
      pla.display(0); cmdp.display(0);
      alb0.display(1); alb.display(1); docu.display(0);
      act0.display(0); act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  label doc [475,0,80,20] {tag:'p', _sys:'*', title:'<b>Dokumenty</b>', format:'c', /*skill:'a'*/
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | has_skill('yaa:c;faa:c;caa:c'); 
      tags(this,'d','o|z|h|f');
      zalozka.set('docu');
      evid.Display(0); cmd.display(0);
      pla.display(0); cmdp.display(0);
      alb0.display(0); alb.display(0); docu.display(1);
      act0.display(0); act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  # ------------------------==> . manuální úprava šíře
  button wider [589,9,,] {type:'html', title:'[fa-toggle-right]', style:'z-index:5;margin-top:-16px'
    proc onclick() { eq(evid.cmode.get,2); ucast.narrow | ucast.wide } }
//  label pframe [0,16,873,min_h-185] { css:'ae_work'} 
  label frame [0,16,873,7] { css:'ae_work'} 
}
# --------------------------------------------------------------------------------------==> EVIDENCE
form _evidence [,,623,] { style:'height:fit-content'
  var cmode=0          // sloupce osob: 1=jeden, 2=dva
  var rmode=0          // bloky osob: iae-iep-
  var zmode: text      // o | p
  var back: text       // pozadí pro 2/3 sloupce
  label frame [0,16,873,min_h-152] { css:'ae_work'}
  # ------------------------==> . kontextové_menu
  menu ctx { type:'context', join:frame
    item { title:'všem navrhnout cenu', skill:'yaa+',
      func onclick () { 
        if (confirm(`POZOR!<br>platby a věkové kategorie dětí <b style='color:red'>budou přepsány</b> 
           hodnotami odvozenými pouze z věku dětí (změny budou zobrazeny pro kontrolu a případné vrácení)`
        )) {
          u.b.browse_refresh();
          alert(php.akce2_pobyt_default_vsem(the_duakce));
        }
    }}
    item { title:'-zkontrolovat skupinky', skill:'yaa+;faa+;caa+',
      proc onclick () { alert(ask('akce2_skup_check',the_duakce.get)) } }
    item { title:'[fa-sort-numeric-asc] přečíslovat skupinky podle VPS', skill:'yaa+;caa+',
      proc onclick () { alert(ask('akce2_skup_renum',the_duakce.get)) } }
    item { title:'[fa-sort-numeric-asc] přečíslovat skupinky podle PPS', skill:'faa+',
      proc onclick () { alert(ask('akce2_skup_renum',the_duakce.get)) } }
    item obn { title:'zapsat skupinky podle LK', skill:'faa|faa+;yaa|yaa+;caa|caa+',
      proc onclick () { alert(ask('akce2_skup_copy',the_duakce.get)); reload(0) } }
    item obm { title:'zapsat skupinky podle PO', skill:'faa|faa+;yaa|yaa+;caa|caa+',
      func onclick () { alert(php.akce2_skup_copy(the_duakce,'PO')); reload(0) } }
    item { title:'-navrhnout skupinky chlapů' skill:'a'
      func onclick () { var ret:object
        if (confirm(`Na místě zůstanou jen vedoucí skupinek - ostatní budou znovu rozděleni 
            podle zkušenosti a věku. Pokračovat?`)) {
          ret= php.akce_ucastnici(the_duakce,'design');
          alert(ret.html);
        }
    } }
    item { title:'-obarvit změněné údaje'
      proc onclick () { var ret:object
        hodin_zmeny.set(prompt("zadej stáří obarvených změn v hodinách",72));
        ret.set(ask('akce2_zmeny',the_duakce.get,hodin_zmeny.get));
        not(ret.errs);
        zmeny.set(ret);
      | warning(ret.errs)
    } }
    item { title:'... zrušit obarvení změn' proc onclick () {
    } }
//    item { title:'=m: opravit i0_rodina,pouze', skill:'m'
//      proc onclick () {
//        alert(ask('data2_transform_2014',
//          object('cmd','i0_rodina,pouze','akce',the_duakce.get))) } }
  }
  proc Display(on) {  // 2 = jako 1 ale prázdná akce
    eq(on,2); rod.no_rodina; rod.display(1); pob.display(0);
  | form.display(on); rod.display(on); pob.display(on);
    os1.display(on); sp1.display(on);
    [ eq(cmode.get,2); os2.display(on); sp2.display(on) ];
  }
  proc Same() { return(and(rod.same,os1.same,pob.same,sp1.same,sp2.same,os2.same,pla.Same)) }
  proc Plain() { rod.plain; os1.plain; pob.plain; sp1.plain; sp2.plain; os2.plain }
  proc Init() {
    osoba_config.start; spolu_config.start; pobyt_config.start; rodina_config.start;
    [ lt(sys('screen','width'),1280); c_change(1) ];
    os1.init; os1.set_mode(2,'U');
    os2.init; os2.set_mode(2,'U');
    sp1.init; sp1.pece_sel.set_attrib('par',
      object('fce','akce2_auto_deti','akce',the_duakce.get,'save','value'));
    sp2.init; sp2.pece_sel.set_attrib('par',
      object('fce','akce2_auto_deti','akce',the_duakce.get,'save','value'));
    pob.init; rod.init; rod.cleni.browse_init;
    sp1.os.set(os1);
    sp2.os.set(os2);
    rod.show_rodina; pob.show_pobyt;
  }
  # změny sloupců
  proc c_change(n) {
    // 1 sloupec
    eq(n,1); os2.display; cmode.set(1); page.wider.set('[fa-toggle-right]');
    os2.display(0); sp2.display(0);
    frame.set_css('page_2clmn','page_3clmn')
  | // 2 sloupce
    eq(n,2); not(os2.display); cmode.set(2); page.wider.set('[fa-toggle-left]');
    os2.display(1); sp2.display(1);
    frame.set_css('page_3clmn','page_2clmn');
  }
  proc onproperty() { form.display(0,'2') }
  # změna v některém z formulářů
  proc d_change() { cmd.set_state('edit'); }
  # změny překryvu formulářů
  proc z_change(x) {
    and(eq(x,'o'),not(eq(zmode.get,x))); zmode.set('o');
    foreach(array(os1,os2,rod),z_up); foreach(array(sp1,sp2,pob),z_down); stop
  | and(eq(x,'p'),not(eq(zmode.get,x))); zmode.set('p');
    foreach(array(os1,os2,rod),z_down); foreach(array(sp1,sp2,pob),z_up);
  }
  proc z_up(x)   { x.set_css('shift_up','shift_down'); x.set_css('shift_up','shift_down','.*') }
  proc z_down(x) { x.set_css('shift_down','shift_up'); x.set_css('shift_down','shift_up','.*') }
}
# -----------------------------------------------------------------------------------------==> POBYT
panel pobyt_config [,,200,150] {type:'popup', title:"Podrobnosti údajů"
  var tit='společné údaje o pobytu', grp='Z'
  proc start() { grp.set(get_cookie(conc(sys('root'),'_conf_pobyt'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    cnfg._back;  pob.id.get; pob.show_pobyt | pob.init_pobyt }
  proc tune() { _old.set(grp.get); evid.z_change('p'); panel.modal }
  use cnfg: form _cnfg
  form _cnfg {
    check z [0, 0,200,] { title:"základní údaje", format:'d', value:'1'}
    check t [0,40,200,] { title:"(pracovní poznámka)", format:'t', skill:'yaa|yaa:t;faa|faa:t;caa|caa:t'
                                                                          proc onchange() { _tuned }}
    check p [0,20,200,] { title:"společná poznámka k pobytu", format:'t', proc onchange() { _tuned }}
    check u [0,60,200,] { title:"platba za pobyt", format:'t', proc onchange() { _tuned }}
    check d [0,80,200,] { title:"platba za pobyt dětí", format:'t', proc onchange() { _tuned }}
    check s [0,100,200,] { title:"členové skupiny", format:'t', proc onchange() { _tuned }}
    button  [ 0,130,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_pobyt'),grp.get); panel.hide(1) }}
    button  [85,130,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; pob.show_pobyt; panel.hide(1) }}
    proc _tuned() { grp.set(cconc(p.get,'P,',t.get,'T,',s.get,'S,',u.get,'U,',d.get,'D,','Z'));
      pob.show_pobyt }
    proc _back() { 
      z.set(contains('Z',grp.get)); p.set(contains('P',grp.get)); t.set(contains('T',grp.get));
      s.set(contains('S',grp.get)); u.set(contains('U',grp.get)); d.set(contains('D',grp.get)); }
  }
  var _old= 'Z'
}
form _pobyt [,,360,62] { par:°{onchanged:'first_only'}
  func onchanged() {
    if (form.key()) 
      ucast_lock_on('pobyt',form.key()); 
    evid.d_change() }
  proc onclick() { evid.z_change('p') }
  proc init_pobyt() { pob.display(0,'[^f]'); }
  proc show_pobyt() { var height:number, tags:text, tit:text
    form.display(0,'[^f]');
    tags.set('F');
    [ contains('T',pobyt_config.grp.get); tags.set(conc(tags,',t')) ];
    [ contains('P',pobyt_config.grp.get); tags.set(conc(tags,',p')) ];
    [ contains('U',pobyt_config.grp.get); tags.set(conc(tags,',u')) ];
    [ contains('D',pobyt_config.grp.get); tags.set(conc(tags,',d')) ];
    tags.set(conc(tags,',a'));
    [ contains('S',pobyt_config.grp.get); tags.set(conc(tags,',s')) ];
    height.set(sum(stack_forms(form,tags,0,'up'),10));
    //height.set(sum(form.stacks(tags,'up',0),10));
    frame.property(object('top',minus(60,height),'height',sum(height,-10)));   //-7
    [ contains('S',pobyt_config.grp.get); skupina.display(1);
      skupina.get; skup.display(1) ];
    // počítané údaje
    [ u.b.browse_count;
      celkem.set(sum(u.b.c_nocleh.get,u.b.c_strava.get,u.b.c_program.get,u.b.c_sleva.get)) ];
  }
  proc new_pobyt() {
    form.init; skup.display(0);
  }

  view p: table pobyt
  const Lp=0
  label frame [0,0,360,50] {tag:'f', css:'ae_form2', title:'společné údaje o pobytu' }
  field id [304,-12,50,] {tag:'F', data:p.id_pobyt, format:'ro', style:'color:white', css:'Label',
                          help:' ', tabindex:0 }
  field key_akce { data:p.id_akce }
  field i0_rodina { data:p.i0_rodina }
  # ------------------------==> . kontextové_menu
  menu { type:'context', join:frame
    item { title:'konfigurace formuláře', proc onclick () { pobyt_config.tune } }
    item { title:'ukázat změny', proc onclick () { track.back_show('pobyt',the_pobyt.get) } }
  }

  // t = pracovní poznámka
  edit  p_pracovni [5,0,349,74] {tag:'t', data:p.pracovni, skill:'yaa|yaa:t;faa|faa:t;caa|caa:t'
      title:'^(pracovní poznámka)' }
  label [5,74,1,18] { tag:'t' } // oprava
  // u = úhrada
  // p = poznámka
  edit  p_poznamka [5,0,349,74] {tag:'p', data:p.poznamka, title:'^poznámka k pobytu'}
  label [5,74,1,18] { tag:'p' } // oprava

  // u = úhrada
  field celkem      [5,0,50,20] {tag:'u', format:'dr', title:'^poplatek'}
  field platba
//  field platba      [60,0,50,20] {tag:'u', data:p.platba, format:'r', title:'^uhrazeno'}
//  select zpusobplat [120,0,86,20] {tag:'u', type:'map', data:p.zpusobplat, title:'^jak',
//                                 options:ms_akce_platba.zkratka, format:'u'}
//  field datplatby   [216,0,84,20] {tag:'u', type:'date', data:p.datplatby, title:'^kdy'}
//  check avizo       [300,0,50,20] {tag:'u', title:"avízo", data:p.avizo, format:'r'}
  label [5,20,1,15] { tag:'u' } // oprava

  // d = úhrada za děti
  field poplatek_d [5,0,50,20] {tag:'d', data:p.poplatek_d, format:'r', title:'^poplatek/d'}
//  field platba_d   [60,0,50,20] {tag:'d', data:p.platba_d, format:'r', title:'^uhrazeno'}
//  select zpusobplat_d [120,0,86,20] {tag:'d', type:'map', data:p.zpusobplat_d, title:'^jak',
//                                 options:ms_akce_platba.zkratka, format:'u'}
//  field datplatby_d [216,0,84,20] {tag:'d', type:'date', data:p.datplatby_d, title:'^kdy'}
  label [5,20,1,15] { tag:'d' } // oprava

  // ubytování
  field pokoj     [7,0,81,20] {tag:'a', data:p.pokoj, title:'^pokoj(e)', format:'nf'}
  field budova    [95,0,56,20] {tag:'a', data:p.budova, title:'^budova', format:'nf'}
//  label [5,15,1,20] { tag:'a' } // oprava

  // ==> ... skupinka
  label [5,-110,1,35] { tag:'s' } // výplň pro skupinky
  field skupina [158,-81,37,20] { tag:'x', data:p.skupina, format:'rf', title:'^skupinka'}
  browse skup [Lp+206,-100,,] { tag:'x', rows:4
    show id_pobyt //{data:pp.id_pobyt}
    show jmeno [,,120,] {title:'členové skupinky'}
    proc onrowclick () { var line:number
      line.set(this.browse_active);
      u.b.raise('onrowclick',id_pobyt.get);
      this.browse_active(line);
    }
  }

  // funkce
  select funkce   [7,35,80,] {tag:'a', type:'map', data:p.funkce, format:'un',
    options:ms_akce_funkce.zkratka, title:'^společná funkce'}
  select prednasi [93,35,66,] {tag:'a', type:'map0', data:p.prednasi, format:'un',
    options:ms_akce_prednasi.zkratka, title:'^přednáš(ej)í'}
  select hnizdo [165,35,37,] {tag:'a', type:'map', data:p.hnizdo, format:'un', 
    options:ms_akce_hnizda.zkratka, title:'^hnízdo' }
  label [5,65,1,1] { tag:'a' } // oprava
}
# -----------------------------------------------------------------------------------------==> SPOLU
panel spolu_config [,,200,60] {type:'popup', title:"Podrobnosti údajů"
  var grp='Z'
  proc start() { grp.set(get_cookie(conc(sys('root'),'_conf_spolu'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    cnfg._back; spolu_show; }
  proc tune() { _old.set(grp.get); evid.z_change('o'); panel.modal }
  use cnfg: form _cnfg
  form _cnfg {
    check z [ 0, 0,200,] { title:"základní údaje",       format:'d', value:'1'}
    check p [ 0,20,200,] { title:"poznámka k účasti",    format:'t', proc onchange() { _tuned }}
    button  [ 0,40,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_spolu'),grp.get); panel.hide(1) }}
    button  [85,40,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; ucast.spolu_show; panel.hide(1) }}
    proc _tuned() { grp.set(cconc(p.get,'P',1,'Z')); ucast.spolu_show }
    proc _back() { z.set(contains('Z',grp.get)); p.set(contains('P',grp.get)); }
  }
  var _old= 'Z'
}
form _spolu [,,0,270] {
  var os: object
  proc onchanged() { evid.d_change }
  proc onclick() { Onclick }
  proc Onclick() { evid.z_change('p') } // nutné aby přímým voláním onclick nedošlo k zacyklení
  proc show_spolu() { var height:number, tags:text, tit:text
    form.display(0,'[^f]');
    { key_spolu.get;
      # je na akci
      tit.set('účastník akce ...'); tags.set('S');
      [ /*s_role.key;*/ contains('P',spolu_config.grp.get); tags.set(conc(tags,',p')) ];
      switch(s_role.key,
      0, { tit.set('jako host') },
      1, { tit.set('účastník akce') },
      2, { tags.set(conc(tags,',d'));   tit.set('dítě na akci') },
      3, { tags.set(conc(tags,',o,d')); tit.set('dítě s osobním pečovatelem') },
      4, { tags.set(conc(tags,',d'));   tit.set('dítě jako pomocný pečovatel') },
      5, { tags.set(conc(tags,',c'));   tit.set('osobní pečovatel'); pece_sel.set(pece_val.get) }
      );
      tags.set(conc(tags,',r'));
    | # není na akci
      tit.set('- - -'); tags.set('a');
    };
    frame.set(tit);
    height.set(sum(stack_forms(form,tags,10,'up'),0));
  //height.set(sum(form.stacks(tags,'up',10),0));
    frame.property(object('top',minus(265,height),'height',sum(height,10)));
  }
  // globální procedury
  proc new_spolu() {
    form.init; show_spolu; vyradit.display(0);
  }
  proc load_spolu(ids,cleni) {
    form.key(ids); key_spolu.set(ids); pecoun.set(0);
    [ ids; copy_by_name(cleni,form) ];
    [ eq(pfunkce.get,5); pecoun.set(1) ]; // 5: je na kartě Pečouni
    show_spolu
  }

  view s: table spolu

  label frame [0,0,242,50] {tag:'f', css:'ae_form2', title:'osobní údaje o pobytu' }
  field key_spolu [186,0,50,] {tag:'S', data:s.id_pobyt, format:'ro',
    style:'color:white', css:'Label', help:' ', tabindex:0 }
  field key_osoba { data:s.id_osoba }
  # ------------------------==> . kontextové_menu
  menu detail { type:'context', join:frame
    item { title:'konfigurace formuláře', proc onclick () { spolu_config.tune } }
    item { title:'ukázat změny', proc onclick () {
      key_spolu.get; track.back_show('spolu',key_spolu.get) } }
  }

  // p = poznámka
  edit  s_poznamka [5,0,231,74] {tag:'p', data:s.poznamka, title:'^poznámka k účasti', format:'n'}

  // r = s_role
  select s_role [55,2,90,] {tag:'r', type:'map', options:ms_akce_s_role.zkratka, format:'nu'
    data:s.s_role, title:'účast jako:',
      proc onchanged() {
        // pokud není chůvou pak nemá chované dítě
        [ pece_key.get; { eq(this.key,5) | pece_key.set(0); pece_sel.key(0); pece_key.change; }  ];
        show_spolu;
        eq(this.key,4); pfunkce.set(4); pfunkce.change
      | eq(this.key,5); pecoun.get; pfunkce.set(5); pfunkce.change
      | pfunkce.set(0); pfunkce.change
      }
  }

  // informace závislé na s_roli

  # d: skupinka dítěte a kategorie
  field skupinka [216,0,20,]   { tag:'d', data:s.skupinka, help:'skupinka', title:"skup.", format:'n' }
  // cenová kategorie pro FA
  field kat_orig { data:s.dite_kat }
  select s_dite_kat [54,0,130,] { tag:'d', type:'map', options:ms_akce_dite_kat.hodnota,
    data:s.dite_kat, title:'kategorie:', format:'nuw'
    proc onchanged() { var a:object
      [ eq(this.key,7); pfunkce.set(8); pfunkce.change
      | pfunkce.set(0); pfunkce.change  ];
      // kategorii kontrolujeme pouze pro FA
      eq(substr(sys('ezer','options','app'),0,2),'fa');
      { a.set(ask('akce_test_dite_kat',this.key,rod.cleni.narozeni.get,the_duakce.get)); a.ok
      | alert("POZOR: kategorie '",this.get,"' neodpovídá věku dítěte ",a.vek," let (k začátku akce)");
        this.key(kat_orig.get); this.plain; }
  }}

  # o: osobně opečovávané dítě + info "je pečoun"
  field pece_val [70,0,160,] { tag:'o', format:'no', title:'pečovatel:     ' }
  button [55,3,,] { tag:'o', title:'^', css:'db_evidence',
    proc onclick() { jump(rod.cleni.pece_ido.get) } }

  # c: osobní pečovatel pro dítě ...
  field pece_key { data:s.pecovane }
  label [10,3,45,17] { tag:'c', title:"pečuje o:", format:'n'}
  select pece_sel [70,0,160,17] { tag:'c', type:'auto', par:°{fce:'akce2_auto_deti'}, format:'nu'
    proc onchanged() { pece_key.set(pece_sel.key); pece_key.change; }  }
  button [55,3,,] { tag:'c', title:'^', css:'db_evidence',
   proc onclick() { jump(rod.cleni.pece_ido.get) } }
  field pfunkce { data:s.pfunkce }
  check pecoun [36,27,130,17] { tag:'c', title:"je v kolektivu pečounů", format:'n', value:'0'
    proc onchange () { // 0 => osobní & 'dědeček' -- nezabrazí se na kartě Pečouni
    {  this.get; pfunkce.set(5); pfunkce.change
    | pfunkce.set(0); pfunkce.change
    };
    // hlavounům se povoluje zápis změny - nemají aktivní [save]
    [ has_skill("yaap+");
      ask('akce2_save_pfunkce',key_spolu.get,pfunkce.get);
      pfunkce.plain; this.plain ]
  } }
  # ------------------------==> . přidat/vyřadit
  proc _reload_spolu(ido) { var ido1: number, ido2: number
    ido1.set(os1.key_osoba.get); ido2.set(os2.key_osoba.get);
    reload(the_pobyt.get);
    os1.key_osoba.set(ido1); os2.key_osoba.set(ido2);
    u.b.reload_evid;
    rod.cleni.raise('onrowclick',ido);
  }
  button vyradit [150,1,,] { tag:'r', title:"Vyřadit z akce", format:'n', skill:'yaa|yaa+;faa|faa+;caa|caa+'
    proc onclick() {
      pece_val.get;
      alert("před vyřazením je třeba vyjmout z osobní péče")
    | spolu.delete_record(conc('id_spolu=',form.key));
      { rod.key_rodina.get; _reload_spolu(rod.cleni.key_osoba.get) | cmd._reload(1,0) }
  }}
  button pridat [150,7,,20] { tag:'a', title:"Přidat na akci", format:'n',  skill:'yaa|yaa+;faa|faa+;caa|caa+'
    proc onclick() { na_akci(os.key_osoba.get,rod.key_rodina.get,os.role.get) }
    proc na_akci(ido,idr,role) { var ret:object
      Onclick;
      // kontrola oprávněnosti - dotazem
      { function('x','y','return x&y;',the_org.get,os.access.get)       // stejná org jako má akce?
      | confirm("máme od této osoby souhlas?");                         // čestné prohlášení
        os.access.set(3); os.access.change
      | alert('tak ji nemohu přidat'); return                           // nic
      };

      // přidání se zamezením duplicit a s definicí kategorie pro děti
      ret.set(ask('ucast2_pridej_osobu',ido,os.access.get,the_duakce.get,pob.key,idr,role));
      { ret.spolu; _reload_spolu(ido)
      | ret.tvori; cmd._reload(1,ido) }
    | alert(ret.msg)
  }}
}
# ----------------------------------------------------------------------------------------==> RODINA
form _rodina2 [,,360,229]  { css:'ae_frame', par:°{onchanged:'first_only'}
  var key_pobyt: number
  proc onstart() { r_stat.selects(staty.get,',',1) }
  proc onclick() { evid.z_change('o') }
  // globální procedury
  proc new_rodina(nazev) {
    form.display(0,'[^f]'); r_access.display(1); cleni.display(1); form.enable(1,'.*');
    form.init; rodiny0.set(nazev); r_access.set(the_org.get); r_access.change;
    form.stacks('n,r','down',0,0,10);
    form.display(1,'[rns]'); form.display(0,'a');
    foreach(array(rodiny0),obligatory);
    cleni.browse_init; //cleni.enable(0);
  }
  proc init_rodina() {
    form.display(0,'[^f]'); r_access.display(1); cleni.display(1);
  }
  # no_rodina - zobrazuje prázdný formulář
  proc no_rodina() {
    form.display(0,'[^f]'); r_access.display(0); cleni.display(0); form.enable(0,'.*');
  }
  # show_rodina - zobrazuje formulář podle: key_rodina
  proc show_rodina() { var tags:text
    form.display(0,'[^f]'); r_access.display(1); cleni.display(1); form.enable(1,'.*');
    evidence.display(gt(key_rodina.get,0));
    chain.display(and(u.dup.get,or(key_rodina.get,eq(pob.funkce.key,99))));
    { keys_rodina.get; chain.set_css('db_chain','db_evidence')
    | chain.set_css('db_evidence','db_chain') };
    tags.set('a');
    { or(key_rodina.get,not(ucast.the_pobyt.get));
      frame.set('účastníci pobytu + rodina');
      tags.set(conc(tags,',r'));
      [ contains('P',rodina_config.grp.get); tags.set(conc(tags,',p')) ];
    | frame.set('účastníci pobytu');
      tags.set(conc(tags,',x'));
    };
    form.stacks(tags,'down',0,0,10);
    t_role.display(gt(key_rodina.get,0)); form.display(gt(key_rodina.get,0),'o');
  }
  # hide rodina - skryje všechna data bez změny tvaru
  proc hide_rodina() {
    form.init; form.enable(0,'.*');
    cleni.browse_init; cleni.enable(0);
  }
  proc od_svatby() {
    r_rozvod.get; spolu.set("<span style='background:yellow'>jsou rozvedeni</span>")
  | r_datsvatba.get; spolu.set(conc('od svatby ',roku(r_datsvatba.get,r_svatba.get),' let'))
  | spolu.set('datum svatby') }
  // pozor - proměnné jsou vzhledem k db.akce2._rodina2
  func onchanged() { 
    if (form.key()) 
      ucast_lock_on('rodina',form.key()); 
    evid.d_change() 
  }
  proc show_osoby(ido,ids,cleni) {
    eq(ucast.evid.cmode.get,2); os1.key;   // 2 sloupce a 1. neprázdný
    [ eq(ido,os1.key);                     //   čteme do 1.
      copy_by_name(cleni,os1);
      os1.show_osoba(u.dup.get);
      copy_by_name(cleni,os1);
      sp1.load_spolu(ids,cleni);
      os1.gmail.enable(0)
    | os2.key(ido);                        //   nebo do 2.
      os2.enable(1,'.*');
      copy_by_name(cleni,os2);
      os2.show_osoba(u.dup.get);
      copy_by_name(cleni,os2);
      sp2.enable(1,'.*');
      sp2.load_spolu(ids,cleni);
      os2.gmail.enable(0)
    ]
  | os1.key(ido);                          // 1 sloupec nebo 1. prázdný
    copy_by_name(cleni,os1);
    os1.show_osoba(u.dup.get);
    copy_by_name(cleni,os1);
    sp1.load_spolu(ids,cleni);
    os1.gmail.enable(0)
  }
  proc zmena_rodiny() {
    reload(ucast.the_pobyt.get);
    [ u.b.browse_count; page.evd.onclick ];
  }

  # údaje o rodině
  const Lr=187; Tr=10
  view r: table rodina
  view o: table osoba
  view tr: table tvori {join_type:"LEFT", join:"ON tr.id_osoba=o.id_osoba AND tr.id_rodina=@rodina"}
  view so: table spolu {join_type:"LEFT", join:"ON so.id_osoba=o.id_osoba AND so.id_pobyt=@pobyt"}

  label frame [0,2,360,20] {tag:'f', title:'rodinné údaje', css:'frame_label_up' }
  #==> . elim
  button chain [174,0,,] {tag:'f', title:'[fa-chain]', css:'db_evidence',
    proc onclick() { var zmena:number, ido:number, idr:number, idrs:text
      { ido.set(os1.key_osoba.get); idr.set(key_rodina.get); idrs.set(u.b.keys_rodina.get);
        idrs;
        spinner(1); zmena.set(elim.rodiny_lst(idr,idrs)); spinner(0);
//        echo("elim.rodiny_lst(",idr,",",idrs,")=",zmena);
        [ u.b.browse_row; u.b.raise('onrowclick',u.b.browse_key) ];
        jump(ido)
      | warning("nebyla nalezena podezřelá kopie") }
  }}
  button evidence [193,0,,] {tag:'f', title:'^evidence', css:'db_evidence'
    proc onclick() { evi.evid_rodina(key_rodina.get) } }
  field r_access   [304,0,10,] {tag:'f', format:'or', css:'Label', data:r.access, tabindex:0  }
  field key_rodina [304,0,50,] {tag:'f', format:'or', css:'Label', help:' ', tabindex:0  }
  field keys_rodina // seznam pravděpodobných kopií
  # ------------------------==> . kontextové_menu
  menu detail { type:'context'
    item { title:'maily manželů do schránky', proc onclick () { var y:object
      y.set(ask('ucast2_clipboard',the_pobyt.get));
      clipboard(y.clip); alert(y.msg);
    }}
    item { title:'-konfigurace formuláře', proc onclick () { rodina_config.tune(ucast) } }
    item { title:'ukázat změny', proc onclick () {
      key_rodina.get; track.back_show('rodina',key_rodina.get) } }
    item { title:'historie skupinek MS', proc onclick () {
      Skupinky.historie(key_rodina.get)
    }}
    item { title:'=zazurovění účastníků', skill:'daea', proc onclick () { var idp:number
      idp.set(the_pobyt.get); ask('ucast2_pobyt_access',key_pobyt.get,3); refresh_ucast(idp) } }
    item { title:'zazurovění dětí a rodiny', skill:'daea', proc onclick () { var idp:number
      idp.set(the_pobyt.get); ask('evid2_deti_access',key_rodina.get,3); refresh_ucast(idp) } }
  }
  // ==> . nerodina
  field  nerodina  [Lr+5,32,90,] {tag:'y', title:"^skupina osob", format:'dnTt', css:'nerodina'
    proc Init() { form.init; key_rodina.set(0); show_rodina }
  }
  // ==> . hledání dle názvu
  select rodiny0   [Lr+5,32,95,] {tag:'s', type:'auto', format:'t', par:°{fce:'ucast2_auto_rodiny'}
    const css_all = 'ezer_ys ezer_fa ezer_db'
    var s_mode=0  // 1 znamená výběr
    var rod_n=0
    proc Init() { rod_n.set(0); s_mode.set(0); rod_beg; }
    proc onchanged() {
//      echo(this.get,"/",this.key);
      s_mode.get; rod_show(1) | Init; rod_show(1);
    }
    proc rod_show(n) { var ret:object
      ret.set(ask('db2_rod_show',this.get,n));
      rod_next.enable(ret.next); rod_back.enable(ret.back); rod_use.enable(ret.n); rod_new.enable(1);
      rod_n.set(ret.n); rodiny0.set_css(ret.css,css_all.get); 
      ret.n; 
      copy_by_name(ret.rod,form); form.key(key_rodina.get); cleni.browse_fill(ret.cleni,'~');
      [ cleni.raise('onrowclick') | os1.clear_osoba; os2.clear_osoba ];
      warning
    | warning("rodina '",this.get,"' ještě není v evidenci, použij ",
        replace_fa('[fa-heart]')," pro založení");
    }
    proc rod_beg() {
      s_mode.get
    | s_mode.set(1); function("return Ezer.Shield.show();"); form.set_css('search');
      form.enable(0,'[rpan]');
    }
    proc rod_end() {[
      s_mode.get;
      s_mode.set(0); function("return Ezer.Shield.hide();"); form.set_css('','search');
      rodiny0.set_css('',css_all.get);
    ]}
  }
  label  [Lr+100,28,72,22] { tag:'s', css:'ae_parm search' }
  button rod_back [Lr+103,32,16,16] {tag:'n,b', type:'html', title:"[fa-chevron-left]",
    css:"search fa", help:"předchozí rodina se stejným názvem"
    proc onclick() { rodiny0.rod_show(sum(rodiny0.rod_n.get,-1)) }}
  button rod_next [Lr+120,32,16,16] {tag:'n,b', type:'html', title:"[fa-chevron-right]",
    css:"search fa", help:"následující rodina se stejným názvem"
    proc onclick() { rodiny0.rod_show(sum(rodiny0.rod_n.get,1)) }}
  button rod_use [Lr+137,32,16,16] {tag:'n,b', type:'html', title:"[fa-plug]",
    css:"search fa", help:"potvrzení nalezené rodiny a vložení do akce jako rodinný pobyt"
    proc onclick() { var ret:object, h:number
      // kontrola oprávněnosti - dotazem
      { function('x','y','return x&y;',the_org.get,r_access.get)       // stejná org jako akce
      | confirm("máme od této rodiny souhlas?");                       // čestné prohlášení
        ask('ucast2_rodina_access',key_rodina.get,3);
      | return                                                         // nic
      };
      rodiny0.rod_end;
      h.set(0);
      [ the_hnizda.get; h.set(header.hnizdo.key) ]; 
      ret.set(ask('ucast2_pridej_rodinu',the_duakce.get,key_rodina.get,h));
      ret.msg; alert(ret.msg); cmd._reload(the_pobyt.get,0)
    | the_pobyt.set(ret.idp); cmd._reload(1,0);
  }}
  // ==> . nová rodina
  button rod_new [Lr+154,32,16,16] {tag:'n,b', type:'html', title:"[fa-heart]", 
    css:"search fa", help:'Vytvoření nového pobytu s novou rodinou (bez členů)'
    proc onclick() {
      cmd.mode.set('novy_pobyt'); // příznak pro "nová rodina + pobyt"
      cmd.b_display(0); warning;
      // inicializuj rodinu jako skupinu, pobyt + vyznač povinná pole
      rod.new_rodina(rodiny0.get); pob.new_pobyt;
      // uprav viditelnost tlačítek
      rod.rodiny1.set(rodiny0.get); rod.rodiny1.change; rodiny0.plain;
      rod.display(0,'[abnsy]'); rod.display(1,'[mo]'); rod.enable(1,'[m]');
      form.display(0,'[b]'); cmd.set_state('new');
  } }
  // ==> . oprava názvu rodiny
  field  rodiny1   [Lr+5,32,100,] {tag:'m', title:"^oprava názvu rodiny", data:r.nazev, format:'n' }
  select rodiny    [Lr+5,32,104,] {tag:'a', format:'tT', title:"^rodina&nbsp;('-'&nbsp;jednotlivec)",
    skill:'yaa|yaa+;faa|faa+;caa|caa+'
    help:'výběr rodiny podle nastaveného účastníka a její přiřazení k pobytu',
    proc onchanged() {
      ask('akce2_pobyt_rodinny',key_pobyt.get,this.key); zmena_rodiny; }}
  button [Lr+108,34,16,16] {tag:'o', type:'html', title:"[fa-pencil]",help:"opravit název rodiny"
    style:"padding-left:0px", skill:'yaa|yaa+;faa|faa+;caa|caa+' css:'fa'
    proc onclick() {
      form.display(0,'a'); form.display(1,'m'); rodiny1.set(rodiny.get); rodiny1.change; }}
  select t_role [Lr+131,Tr+22,35,] {tag:'n,a', type:'map', options:ms_akce_t_role.hodnota, format:'wn'
    data:tr.role, title:'^role'}

  field r_spz      [Lr+5,20,58,]  {tag:'r', data:r.spz, title:'^SPZ auta'}
  label spolu      [Lr+82,7,85,] {tag:'r' }
  field r_svatba   {data:r.svatba}
  field r_datsvatba[Lr+82,20,85,] {tag:'r', type:'date', data:r.datsvatba, format:'rR:e'}
  field r_rozvod   { data:r.rozvod }

  // kontakt
  field r_ulice    [Lr+5,55,108,] {tag:'r', data:r.ulice, title:'^ulice'}
  select r_stat    [Lr+121,55,45,] {tag:'r', data:r.stat, format:'r:e', title:'^stát'}
  check noadresa   [Lr+80,71,89,] {tag:'r', title:"chyba adresy", data:r.noadresa, tabindex:0
    help:"pošta vrací zásilky", format:'n'
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum zjištění neplatnosti")
  } }
  field r_psc      [Lr+ 5,90, 40,] {tag:'r', data:r.psc, title:'^psč'
    proc onchanged() { this.let(replace(this.get,' ','')) }
  }
  field r_geo_ok   [Lr+29,76,12,12] {tag:'r', css:'Label3', format:'no' }
  field r_obec     [Lr+52,90,113,] {tag:'r', data:r.obec, title:'^obec'}
  field r_telefony [Lr+5,125,160,] {tag:'r', type:'list', data:r.telefony,title:'^telefony'}
  check nomaily    [Lr+42,141,121,] {tag:'r', title:"neposílat hromadné", data:r.nomaily, tabindex:0
    help:"nepoužívat mailovou adresu pro rozesílání hromadných nabídek a informací", format:'n'
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum odmítnutí hromadně rozesílaných informací")
  } }
  field r_emaily   [Lr+5,160,160,] {tag:'r', type:'list', data:r.emaily, title:'^e-maily'}

  // ==> . členové pobytu
  label [7,19,200,] { title:"členi resp. <span class='nerodina'>nečleni</span> nastavené rodiny" }
  browse cleni [5,35,107,191] { rows:9, buf_rows:100,
      css_rows:'barva,0:neucast,2:nerodina,3:cerveny,5:zeleny'
    show key_osoba
    show keys_osoba // [,,50,] {format:'t'}    // seznam duplicitních osob
    show access
    show access_web // access + 16 pokud došlo ke změně přes web
    show jmeno [,,110,] {title:'jméno'
      css_cell:'access_web,0:,1:ezer_ys,2:ezer_fa,3:ezer_db,17:ezer_ys ezer_web,18:ezer_fa ezer_web,19:ezer_db ezer_web' }
    show _dup  [,,0,] { title:'duplicita', help:'n-narození, k-kontakty, b-bydliště', format:"t" }
    show vek   [,,30,] {title:'věk', format:'r' }
    show key_tvori
    show idr
    show role  [,,10,] {title:'role'}
    show rc
    show rody
    // osobní údaje - OSOBA
    // POZOR: při změně je třeba otestovat funkci tisk2_sestava_pary, která užívá toto browse/ask
    show narozeni, show web_souhlas, show umrti, show prijmeni, show rodne, show sex,
    show adresa, show ulice, show psc, show obec, show stat,
    show kontakt, show telefon, show nomail, show email, show gmail, show iniciace, show firming, 
    show uvitano, show clen, show obcanka, show rc_xxxx, show cirkev, show vzdelani, show titul,
    show zamest, show zajmy, show jazyk, show dieta, show aktivita, show note, show kmen, show geo_ok,
    // údaje k akci
    show key_spolu, show barva, show s_role,
    show s_dite_kat, show s_poznamka, show pece_key /*pecovane*/, show pfunkce,
    show pece_val show pece_ido /* jméno a id pečovaného nebo chůvy */ show o_umi, show prisl, 
    show skupinka
    // metody
    proc show_dup(on) { on; jmeno.width(80); _dup.width(29) | jmeno.width(110); _dup.width(0) }
    proc onclick() { _dup.width; show_dup(0) | show_dup(1) }
    proc onrowclick() {
      [ track.display; track.back_osoba_rodina(key_osoba.get,kmen.get) ];
      eq(cmd.mode.get,'rodiny');
      show_osoby(key_osoba.get,key_spolu.get,cleni);
    | neni_ulozen_clen
    | key_rodina.set(idr.get); form.key(idr.get);
      [ ucast.part('cmd.novy_clen'); ucast.part('cmd.novy_clen').enable(key_rodina.get) ];
      od_svatby;
      show_rodina;
      show_osoby(key_osoba.get,key_spolu.get,cleni);
      rody.get;
      rodiny.selects(rody.get); rodiny.key(idr.get);
      t_role.set(role.get);
    }
  }

  label [7,0,1,170] {tag:'x', title:" " } // výplň pro případ ne-rodiny
  // účast na jiných MS
  field r_ms       [91,4,14,] {tag:'p', data:r.r_ms, title:'MS mimo YS/FA:', format:'r:e',
                   help:'zadej počet účastí na MS mimo YS,FA' }
  label            [108,9,5,] {tag:'p', title:'&times;' }
  // rodinné schopnosti a poznámka
  select r_umi     [192,6,160,] {tag:'p', type:'map+', data:r.r_umi, options:ms_umi.hodnota,
    title:'schopnosti:', format:'n'}
  edit  r_note     [5,36,302+44,66] {tag:'p', data:r.note, title:'^rodinná poznámka'}

  // nastavení účasti jako rodinné
  proc show_rodiny() {
    rodiny.selects(ask('akce2_osoba_rodiny',cleni.key_osoba.get));
    rodiny.key(key_rodina.get);
  }
}
# ----------------------------------------------------------------------------------------==> PLATBA
form _platba [,,623,] { key_id:'id_pobyt', style:'height:fit-content', par:°{onchanged:'first_only'}
  const Td= 230
  var cena: object,
      zmena_spec_strav: number
  label [2,27,527,Td+95] //{title:"<img src='img/ms2p.png'>" }
  func Same() { return form.same() && zmena_spec_strav==0; }
  func onchanged() { ucast_lock_on('pobyt',the_pobyt) }
  func ini() {
    zmena_spec_strav= 0;
    // výpočet součtu cen a rozpis, došlé platby
    if (has_skill("yaa;faa;caa")) {
      rozpis_ceny();
      celkem= c_nocleh + c_strava + c_program + c_sleva;
      vratka= v_nocleh + v_strava + v_program + v_sleva;
      naklad= celkem - c_sleva - vratka + v_sleva;
      dar_dluh= platba - (celkem - vratka);
      dar_dluh_d= platba_d - poplatek_d;
    };
    // obarvení tlačítek [Str.pol]
    if (u.b.cstrava_cel || u.b.cstrava_pol) stravy.set_css('cervena','cerna');
    else stravy.set_css('cerna','cervena');
    if (u.b.cstrava_cel_bm || u.b.cstrava_pol_bm) stravy_bm.set_css('cervena','cerna');
    else stravy_bm.set_css('cerna','cervena');
    if (u.b.cstrava_cel_bl || u.b.cstrava_pol_bl) stravy_bl.set_css('cervena','cerna');
    else stravy_bl.set_css('cerna','cervena');
  }
//  proc ini() {
//    // výpočet součtu cen a rozpis, došlé platby
//    [ has_skill("yaa;faa;caa");
//      rozpis_ceny;
//      celkem.set(sum(c_nocleh.get,c_strava.get,c_program.get,c_sleva.get));
//      naklad.set(sum(celkem.get,minus(c_sleva.get)));
//    ];
//    // obarvení tlačítek [Str.pol]
//    [ or(u.b.cstrava_cel.get,u.b.cstrava_pol.get); stravy.set_css('cervena','cerna');
//    | stravy.set_css('cerna','cervena') ];
//    [ or(u.b.cstrava_cel_bm.get,u.b.cstrava_pol_bm.get); stravy_bm.set_css('cervena','cerna');
//    | stravy_bm.set_css('cerna','cervena') ];
//    [ or(u.b.cstrava_cel_bl.get,u.b.cstrava_pol_bl.get); stravy_bl.set_css('cervena','cerna');
//    | stravy_bl.set_css('cerna','cervena') ];
//  }
  // ==> . rozpis a zápis ceny
  button [10,47,,] { tag:'cenik', title:"Návrh ceny", help:"zapíše počet lůžek a strav"
    func onclick() { var ret: object
      ret= php.akce2_pobyt_default(the_duakce,the_pobyt);
      copy_by_name(ret,form);
      vzorec.change(); luzka.change(); pristylky.change(); pocetdnu.change(); svp.change();
      strava_cel.change(); strava_pol.change(); kocarek.change();
      navrh= `pro zobrazení ceny je třeba
          <br>1. upravit (je-li třeba) a uložit navržené hodnoty,
          <br>2. dát <b>Zapsat cenu</b> <br>3. uložit`;
    }
//    proc onclick() {
//      ret.set(ask('akce2_pobyt_default',the_duakce.get,the_pobyt.get));
//      copy_by_name(ret,form);
//      vzorec.change; luzka.change; pocetdnu.change; svp.change;
//      strava_cel.change; strava_pol.change; kocarek.change;
//      navrh.set("pro zobrazení ceny je třeba
//        <br>1. upravit (je-li třeba) a uložit navržené hodnoty,
//        <br>2. dát <b>Zapsat cenu</b> <br>3. uložit");
//    }
  }
  button [10,72,,] { tag:'cenik', title:"Zapsat cenu"
    func onclick() {
      if (!form.same()) { alert(`napřed ulož změny`); return; }
      if ((u.b.cstrava_cel || u.b.cstrava_pol) 
        && !confirm("Pozor - jsou vyplněny speciální stravy. Pokračovat?")) return;
      cena= the_soubeh
        ? php.akce2_vzorec_soubeh(the_pobyt,the_duakce,the_soubezna)
        : php.akce2_vzorec(the_pobyt);
      copy_by_name(cena,form);
      c_nocleh.change(); c_strava.change(); c_program.change(); c_sleva.change();
      poplatek_d.change(); naklad_d.change(); ini()
    } 
//    proc onclick() {
//      { not(or(u.b.cstrava_cel.get,u.b.cstrava_pol.get))
//      | or(u.b.cstrava_cel.get,u.b.cstrava_pol.get);
//        confirm("Pozor - jsou vyplněny speciální stravy. Pokračovat?")
//      };
//      { the_soubeh.get; cena.set(ask('akce2_vzorec_soubeh',the_pobyt.get,the_duakce.get,the_soubezna.get))
//      | cena.set(ask('akce2_vzorec',the_pobyt.get)) };
//      copy_by_name(cena.get,form);
//      c_nocleh.change; c_strava.change; c_program.change; c_sleva.change;
//      poplatek_d.change; naklad_d.change; ini
//    } 
  }
  // parametry ceny
  label [93,53,,] { tag:'cenik', title:"cena pro:" }
  select vzorec [143,51,148,] { tag:'cenik', type:'map0', data:pobyt.vzorec, help:"výběr vzorce pro organizátory",
    options:ms_cena_vzorec.zkratka }
  label [110,77,,] { tag:'cenik', title:"sleva:" }
  field sleva [143,74,50,] { tag:'cenik', data:pobyt.sleva, help:"Slevy pro potřebné účastníky", format:'r' }
  // zdůvodnění ceny podle vzorce nebo textem
  func rozpis_ceny() {
    if (duvod_typ) { // vlastní text
      navrh.display(0); duvod_text.display(1)
    }
    else { // podle ceníku
      navrh.display(1); duvod_text.display(0);
      cena= the_soubeh
        ? php.akce2_vzorec_soubeh(the_pobyt,the_duakce,the_soubezna)
        : php.akce2_vzorec(the_pobyt);
      navrh= cena.navrh;
    }
  }
//  proc rozpis_ceny() {
//    duvod_typ.get; navrh.display(0); duvod_text.display(1)
//  | navrh.display(1); duvod_text.display(0);
//    { the_soubeh.get; cena.set(ask('akce2_vzorec_soubeh',the_pobyt.get,the_duakce.get,the_soubezna.get))
//    | cena.set(ask('akce2_vzorec',the_pobyt.get)) };
//    navrh.set(cena.get('navrh'))
//  }
  radio duvod_typ [7,100,284,Td+-123] { data:pobyt.duvod_typ, value:'0', style:"border:1px solid gray"
    case [0,2,157,] { title:'cena podle položek ceníku', expr:'0' }
    case [158,2,122,] { title:'vlastní text s cenou', expr:'1' }
    proc onchange () { rozpis_ceny }
  }
  button [279,99,,] { tag:'cenik' style:"z-index:3" title:'[fa-upload]' help:'vložení tabulky do schránky'
    proc onclick() {
      function("clipboard_obj('div.karta_info')");
  }}
  label navrh [10,123,280,Td-146] { tag:'cenik', css:'karta_info' }
  edit duvod_text [8,119,280,Td-147] { tag:'cenik', /*type:'html',*/ data:pobyt.duvod_text }
  label doslo [300,99,4,187] { style:"border-left:2px solid grey" }
  // nestandardní strava
  func nestandard(zkratka,nazev) { var zmena:number
      has_skill("yaa+;faa+;caa+");
      Strava.dnu= u.b.dnu; // pokud jsou definovány výjimky z pravidelné stravy
      if (Strava.dnu<15) {       // 15 je maximálně možný počet řádků vyjímek ze stravy
        Strava.x= zkratka; 
        zmena= Strava.modal(240,50,`Nestandardní počet strav - ${nazev}`);
        zmena_spec_strav= zmena_spec_strav+zmena;
        echo(`zmena_spec_strav=${zmena_spec_strav} pro ${nazev}`);
      }
  }  
  button stravy     [89,Td+-5,37,] {tag:'b', title:'Str Po', style:'font-size:10px;height:19px;width:40px',
    func onclick() { nestandard('','normalnich'); }
  }
  button stravy_bm  [140,Td+-5,37,] {tag:'b', title:'Str Po', style:'font-size:10px;height:19px;width:40px',
    func onclick() { nestandard('_bm','bezmasých'); }
  }
  button stravy_bl  [190,Td+-5,37,] {tag:'b', title:'Str Po', style:'font-size:10px;height:19px;width:40px',
    func onclick() { nestandard('_bl','bezlepkových'); }
  }
  // funkce
  proc nove() {
    navrh.set(''); doslo.set('');
  }
  // parametry pro tvorbu ceny
  field luzka       [10,Td+15,11,] {tag:'b', data:pobyt.luzka}
  field pristylky   [30,Td+15,11,] {tag:'b', data:pobyt.pristylky}
  field pocetdnu    [51,Td+15,11,] {tag:'b', data:pobyt.pocetdnu}                  // sémantika: počet nocí
  field kocarek     [71,Td+15,11,] {tag:'b', data:pobyt.kocarek}
  // normální strava
  label [55,Td+-18,,] { tag:'b', title:'strava nomální' }
  field strava_cel  [94,Td+15,11,] {tag:'b', data:pobyt.strava_cel}
  field strava_pol  [112,Td+15,11,] {tag:'b', data:pobyt.strava_pol}
  // bezmasá
  label [139,Td+-18,,] { tag:'b', title:'bezmasá' }
  field strava_cel_bm  [144,Td+15,11,] {tag:'b', data:pobyt.strava_cel_bm}
  field strava_pol_bm  [162,Td+15,11,] {tag:'b', data:pobyt.strava_pol_bm}
  // bezlepková
  label [190,Td+-18,,] { tag:'b', title:'bezlepková' }
  field strava_cel_bl  [194,Td+15,11,] {tag:'b', data:pobyt.strava_cel_bl}
  field strava_pol_bl  [212,Td+15,11,] {tag:'b', data:pobyt.strava_pol_bl}
  // vlastní pečovatelé
  field svp         [240,Td+15,11,] {tag:'b', data:pobyt.svp, help:"počet dětí s vlastním pečovatelem"}
  // pouze u hlavní akce - platba za souběžnou
//  field platba_d      [283,Td+48,50,] {tag:'b,deti', data:pobyt.platba_d, format:'nr'}
//  check potvrzeno_d   [421,Td+22,73,] {tag:'b,deti', title:"potvrzeno", data:pobyt.potvrzeno_d, format:'rd'}
//  select zpusobplat_d [339,Td+48,86,] {tag:'b,deti', type:'map', data:pobyt.zpusobplat_d,
//                                     options:ms_akce_platba.zkratka, format:'nu'}
//  field datplatby_d   [430,Td+48,84,] {tag:'b,deti', type:'date', data:pobyt.datplatby_d, format:'n'}
  // rozpis plateb
  field celkem      [225,Td+91,50,] {tag:'b', format:'dr', help:'částka požadovaná po účastníkovi'}
  field poplatek_d  [225,Td+48,50,] {tag:'b,deti', format:'dr', data:pobyt.poplatek_d,
                                   help:'částka požadovaná po účastníkovi za děti'}
  field naklad      [292,Td+91,50,] {tag:'b', format:'dr',
                                   help:'rozpočtovaná částka na účastníka = poplatek+sleva-vratka'}
  field dar_dluh    [350,Td+91,50,] {tag:'b', format:'dr',
                                   help:'rozdíl mezi platbou a požadovanou částkou'}
  field naklad_d    [293,Td+48,50,] {tag:'b,deti', format:'dr', data:pobyt.naklad_d,
                                   help:'rozpočtovaná částka na děti = poplatek+sleva'}
  field dar_dluh_d  [350,Td+48,50,] {tag:'b,deti', format:'dr',
                                   help:'rozdíl mezi platbou a požadovanou částkou za děti'}
  field c_nocleh    [10,Td+91,47,] {tag:'b', data:pobyt.platba1, format:'r'}
  field c_strava    [60,Td+91,47,] {tag:'b', data:pobyt.platba2, format:'r'}
  field c_program   [110,Td+91,47,] {tag:'b', data:pobyt.platba3, format:'r'}
  field c_sleva     [160,Td+91,47,] {tag:'b', data:pobyt.platba4, format:'r'}
  field v_nocleh    [10,Td+130,47,] {tag:'b', data:pobyt.vratka1, format:'r'}
  field v_strava    [60,Td+130,47,] {tag:'b', data:pobyt.vratka2, format:'r'}
  field v_program   [110,Td+130,47,] {tag:'b', data:pobyt.vratka3, format:'r'}
  field v_sleva     [160,Td+130,47,] {tag:'b', data:pobyt.vratka4, format:'r'}
  field vratka      [225,Td+130,50,] {tag:'b', format:'dr', help:'částka vrácená účastníkovi'}
  field platba
  field platba_d
//  field platba      [283,Td+91,50,] {tag:'b', data:pobyt.platba, format:'r'}
//  select zpusobplat [339,Td+91,86,] {tag:'b', type:'map', data:pobyt.zpusobplat,
//                                   options:ms_akce_platba.zkratka, format:'u'}
//  field datplatby   [430,Td+91,84,] {tag:'b', type:'date', format:'RUr:e', data:pobyt.datplatby}
//  check avizo       [275,Td+107,50,] {tag:'b', title:"avízo", data:pobyt.avizo, format:'r'}
//  check potvrzeno   [421,Td+107,73,] {tag:'b', title:"potvrzeno", data:pobyt.potvrzeno, format:'rd'}
  // pevné texty
  label [13,32,,]   { tag:'cenik', title:'Rozpis ceny akce podle cenového vzorce akce a přehled příchozích plateb' }
  label [5,Td+158,,]  {tag:'b', title:'Cena zapsaná v evidenční kartě (použitá pro export do Excelu)',
                      style:"border-top:2px solid grey" }
  label [3,Td+0,100,] {tag:'b', title:'lůž. při. nocí koč.', help:'počet lůžek, přistýlek, nocí a kočárků'}
  label [238,Td+0,27,] {tag:'b', title:'SVP'}
  label [298,Td+75,52,] {tag:'b', title:'rozpočet'}
//  label [283,Td+76,33,] {tag:'b', title:'zaplaceno'}
  label [180,Td+40,302,21] {tag:'b,deti', css:'karta', style:"z-index:0"}
  label [190,Td+53,20,] {tag:'b,deti', title:'^Děti', style:"color:white"}
//  label [340,Td+76,71,] {tag:'b', title:'způsob platby'}
//  label [431,Td+76,51,] {tag:'b', title:'dne'}
  label [16,Td+75,,] {tag:'b', title:'nocleh'}
  label [56,Td+75,,] {tag:'b', title:'+ strava'}
  label [107,Td+75,,] {tag:'b', title:'+ program'}
  label [163,Td+75,,] {tag:'b', title:'- dotace' help:'celková sleva'}
  label [221,Td+75,70,] {tag:'b', title:'= k zaplacení'}
  label [16,Td+115,,] {tag:'b', title:'nocleh'}
  label [56,Td+115,,] {tag:'b', title:'+ strava'}
  label [107,Td+115,,] {tag:'b', title:'+ program'}
  label [163,Td+115,,] {tag:'b', title:'- dotace' help:'zrušená sleva'}
  label [225,Td+115,70,] {tag:'b', title:'= k vrácení'}
  label [350,Td+75,,] {tag:'b', title:'+dar -dluh'}
  label frame [0,16,873,min_h-152] { css:'ae_work'}
  // ----------------==> více plateb
  var uhrady_n=0, 
      uhrady_for=0  // ochrana proti násobnému vstupu do uhrady_load při rychlém posuvu v browse
  func uhrady_load() { var uhrady:object, uhrada:object, u:ezer
    if (uhrady_for) return;
    uhrady_for= the_pobyt;
    uhrady_lst.init(); uhrady_n= 0; 
    uhrady= php.akce2_uhrady_load(the_pobyt);
    if (uhrady.pocet) {
      copy_by_name(uhrady.seznam,uhrady_lst);
      uhrady_n= uhrady.pocet;
    }
    else {
      uhrady_add(); 
    }
    for (u of uhrady_lst) {
      u.display(the_soubeh==1,'deti'); // když jsou odděleny platby za děti
    }
    uhrady_for= 0;
  }
  func uhrady_save() { var uhrada:ezer, i:number, uhrady:object
    if (uhrady_lst.changed()) {
      uhrady= {};
      copy_by_name(uhrady_lst,uhrady);
      php.akce2_uhrady_save(the_pobyt,uhrady);
      uhrady_lst.plain();
    }
  }
  func uhrady_add() { var Ln:ezer
    uhrady_n= uhrady_lst.add(); 
    Ln= uhrady_lst[uhrady_n];
    Ln.u_poradi= php.akce2_uhrady_new(the_pobyt);
    Ln.display(the_soubeh==1,'deti'); // když jsou odděleny platby za děti
  }
  label [313,91,53,14] {title:'zaplaceno'}
  label [373,91,73,14] {title:'způsob platby'}
  label [460,91,54,14] {title:'den platby'}
  label [545,91,61,14] {title:'stav platby'}
  label [618,91,61,14] {tag:'deti', title:'platba za'}
  list uhrady_lst [308,100,360,190] { rows:25
//    label  u_index [0,14,2,17] // u_index == uhrada.u_poradi + 1
    label  u_poradi [0,14,2,17] 
    field  u_castka [12,10,40,] {format:'r', help:'vratky se znaménkem -'}
    select u_zpusob [60,10,85,] {type:'map0', options:ms_akce_platba.zkratka}
    field  u_datum  [145,10,85,] {type:'date', format:'r'}
    select u_stav   [230,10,80,] {type:'map', options:ms_platba_stav.zkratka}
    select u_za     [310,10,45,] {tag:'deti', type:'map', options:uhrada_za.zkratka}
  }
  // t = pracovní poznámka
  edit  p_pracovni [308,Td-7,303,60] {tag:'b', data:pobyt.pracovni, skill:'yaa|yaa:t;faa|faa:t;caa|caa:t'
      title:'^(pracovní poznámka)' }
}
//map uhrada_stav= "i,zkratka;0:-,1:avizo,2:zaplaceno,3:potvrzeno,4:vráceno" 
map uhrada_za=   "i,zkratka;0:pár,1:děti" 
# -----------------------------------------------------------------------------------------==> CMD_P
# uložení změn v platbách
form _cmd_p [,,623,30] { css:'ae_work'
  // Zpět a Uložit
  label  [496,0,125,30] { css:'ae_parm', skill:'yaa+;faa+;caa+' }
  button [503,6,,] {title:'[fa-undo] Zpět',  help:'Neměnit změněné platby', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    func onclick() {
      // uvolnění zámku a potlačení ochrany proti neuložené změně
      php.table_lock('off','pobyt',the_pobyt);
      pla.plain();
      pla.zmena_spec_strav= 0;
      reload(the_pobyt);
  } }
  button [560,6,,] {title:'[fa-save] Uložit',  help:'Uložit změny v platbách', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    func onclick() { 
      php.table_lock('off','pobyt',the_pobyt);
      pla.zmena_spec_strav= 0;
      if (the_pobyt && (!pla.same())) {
        pla.save(1); pla.uhrady_save(); pla.load();
        u.b.browse_row();
        pla.ini();
      }
      reload(the_pobyt);
    }
  }
  # potvrzení platby zasláním mailu
  label  [3,0,334,30] { css:'ae_parm', skill:'yaa+;faa+;caa+' }
  button [11,6,,] { title:"[fa-send-o] Potvrdit přijetí platby",
    help:'poslání mailu o přijetí platby podle vzoru v Maily akce'
    func onclick() { var y:object, from:text, name:text, i:number, Ln:ezer
      clear();
      echo(`uhrady_n=${pla.uhrady_n}`);
      if (!pla.same()) alert("nejprve je třeba uložit změněné údaje") 
      else {
        if (pla.uhrady_n>1) 
          i= prompt2("napiš pořadové číslo platby",1)
        else {
          Ln= pla.uhrady_lst[0];
          i= Ln.u_poradi;
        }
        from= sys('user','options','email'); name= sys('user','options','vyrizuje');
        y= php.mail2_vzor_pobyt2(the_pobyt,'potvrzeni_platby2',i,from,name,0);
        if (y.err) alert(y.err);
        elseif (confirm(y.msg)) {
          y= php.mail2_vzor_pobyt2(the_pobyt,'potvrzeni_platby2',i,from,name,1);
          if (y.err) alert(y.err) 
          else { pla.load(the_pobyt); alert(y.msg) }
        }
      }
    }
//    proc onclick() { var y:object, from:text, name:text
//      clear;
//      [ pla.datplatby.get | pla.datplatby.set(now); pla.datplatby.change ];
//      not(pla.same); alert("nejprve je třeba uložit změněné údaje")
//    | from.set(sys('user','options','email'));
//      name.set(sys('user','options','vyrizuje'));
//      y.set(ask('mail2_vzor_pobyt',the_pobyt.get,'potvrzeni_platby',from,name,0));
//      y.err; alert(y.err);
//    | confirm(y.msg);
//      y.set(ask('mail2_vzor_pobyt',the_pobyt.get,'potvrzeni_platby',from,name,1));
//      { y.err; alert(y.err) | pla.load(the_pobyt.get); alert(y.msg) }
//    }
  }
  # přidání řádku do seznamu plateb
  button [154,6,,]  {title:"[fa-plus-square-o] Další platba", help:"přidá pro ni nový řádek"
    func onclick() { 
      pla.uhrady_add();
    }
  }
  button [247,6,,] { title:"[fa-times fa-red] Zruš platbu" help:"napřed se zeptá na číslo platby"
    func onclick() { var i:number, u:array
      i= 1;
      if (pla.uhrady_n>1) i= prompt2("napiš pořadové číslo rušené platby",1);
      u= php.select('id_uhrada,u_castka','uhrada',`id_pobyt=${the_pobyt} AND u_poradi=${i}`);
      if (u[0] && confirm(`opravdu zrušit zaplacení ${u[1]} Kč?`)) {
        php.query(`DELETE FROM uhrada WHERE id_uhrada=${u[0]}`);
        reload(the_pobyt);
      }
  }}
  # uhrazení členského příspěvku na akci do pokladny
  label  [349,0,136,30] { css:'ae_parm', skill:'yaa+' }
  button [356,6,,] {title:'[fa-coffee] členský příspěvek',  skill:'yaa+|yaa+'
      help:'pokladna: zaplatit členský příspěvek',
    func onclick() { var ret: object
      ret= php.akce2_platba_prispevek1(the_pobyt);
      if (ret.platit) {
        if (confirm(ret.msg)) {
          ret= php.akce2_platba_prispevek2(the_pobyt);
          alert(ret.msg); 
        }
      }
      else alert(ret.msg);
    }
  }
}
# -------------------------------------------------------------------------------------==> _AKTIVITY
form _aktivity0 [,,623,] { style:'height:fit-content'
  label frame [0,16,873,min_h-152] { css:'ae_work'}
}
form _aktivity [,,623,] { style:'height:fit-content'
  var ido: number
  field jme [10,34,200,] { format:'o' }
  button [160,20,,] { title:'^evidence', css:'db_evidence',
    proc onclick() { evi.evid_osoba(ido.get) } }
  view a: table akce
  view p: table pobyt { join:'ON a.id_duakce=p.id_akce' }
  view s: table spolu { join:'USING (id_pobyt)' }
  view o: table osoba { join:'USING (id_osoba)' }
  browse akc [ 0,60,,] { rows:15, qry_rows:1, css_rows:"sty,1:neucast,2:jakodite"
    show ida { data:a.id_duakce }
    show idp { data:p.id_pobyt }
    show ids { data:s.id_spolu }
    show org { data:a.access }
    show sty { expr:"IF(a.zruseno,1,IF(FLOOR(IF(MONTH(o.narozeni),IF(MONTH(o.narozeni),DATEDIFF(a.datum_od,o.narozeni)/365.2425,YEAR(a.datum_od)-YEAR(o.narozeni)),YEAR(a.datum_od)-YEAR(o.narozeni)))<18,2,0))" }
    show rok  [,, 30,] { title:'rok', expr:"YEAR(a.datum_od)", format:'q*s-'
      css_cell:'org,0:,1:ezer_ys,2:ezer_fa,3:ezer_db' }
    show akce [,,150,] { title:'název', data:a.nazev, format:'q*s' }
    show fce  [,, 30,] { title:'fce', help:"u dětí jde o funkci rodičů"
      data:p.funkce, map_pipe:ms_akce_funkce.zkratka }
    show jak  [,, 30,] { title:'jak', help:"'dítě' znamená věk pod 18 let"
      expr:"IF(FLOOR(IF(MONTH(o.narozeni),DATEDIFF(a.datum_od,o.narozeni)/365.2425,YEAR(a.datum_od)-YEAR(o.narozeni)))<18,IF(s.s_role=4,'pom.p','dítě'),'')" }
    proc onsubmit() {
      accessed(org.get); //echo('přepnuto na akci ',akce.get);
      akce_show(ida.get,idp.get,conc(akce.get,' ',rok.get),'AKTIVITA')
    | warning("nemáte oprávnění přepnout na akci této organizace")  }
  }
  proc ucasti(id_osoba) {
    form.display(id_osoba);
    id_osoba; ido.set(id_osoba);
    jme.set(ask('select',"CONCAT(prijmeni,' ',jmeno)",'osoba',conc('id_osoba=',id_osoba)));
    akc.browse_load(conc('a.spec=0 AND s.id_osoba=',id_osoba),"datum_od DESC")
  }
}
# ------------------------------------------------------------------------------------==> _DOKUMENTY
form _documents [,,623,] { style:'height:fit-content' // ukládají se na H: tedy mimo dosah http
  const folder= 'pobyt/'
  proc ukaz() { // ukáže soubory aktuálního pobytu
    jmena.set(conc("dokumenty svázané s pobytem <b><big>",u.b._nazev.get," ",u.b._jmena.get,"</big></b>"));
    drop.init(folder.get,'H:',conc('(.*)_',the_pobyt.get));
    drop.lsdir;
  }
  label jmena [15,30,595,]
  label [15,51,610,] { title:'k těmto dokumentům lze přidat další přetáhnutím myší; manipulace s dokumenty je přes kontextové menu (pravé ucho myši)' }
  label drop [15,74,595,285] { type:'drop'
    proc ondrop(f) {
      gt(f.size,5242880); alert('odmítnuto ',f.name,' má více jak 5MB');
      return(0)
    | return(conc(f.name,'_',the_pobyt.get)) // přejmenování - přidání id_pobyt za jméno
    }
    proc onload(f) { warning("přeneseno:",f.name); drop.lsdir } // po dokončení přenosu
    proc onerror(e) { warning(e.msg); return(1) } // vrácení 0 způsobí standardní hlášení chyby
    proc onmenu(op,title,ref) { // op=remove|remove-all
      [ eq(op,'viewer'); [ function('ref',"window.open(ref,'viewer')",ref) ]
      | eq(op,'remove');                                 // odebrání souboru
        [ confirm("Opravdu smazat ",title," ?");
          warning(ask('drop_unlink',folder.get,ref,'H:')) ]
      | warning('zatím neimplementovaná operace') ];
      drop.lsdir;
      u.b.browse_refresh(u.b.key_pobyt.get);
    }
  }
  label frame [0,16,873,min_h-152] { css:'ae_work'}
}
# ========================================================================================> SKUPINKY
# zobrazí celou historii skupinek na LK
panel Skupinky [,,400,400] {type:'popup', title:'Historie skupinek'
  proc historie(idr) { var y:object
    panel.popup;
    y.set(ask("akce2_skup_paru",idr));
    f.info.set(y.html);
  }
  use f: form _f [0,0,,]
  form _f {
    label info [0,0,400,400] { style:'background:white;overflow:auto' }
  }
}
# ==========================================================================================> STRAVA
# nastaví položky cstrava_pol{x} a cstrava_cel{x} pro x=|_bm|_bl
panel Strava [,,320,280] {type:'popup', title:'Nestandardní počet strav - xxx'
  var x='',             // postfix položek cstrava_cel,cstrava_pol,strava_cel,strava_pol
      strava_cel_x: number,
      strava_pol_x: number,
      cstrava_cel_x: text,
      cstrava_pol_x: text,
      dnu: number,
      arr: object,
      prvni: text       // první strava na akci
  use n: form nastaveni [5,5,,]
  proc onfocus() {
    var cela: text  // řetězec strav: sov.... po dnech
    var polo: text  // řetězec strav: sov.... po dnech
    // zjištění hodnot podle postfixu
    strava_cel_x.set(u.b.part(conc('strava_cel',x.get)).get);
    strava_pol_x.set(u.b.part(conc('strava_pol',x.get)).get);
    cstrava_cel_x.set(u.b.part(conc('cstrava_cel',x.get)).get);
    cstrava_pol_x.set(u.b.part(conc('cstrava_pol',x.get)).get);
    //
    prvni.set(substr(lst.the_akce.strava_oddo.get,0,1));    // první strava akce
    [ cela.set(cstrava_cel_x.get); cela.get | cela.set(strava_def(strava_cel_x.get)) ];
    [ polo.set(cstrava_pol_x.get); polo.get | polo.set(strava_def(strava_pol_x.get)) ];
    n.L.init;
    n.cele.set(strava_cel_x.get); n.polo.set(strava_pol_x.get);
    arr.set(ask('akce2_strava_denne',u.b.datum_od.get,dnu.get,cela.get,polo.get));
    each(arr.get,den);
  }
  proc strava_def(strav) {
    return(conc('0',cconc(eq(prvni.get,'o'),strav,'0'),strav,
      repeat(strav,multiply(3,sum(dnu.get,-2))),
      strav,strav,'0'));
  }
  // přidání řádku pro i-tý den
  proc den (p,i) {
    [ n.L.add ];
    n.L.part(i).part('den').set(p.den);
    strava_set(i,'sc',p.sc,n.cele.get);
    strava_set(i,'sp',p.sp,n.polo.get);
    strava_set(i,'oc',p.oc,n.cele.get);
    strava_set(i,'op',p.op,n.polo.get);
    strava_set(i,'vc',p.vc,n.cele.get);
    strava_set(i,'vp',p.vp,n.polo.get);
  }
  // zobrazení stravy s pro i-tý den
  proc strava_set(i,s,val,norm) {
    var s1:text
    s1.set(substr(s,0,1));
    { or(and(eq(i,0),cconc(eq(prvni.get,'o'),eq(s1,'s'),eq(s1,'s','o')))   // první den
        ,and(eq(i,sum(dnu.get,-1)),eq(s1,'v')));                        // poslední den
      n.L.part(i).part(s).enable(0);
    | n.L.part(i).part(s).set(val);
      not(eq(val,norm));
      n.L.part(i).part(s).set_css('red')
    }
  }
  proc reset(co,jak) {
    each(arr.get,reset_den,co,jak);
  }
  proc reset_den(p,i,co,jak) {
    strava_set(i,co,jak,jak)
  }
  # ---------------------------------------------------------==> . počty strav
  form nastaveni [0,0,320,200] {
    // sada návratu na default
//    button [0,19,30,16] { title:'[fa-arrow-down][fa-arrow-down][fa-arrow-down]'
//      proc onclick() {
//        reset('sc',n.cele.get); reset('oc',n.cele.get); reset('vc',n.cele.get);
//        reset('sp',n.polo.get); reset('op',n.polo.get); reset('vp',n.polo.get);
//    }}
    label  [17,0,,] { title:'počty strav'}
    label  [7,13,,] { title:'celých'}
    field cele [15,27,13,] { format:'tf', help:'počty celých strav, zápis se provede šipkami' }
//    button reset_cele [ 55,20,15,16] { title:'[fa-arrow-down]', style:'width:17px;padding:0'
//      proc onclick() {
//        reset('sc',n.cele.get); reset('oc',n.cele.get); reset('vc',n.cele.get);
//    }}
    label  [41,13,,] { title:'dětských'}
    field polo [51,27,13,] { format:'tf', help:'počty dětských strav, zápis se provede šipkami' }
    //, proc onchange { reset_polo.onclick }}
//    button reset_polo [ 99,19,15,16] { title:'[fa-arrow-down]', style:'width:17px;padding:0'
//      proc onclick() {
//        reset('sp',n.polo.get); reset('op',n.polo.get); reset('vp',n.polo.get);
//    }}
    label  [96,13,,] { title:'kdykoliv'}
    button [98,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('sc',n.cele); reset('oc',n.cele); reset('vc',n.cele);}}
    button [118,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('sp',n.polo); reset('op',n.polo); reset('vp',n.polo); }}
    label  [154,13,,] { title:'snídaně'}
    button [156,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('sc',n.cele); }}
    button [176,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('sp',n.polo); }}
    label  [216,13,,] { title:'oběd' }
    button [214,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('oc',n.cele); }}
    button [234,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('op',n.polo); }}
    label  [268,13,,] { title:'večeře'}
    button [270,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('vc',n.cele); }}
    button [290,26,15,16] { title:'[fa-arrow-down]', style:'padding:0'
      func onclick() { reset('vp',n.polo); }}
    // dny
    list L [0,50,320,200] {rows:22
      field den [4,0,140,16] {format:'o' }
      field sc  [155,0,15,] {format:'f:e' }
      field sp  [175,0,15,] {format:'f:e' }
      field oc  [213,0,15,] {format:'f:e' }
      field op  [233,0,15,] {format:'f:e' }
      field vc  [269,0,15,] {format:'f:e' }
      field vp  [289,0,15,] {format:'f:e' }
    }
    // ukončení
    label  [198,249,125,30] { css:'ae_parm', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+' }
    button [205,255,,] { title:'[fa-undo] Zpět', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
      func onclick() { pla.zmena_spec_strav= 0; panel.hide(0)
    }}
    var scele: text
    var spolo: text
    button [262,255,,] { title:'[fa-save] Uložit', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
      proc onclick() {
        scele.set(''); spolo.set('');
        each(L,save_den);
        ask('akce2_strava_denne_save',u.b.key_pobyt.get,dnu.get,x.get,
          scele.get,strava_cel_x.get,cstrava_cel_x.get,
          spolo.get,strava_pol_x.get,cstrava_pol_x.get,prvni.get);
        pla.zmena_spec_strav.set(0);
        panel.hide(1); // asi byla změna
        reload(the_pobyt.get);
    }}
    proc save_den (p,i) {
      scele.set(conc(scele.get,pocet_strav(i,'sc'),pocet_strav(i,'oc'),pocet_strav(i,'vc')));
      spolo.set(conc(spolo.get,pocet_strav(i,'sp'),pocet_strav(i,'op'),pocet_strav(i,'vp')));
    }
    proc pocet_strav(i,f) {
      var x: text
      x.set(L.part(i).part(f).get);
      return(cconc(x,x,'0'));
    }
  }
}