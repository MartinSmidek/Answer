#pragma library
#pragma test
# ------------------------------------------------------------------------------------------------ #
# Systém Ans(w)er - modul Akce - verze 2                                                           #
#                                                                                                  #
#                                                   (c) 2008-2018 Martin Šmídek <martin@smidek.eu> #
# ------------------------------------------------------------------------------------------------ #

# globální proměnné pro modul Databáze

// seznam států, (později) naplněný při startu z mapy map_stat
var staty='CZ,SK,A,BG,CA,D,EE,FI,GB,H,I,IRL,IE,LT,LV,NL,PL,UA,US,?' 

# ------------------------------------------------------------------------------------------==> stav
# kódy pro access a org
const org_ys=1,
      org_fa=2,
      org_cr=4,
      org_ms=8,
      org_ms50=16,
      org_ds=64        
        
# dotaz na datovou oprávněnost
var has_access=0                // maximální datová práva přihlášeného uživatele
var my_access=0                 // zvolená datová práva přihlášeného uživatele
var my_org=0                    // datová příslušnost přihlášeného uživatele
var team_access= 0              // 1 pokud má uživatel skills=T tj. omezený přístup je ke svým akcím
        
# hodnoty pamatované v cookies
var the_source: text            // forma seznamu akcí google|sey|dum                       -- cookie
var the_duakce: number          // pracovní akce: id_akce (id_dukace)
var the_akce_ys: number         // poslední pracovní akce Setkání                          -- cookie
var the_akce_fa: number         // poslední pracovní akce Familia                          -- cookie

# hodnoty udržované funkcí akce_choose
var the_garant: number          // pracovní akce: 0: uživatel nemá oprávnění 'g', 1: má, 2: je garantem akce
var the_tym: number             // pracovní akce: sezm id_user týmu akce
var the_org: number             // pracovní akce: organizace
var the_ms: number              // pracovní akce: letní kurs nebo obnova
var the_druh: number            // pracovní akce: druh podle #ms_akce_typ
var the_title: text             // pracovní akce: název do titulků
var the_rok: number             // pracovní akce: rok konání
var the_hnizda: text            // pracovní akce: seznam hnízd nebo nic
var the_wordpress: text         // pracovní akce: vazba na přihlášky přes Wordpress
var the_mezinarodni: text       // pracovní akce: akce má účastníky ze světa
var the_soubeh: number          // 0=normální akce, 1=hlavní akce, 2=souběžná akce
var the_hlavni: number          // 0=normální akce, id=akce k the_duakce hlavní
var the_soubezna: number        // 0=normální akce, id=akce s the_duakce souběžná
var the_order: number           // 0=normální akce, jinak ID objednávky
var the_cenik: text             // pracovní akce: 1=má ceník, 2=ceník Domu setkání
var the_cenik_verze: text       // ... verze ceníku: 0=2016, 1=2017, 2=2025
var the_cena:  number           // pracovní akce: má pevnou cenu pro dospělého
var the_datum_od: text, the_datum_do: text, 
    the_strava_oddo: text       // pracovní akce: doba akce (pro pečouny)
var form_mode: text             // informace pro zobrazení formulářů: new|show
        
# komunikační proměnné mezi moduly
var hodin_zmeny= 0              // zobrazení změn za poslední hodiny a výpis čerstvých změn

# ----------------------------------------------------------------------------------==> inicializace
# inicializace modulu Databáze - nastavení globálních proměnných the_* tohoto modulu
var dirty=0,                     // 1 => byla ukončena inicializace modulu
    virgin_track=1    
proc onstart() { dirty.get | akce_onstart }
func akce_onstart() { var m:object
  if (dirty) return;
  echo('------------------- ONSTART begin');
  // pokračuj jen při inicializaci nebo pokud došlo k významné změně
  spinner(1);
  dirty= 1;
  has_access= sys('user','has_access');
  my_access= sys('user','access');
  my_org= sys('user','org');
  // pro správce Domu setkání přidej org_ds
  if (has_skill('yd2') && my_access<org_ds) my_access= my_access | org_ds;
  m= match('(?:^|\s)(t|T)(?:\s|$)',sys('user','skills'));
  team_access= !m ? 0 : (m.s1=='T' ? 2 : 1);
  echo(`team_access=${team_access}, my_org=${my_org}, my_access=${my_access}, get_cookie(${sys('root')}_akce',0);`);
//  my_org= my_access==3 ? sys('user','org') : my_access;  ????????? 22/5/2024
  // hodnoty zapamatované pro navázání na předchozí session
  the_source= get_cookie(`${sys('root')}_akce_source`,'sey');
  the_duakce= get_cookie(`${sys('root')}_akce`,0);
  // příprava zobrazení v AKCE - volá akce_choose
  if ( my_org < 4 ) {
    the_akce_ys= get_cookie(`${sys('root')}_akce_ys`,0);
    the_akce_fa= get_cookie(`${sys('root')}_akce_fa`,0);
    if ( !has_skill('mrop')) {    // uživatel s 'mrop' nepotřebuje seznam akcí
      lst.akce_work(the_source=='dum' ? the_duakce : (my_org==1 ? the_akce_ys : the_akce_fa));
    }
    echo('---------------- akce_onstart: the_akce_xx=',the_akce_ys,',',the_akce_fa,', the_source=',the_source);
  }
  else {
    echo('akce_onstart: the_duakce=',the_duakce);
    the_source= 'sey';
    lst.akce_work(the_duakce)
  }
  spinner(0);
  echo('------------------- ONSTART end');
}
# změna datového přístupu
proc reaccess() { #==> . reaccess (jen pro YS+FA)
  lt(my_org.get,4);
  has_access.set(sys('user','has_access'));
  my_access.set(sys('user','access'));
  my_org.set(cconc(eq(my_access.get,3),sys('user','org'),my_access.get));
  echo('has_access=',has_access.get,', my_access=',my_access.get,', my_org=',my_org.get);
  [ has_skill('yaa;faa;caa'); lst.reaccess ];
  [ has_skill('yaa;faa;caa'); ucast.reaccess ];
  [ has_skill('yaa;faa;caa#crz'); pece.reaccess ];
  [ has_skill('yaa;faa;caa'); tisk.reaccess ];
  [ has_skill('yam;fam;cam'); maia.reaccess ];
  [ has_skill('yae;fae;caa;mrop'); evi.reaccess ];
  [ has_skill('yam;fam;cam'); mai.reaccess ];
  [ has_skill('yaa;faa;caa'); sta.reaccess ];
  elim.reaccess;
}
# ----------------------------------------------------------------------------==> globální procedury
# vrací objekt obsahující aktuálně vybrané záznamy
# {lst:id_akce, ucast:{id_pobyt,id_rodina,id_osoba}, evi:{id_rodina,id_osoba}}
func curr() { var _curr:object
  _curr= {lst:{akce:the_duakce},ucast:ucast.curr()};
  _curr.evi= evi.curr();
  _curr.dum= {order:the_source=='dum' ? the_order : 0};
  return _curr;
} 
# nastavení akce jako the_duakce, dopočítání stavových hodnot
func akce_choose(id_akce) { var a:object, ok:number
  ok= 0;
  a= php.akce2_id2a(id_akce); // nastaví i nulové hodnoty pro id_akce=0
  // ověříme právo přístupu pro tým
  if (!team_access || (team_access && match(`\b${sys('user','id_user')}\b`,a.tym))) {
    the_duakce= id_akce;
    echo('akce_choose: the_duakce=',the_duakce);
    the_rok= a.rok;       the_title= a.title;       the_soubeh= a.soubeh;
    the_hnizda= a.hnizda; the_wordpress= a.web_wordpress; the_mezinarodni= a.mezinarodni;
    the_hlavni= a.hlavni; the_soubezna= a.soubezna; the_order= a.id_order;
    the_cenik= a.cenik;   the_cenik_verze= a.cenik_verze;
    the_cena= a.cena;     the_org= a.org;           the_ms= a.ms;    the_druh= a.druh;
    the_garant= a.garant; the_tym= a.tym;
    the_datum_od= a.datum_od; the_datum_do= a.datum_do; the_strava_oddo= a.strava_oddo;
    ms_akce_hnizda.selects('hnizdo,zkratka,nazev',php.akce2_hnizda_options(the_hnizda));
    ms_akce_hnizda_plus.selects('hnizdo,zkratka,nazev',php.akce2_hnizda_options(the_hnizda,1));
    ms_akce_hnizda_tisk.selects('hnizdo,zkratka,nazev',php.akce2_hnizda_options(the_hnizda,2));
    ok= 1;
  }
  echo(`-------------------------------- akce_choose(${id_akce}) ... the_rok=${the_rok}`);
  return ok;
}
//proc akce_choose(id_akce) { var a:object
//  the_duakce.set(id_akce);
//  a.set(ask('akce2_id2a',id_akce)); // nastaví i nulové hodnoty pro id_akce=0
//  
//  the_rok.set(a.rok);       the_title.set(a.title);       the_soubeh.set(a.soubeh);
//  the_hnizda.set(a.hnizda); the_wordpress.set(a.web_wordpress); the_mezinarodni.set(a.mezinarodni);
//  the_hlavni.set(a.hlavni); the_soubezna.set(a.soubezna);
//  the_cenik.set(a.cenik);   the_cenik_verze.set(a.cenik_verze);
//  the_cena.set(a.cena);     the_org.set(a.org);           the_ms.set(a.ms);    the_druh.set(a.druh);
//  the_garant.set(a.garant);
//  ms_akce_hnizda.selects('hnizdo,zkratka,nazev',ask('akce2_hnizda_options',the_hnizda.get));
//  ms_akce_hnizda_plus.selects('hnizdo,zkratka,nazev',ask('akce2_hnizda_options',the_hnizda.get,1));
//  ms_akce_hnizda_tisk.selects('hnizdo,zkratka,nazev',ask('akce2_hnizda_options',the_hnizda.get,2));
//}
proc accessed(org) {
  return(function('x','y','return x&y;',org,my_access.get));
}
proc spinner(on) {
  [ function('on',"waiting(on);",on) ];
}
# ==========================================================================================> . AKCE
panel lst {type:'right', _sys:'*', title:'[fa-futbol-o] AKCE', include:'onload,db2.akce2.lst',
  skill:'yaa;faa;caa'
  proc reaccess() {}
  use the_akce: form _the_akce         // zatím nezobrazená data nastavené akce s klíčem id_duakce
  proc akce_work(id) {}                // nastaví akci jako vybranou
  proc akce_show(ida) {}               // 
}
panel ucast {type:'plain', format:'d', _sys:'*', title:"Účastníci", include:'onload,db2.akce2.ucast',skill:'yaa;faa;caa'
  var the_duakce_local:number    // vynulovani při změně v akci vynutí při fokus překreslení
  func curr() {return {pobyt:0,rodina:0,osoba:0}}
  proc reaccess() {}
  proc ucast_hnizda() {}                        // nastavení pro akci v hnízdech
  proc ucast_pobyt() {}                         // ukázání pobytu na běžné akci
  proc ucast_pobyt_akce() {}                    // ukázání pobytu na dané akci
  proc clear_ucast2() {}                        // volání zajistí obnovu při onfucus
  #proc init_ucast2() {}
  proc akce_show() {}
  proc osoby_show() {}                          // obnova údajů o osobě (osobách)
  proc rodina_show() {}                         // obnova údajů o rodině
  proc ucast_selected() {}                      // seznam vybraných účastníků
  proc z_change() {}
}
panel pece {type:'plain', _sys:'*', title:'Pečouni', include:'onload,db2.akce2.pece',
    skill:'yaa;faa;caa#T;e'
  proc reaccess() {}
  proc init_pece() { alert('napřed klikni na Databáze|Pečouni') }
  proc pece_hnizda() {}                         // nastavení pro akci v hnízdech
  proc akce_show() { alert('napřed klikni na Databáze|Pečouni') }
}
panel tisk [,,,] {type:'right', _sys:'*', title:'Výpisy akce', include:'onload,db2.akce2.tisk',skill:'yaa;faa;caa'
  proc reaccess() {}
  proc tisk_hnizda() {}                          // nastavení pro akci v hnízdech
  proc ukaz_vypis() {}                          // otevření Výpisy akce na daném výpisu
}
panel maia {type:'right', title:'Maily akce', _sys:'*', include:'onclick,db2.akce2.maia', skill:'yam;fam;cam;T'
  proc reaccess() {}
  proc mail_hnizda() {}                          // nastavení pro akci v hnízdech
}
# ======================================================================================> . EVIDENCE
panel evi [,,,] {type:'right', _sys:'*', title:'[fa-briefcase] EVIDENCE', include:'onload,db2.akce2.evi', skill:'yae;fae;caa;mrop#T',
  func curr() {return {rodina:0,osoba:0}}
  proc reaccess() {}
  proc rodina_show() {}
  proc osoby_show() {}
  proc evid_osoba(_ido) { }                     // zobrazení osoby v evidenci
  proc evid_rodina(_idr) { }                    // zobrazení rodiny v evidenci
  proc ulozen_gmail() { }
}
panel mai {type:'right', title:'Maily evidence', _sys:'*', include:'onclick,db2.akce2.mai',
  skill:'yam;fam;cam#T'
  proc reaccess() {}
}
panel dop {type:'right', title:'Dopisy', _sys:'*', include:'onclick,db2.akce2.dop', skill:'yaed#T'  }
panel sta {type:'right', title:'Výpisy evidence', _sys:'*', include:'onclick,db2.akce2.sta', skill:'yaa;faa;caa#T'
  proc reaccess() {}
}
panel grf {type:'right', title:'Grafy', _sys:'*', include:'onclick,db2.akce2.grf', skill:'yaa;faa;caa#T'
  proc reaccess() {}
}
panel cnf {type:'right', title:'[fa-retweet] KONFERENCE', _sys:'*', include:'onclick,db2.akce2.cnf', skill:'mrop;dk#T'
  proc reaccess() {}
}
# ==========================================================================================> . ELIM
panel elim [0,0,975,617] { type:'popup', title:'Duplicity', format:'c', par:°{close:'no'},
    include:'onload,db2.akce2.elim'
  proc reaccess() {}
  proc osoby  (ido,jmeno,prijmeni) {}           // sjednocení dvou osob
  proc osoby_lst (ido,idos) {}                  // sjednocení navržených kandidátů na duplicitu
  proc osoby_12(ido1,ido2) {}                   // sjednocení 2 navržených kandidátů na duplicitu
  proc rodiny (idr,nazev) {}                    // sjednocení dvou rodin
  proc rodiny_12 (idr1,idr2) {}                 // sjednocení 2 navržených kandidátů na duplicitu
  proc rodiny_lst (idr,idrs) {}                 // sjednocení navržených kandidátů na duplicitu
  proc cleni  (idr) {}                          // sjednocení členů dané rodiny
}
# ==========================================================================================> COMMON
# ------------------------------------------------------------------ _the_akce
# zatím nezobrazená data nastavené akce s klíčem id_duakce
form _the_akce {
  field id_duakce   { data:akce.id_duakce }
  field nazev       { data:akce.nazev }
  field datum_od    { data:akce.datum_od }
  field datum_do    { data:akce.datum_do }
  field strava_oddo { data:akce.strava_oddo }
}
# ------------------------------------------------------------------ right
form right [,,*,*] { style:"height:calc(100% - 61px)"
  label head [0,0,*,50]  { title:'' style:'padding-right:10px'}
  label msg  [0,35,*,20] { title:'' style:'padding-right:10px'}
  label note [0,57,,]    { title:'' style:'padding-right:10px;width:calc(100% - 30px);overflow:auto'}
  proc fill(x,y) {
    [ x; head.set(conc("<div class='karta'>",x,"</div>")) ];
    [ y; note.set(y) ]
  }
  proc append(x) { note.get; note.set(conc(note.get,'<br>',x)) | note.set(x) }
  func header(i:ezer) { var i_owner:ezer
    clear(); i_owner= i.owner();
    msg= ''; note= '';
    head= replace_fa(`<div class='karta'>${i_owner.title} - ${i.title}</div>`);
  }
}
# =========================================================================================> TABULKY
table _file_ {
  text fid
  date fdate
  text fname
  text ftype
  text finfo
}
table _cis { key_id:'id_cis'
  number id_cis
  text druh,
  text data,
  text zkratka,
  number poradi,
  text hodnota,
  text popis,
  text barva,
  text ikona
}
table _user { key_id:'id_user', db:'ezer_system'
  number id_user
  text deleted,
  text abbr,
  text skills,
  text options { help:'privátní nastavení|ve formátu JSON' }
  text username,
  text password,
  number state,
  text forename,
  text surname,
  text login,
  text history,
  text sess_id,
  text sess_time,
  text sess_data,
  number zmena_kdo,
  date zmena_kdy {  },
}
table _track { key_id:'id_track'
  number id_track { key:'primary' },
  date kdy { help:'datum změny' },
  text kdo { help:'pachatel' },
  text kde { help:'tabulka' },
  number klic { help:'klíč' },
  text fld { help:'položka' },
  text op { help:'operace' },
  text old { help:'původní hodnota' },
  text val { help:'nová hodnota' },
}
table psc_axy { key_id:'psc'
  text psc
  number lat
  number lng
}
map akce_ucast: table _cis {where:"druh='akce_ucast'", order:'poradi', key_id:'data'}
# ------------------------------------------------------------------ pohledy
//table $osoba { key_id:'id_osoba'
//  number id_osoba
//  text tab
//  number id
//  text prijmeni
//  text jmeno
//  text rodcis
//  date narozeni
//  text ulice
//  text psc
//  text obec
//  text telefon
//  text email
//  text info
//}
table ds_osoba_copy { key_id:'id_osoba'
  number id_osoba
  text prijmeni
}
# ============================================================================================= AKCE
table akce { key_id:'id_duakce'
  number id_duakce
  number id_hlavni // 0 nebo id_duakce hlavní akce souběžné akce
  number access
  number typ
  number ma_cenik  // 1 znamená, že bereme v úvahu tabulku cenik
  number ma_cenik_verze  // podle číselníku ms_cenik_verze (0=do roku 2016)
  number ma_cenu   // 1 znamená, že bereme v úvahu položku cena (pro 1 dospělého)
  number cena      // cena akce pro dospělého (je-li ma_cenu=1)
  number spec      // 1 znamená ne-akci, starý způsob příležitostných seznamů
  number zruseno   // 1 znamená zrušenou akci se zachovanými účastniky - pro korespondenci 
  number mrop      // 1 že akce je mužskou iniciací
  number firm      // 1 že akce je mužským firmingem
  text nazev
  text misto
  number druh
  text hnizda
  number mezinarodni
  number statistika
  number poradatel
  text tym        // seznam id_user majících skill 'T' s prácem editace této akce
  date datum_od    { sql_pipe:'sql_date1'}    // SQL tvar se používá v ys.akce
  date datum_do    { sql_pipe:'sql_date1'}
  text strava_oddo { help:'2 písmena označující první a poslední stravu (sov)' }
  number ciselnik_akce
  number ciselnik_rok
  text note
  text archiv
  number web_prihlasky // setkani.org
  number web_maximum
  number web_obsazeno
  number web_kalendar  // chlapi.online 1=ukázat v kalendáři 2=ukázat jen jako rezervovaný termín
  text web_online
  text web_prihlaska   // PHP soubor realizující přihlášku
  text web_anotace
  text web_url
  text web_wordpress
}
table ds_order { // sql view on tx_gnalberice_order
  number id_order
  number id_akce
}
table prihlaska { key_id:'id_prihlaska'
  number id_prihlaska
  number id_akce
  number id_pobyt
  number id_rodina
  number id_osoba
  text email
  date open
  date close
  text stav
  text vars_json
  text errors
  text IP
  text browser
}
table pobyt { key_id:'id_pobyt'
  number id_pobyt
  number id_akce
  number i0_rodina // jen pro rodinný pobyt
  # number id_osoba -- 131004 zrušeno
  number typ            // 10,11,20,21
  number skupina
  number hnizdo // 0 nebo pořadí hnízda
  number funkce
  number prednasi      // číselník ms_akce_prednasi
  text aktivita
  date ___datplatby        { sql_pipe:'sql_date1'}
  number ___zpusobplat
  number ___platba
  number ___potvrzeno
  number ___avizo          { help:"přišlo prohlášení o platbě" }
  number naklad_d
  number poplatek_d
  date ___datplatby_d      { sql_pipe:'sql_date1'} // platba za děti v souběžné akci
  number ___potvrzeno_d
  number ___zpusobplat_d
  number ___platba_d
  text budova
  text pokoj
  number ubytovani      // číselník ms_akce_ubytovan
  number luzka
  number luzka2
  number luzka3
  number entry_id 

  // stravy a diety
  number strava_cel, number strava_pol
  number strava_cel_bm, number strava_pol_bm
  number strava_cel_bl, number strava_pol_bl
  // výjimky ze strav: číslice jsou seřazeny jako počty snídaní,obědů,večeří po dnech
  text cstrava_cel,  text cstrava_pol
  text cstrava_cel_bm,  text cstrava_pol_bm
  text cstrava_cel_bl,  text cstrava_pol_bl

  number kocarek
  text pecovatel
  text poznamka
  text pracovni
  number pristylky
  number pocetdnu       // počet nocí!
  number svp            // počet dětí s vlastním pečovatelem
  number cd
  number dorazil
  number pouze
  number akce
  // předepsaná platba
  number platba1
  number platba2
  number platba3
  number platba4
  // předepsaná vratka
  number vratka1
  number vratka2
  number vratka3
  number vratka4
  // slevy
  number sleva_zada
  text sleva_duvod
  number sleva
  number vzorec //#
  number duvod_typ	// 0: zdůvodnění podle ceníku, 1: vlastním textem
  text   duvod_text	// vlastní text zdůvodňující cenu
}
//table pobyt_wp { db:'ezer_db2', key_id:'id_pobyt_wp'
//  number id_pobyt_wp
//  number entry_id
//  number id_akce
//  number id_pobyt
//  number stav
//  text   zmeny
//}
//table wp_3_wpforms_entry_fields { db:'wordpress', key_id:'id'
//  number id
//  number entry_id
//  number field_id
//  text   value
//}
table spolu { key_id:'id_spolu'
  number id_spolu
  number id_pobyt
  number id_osoba
  number s_hnizdo
  number s_role   // #ms_akce_s_role -- role osoby na akci
  number kat_nocleh
  number kat_jidla
  number kat_porce
  number kat_dieta
  number skupinka
  text poznamka
  number s_rodici
  number p_kc_strava
  number pulstrava
  number pecovane // id_osoba pečovaného dítěte
  number pfunkce  // #ms_akce_pfunkce -- funkce pečovatelská, jinak 0
  number dite_kat // #ys_akce_dite_kat | #fa_akce_dite_kat -- cenová kategorie
  // pečouni: částečný pobyt
  number p_od_pobyt   // pro pečouny: počet dnů pozdějšího příjezdu
  number p_od_strava  // pro pečouny: první jídlo, 0=default, 1=snídaně, 2=oběd, 3=večeře
  number p_do_pobyt   // pro pečouny: počet dnů dřívějšího odjezdu
  number p_do_strava  // pro pečouny: poslední jídlo, 0=default, 1=snídaně, 2=oběd, 3=večeře
}
table osoba_geo { 
  number id_osoba
  number lat
  number lng
  number stav
}
table rodina_geo { 
  number id_rodina
  number lat
  number lng
  number stav
}
table osoba { key_id:'id_osoba'
  number id_osoba
  number access
  number id_dupary
  number id_dudeti
  text   deleted     { help:'ok|prázdné nebo D=značka smazání osoby' },
  text jmeno
  text prijmeni
  text rodne
  number sex
  number dieta  // #ms_akce_dieta
  text fotka
  number adresa // 0=viz rodinná, 1=osobní zde
  number noadresa { help:"adresa je nespolehlivá - viz poznámka" }
  text ulice
  text psc
  text obec
  text stat
  text prislusnost // státní příslušnost
  number kontakt // 0=viz rodinný, 1=osobní zde
  text gmail
  text email
  number nomail { help:"nomail|nechce přijímat hromadně rozesílané informace" }
  text telefon
  text spz
  date narozeni { sql_pipe:'sql_date_year' }
  number uvitano { help:"uvítáno|bylo uvítáno ve společenství" }
  number iniciace { help:"mrop|rok iniciace nebo 0" }
  number firming { help:"firm|rok posledního firmingu nebo 0" }
//  text rc_xxxx
  number umrti // rok úmrtí
  text poznamka
  text obcanka
  number vzdelani
  text titul
  text zamest
  text zajmy
  text jazyk
  number cirkev
  text aktivita
  text o_umi      // #answer_umi
  number clen
  text note
  text origin
  text historie
  number pin
  date pin_vydan
  number pin_ch
  date pin_vydan_ch
  text web_level    // #answer_web: WEB level=suma: 1=admin, 2=super, 4=redakce, 16=tester
  date   web_zmena   { sql_pipe:'sql_date1', help:'datum vyplnění online formuláře se změnami os.údajů' }
  date   web_souhlas { sql_pipe:'sql_date1', help:'datum udělení souhlasu se zpracováním osobních údajů' }
}
table tvori { key_id:'id_tvori'
  number id_tvori
  number id_osoba
  number id_rodina
  number role
}
table dar { key_id:'id_dar'
  number id_dar
  number access
  number id_osoba
  number id_rodina
  text   deleted{ help:'ok|prázdné nebo D=značka smazání daru' },
  text   ukon   { help:'b-člen běžný,c-člen činný,d-dar,p-členský příspěvek' }
  text   zpusob { help:'b-banka,s-složenka,p-pokladna' }
  number castka
  date   dat_od { sql_pipe:'sql_date1', help:'datum darování nebo vzniku členství' }
  date   dat_do { sql_pipe:'sql_date1', help:'datum zaslání potvrzení nebo datum pokrytí členství příspěvkem nebo datum zániku členství' }
  text   note
}
table rodina { key_id:'id_rodina'
  number id_rodina
  number access
  number id_dupary
  text   deleted
  number typ            // 10,11,20,21
  text nazev
  text fotka
  text ulice
  text psc
  text obec
  text stat
  number noadresa { help:"adresa je nespolehlivá - viz poznámka" }
  text telefony
  text emaily
  number nomaily { help:"nomaily|nechtějí přijímat hromadně rozesílané informace - viz poznámka" }
  text spz
  number svatba
  date datsvatba { sql_pipe:'sql_date_year'}
  number rozvod
  text r_umi      // #ms_umi
  number r_ms     // počet účastí na MS mimo YS,FA
  text note
  text origin
  text historie
}
table platba { key_id:'id_platba'
  number id_platba
  text   ucet           // M=514048001, D=514048044
  number id_osoba
  number id_rodina
  number id_duakce
  number id_pokl
  number ucel
  number castka
  date   datum          { sql_pipe:'sql_date1'}
  text   poznamka
  number zpusob
  text   ucet_nazev
  text   vs
  text   ks
  text   ss
  text   ss2            // ručně opravený SS
  text   tipy           // vytipované možnosti plátce
}
table cenik { key_id:'id_cenik'
  number id_cenik
  number id_akce
  number hnizdo // 0 nebo pořadí hnízda
  number poradi
  text   polozka
  number cena
  text   krat       // verze2: koeficient P=1, xN počet nocí, xS xO xV počet jídel
  text   za         // verze2 - seznam závislosti
  text   t          // verze2  t: typ u-účastník, v-vps, d-dítě
  text   n          // verze2  n: 0-bez, 1-normal, 2-spacák na lůžku, 3-spacák bez lůžka
  text   p          // verze2  p: 0-nic, 1-celá, 2-půl
  number od
  number do
  number typ        // index typu ubytování
  number dph
}
# -------------------------------------------------------------------------- webform
table webform { key_id:'id_webform'
  number id_webform
  number id_osoba       { help:"int(11)	přiřazená osoba (u firmy kontaktní)" }
  number typ_osoby      { help:"1:jednotlivec, 2:rodina, 3:firma" }
  number id_rodina      { help:"přiřazená rodina, pokud typ=2" }
  text firma_nazev      { help:"jméno firmy pokud typ_osoby=3" }
  number firma_ic       { help:"" }
  text jmeno
  text prijmeni
  number sex
  text ulice
  text psc
  text obec
  text stat
  text email
  text telefon
  date narozeni         { sql_pipe:'sql_date1'}
//  text rc_xxxx
  text zamest
  number dary_frekvence { help:"předpokládaná frekvence darů" } // db_dary_frek
  number dary_potvrzeni { help:"potřebuje potvrzení pro daňový odečet" }
  number potvrzeno      { help:"bylo kliknuto na URL zaslané mailem" }
  text historie
}
map db_dary_frek:  table _cis {where:"druh='db_dary_frek'",  order:'poradi', key_id:'data'}
//a table join_akce { // spojení číselníku akcí s MS
//a  number id_akce   { help:"klíč akce v tabulce akce" }
//a  number g_rok     { help:"rok akce podle číselníku akcí" }
//a  number g_kod     { help:"kód akce podle číselníku akcí" }
//a  text   source    { help:"L:Lídino M:Milošovo MS.EXE" }
//a  number akce      { help:"staré číslo akce podle MS.EXE" }
//a }
//a table g_akce { key_id:'id_gakce' // kopie číselníku akcí z intranetu
//a  number id_gakce
//a  number g_rok     { help:"rok akce podle číselníku akcí" }
//a  number g_kod     { help:"kód akce podle číselníku akcí" }
//a  text   g_nazev   { help:"název akce z číselníku akcí" }
//a  date   g_od      { help:"začátek akce z číselníku akcí", sql_pipe:'sql_date1' }
//a  date   g_do      { help:"ukončení akce z číselníku akcí", sql_pipe:'sql_date1' }
//a  number g_ucast   { help:"počet účastníků akce z číselníku akcí" }
//a  text   g_typ     { help:"typ akce z číselníku akcí" }
//a  text   g_kap     { help:"účetní kapitola akce z číselníku akcí" }
//a }
table mail { key_id:'id_mail'
  number id_mail { key:'primary' },
  number id_dopis { help:'mail|index mailu' }, // nepoužívá se pro dopisy s druh!='@'
  number id_pobyt { help:'pobyt|ID pobytu na akci' } // jen pro maily 'U' = účastníkům akce
  number id_davka
  number id_znacka                             // nepoužívá se pro dopisy s druh=='@'
  number id_clen
  text znacka
  text email
  number stav
  text msg
  text body
}
table mailist { key_id:'id_mailist'
  number id_mailist
  number access
  number specialni   // 1 znamená speciální mail-list, definovaný obsahem parms
  text   komu        // o pro osoby, r pro rodiny
  number blokovano
  number aktualizovat // 1 znamená požadavek přegenerovat sexpr před použitím
  text   nazev
  text   ucel
  text   parms  // json
  text   sexpr
}
table dopis { key_id:'id_dopis'
  number id_dopis { key:'primary' },
  number access
  number id_davka { help:'dávka|číslo rozesílání dávky dopisů' },
  text nazev
  text prilohy
  number potvrzeni { help:"potvrzení|vyžádat zaslání potvrzení o přečtení" }
  number kopie	{ help:"poslat slepou kopii 'odesílateli'" }
  number id_duakce   // pouze pro maily: id akce
  number hnizdo      // 0 nebo index hnizda akce
  number id_mailist  // pouze pro maily přes mail-list: id mailist
  number cis_skupina // pouze pro maily: _cis.data položky se SQL (_cis.druh='db_maily_sql')
  text druh { help:'druh|D-dopis, S-samolepka,legitimace, N-nesamostatná složka' },
  text typ { help:'typ|značka dopisu' },
  number nw
  number nh
  number komu     // pouze pro maily
  number pocet    // pouze pro maily
  text report { help:'vzor|identifikátor reportu' },
  number aktualni { help:'aktualni|text dopisu je připraven k tisku' },
  date datum { help:'datum|vročení dopisu', sql_pipe:'sql_date1' },
  text obsah { help:'obsah|text dopisu' },
  text var_list { help:'seznam proměnných'}
  text post_vars { help:'seznam proměnných počítaných po generování'}
  text nest_list { help:'seznam složek (druh=N)'}
  text add_list
}

map ms_akce_hnizda:      text            // vytváří se dynamicky jako při použití select
map ms_akce_hnizda_plus: text            // ... včetně 'všichni'=99:, nezařazení=0:?
map ms_akce_hnizda_tisk: text            // ... včetně 'všichni'=0
map ms_akce_typ:      table _cis {where:"druh='ms_akce_typ'",       order:'poradi', key_id:'data'}  // ikona=1 pro muže, 2 pro ženy, jinak 0
map ms_akce_clen:     table _cis {where:"druh='ms_akce_clen'",      order:'poradi', key_id:'data'}
map ms_akce_pouze:    table _cis {where:"druh='ms_akce_pouze'",     order:'poradi', key_id:'data'}
map ms_akce_funkce:   table _cis {where:"druh='ms_akce_funkce'",    order:'poradi', key_id:'data'}
map ms_akce_pfunkce:  table _cis {where:"druh='ms_akce_pfunkce'",   order:'poradi', key_id:'data'}
map ms_akce_prednasi: table _cis {where:"druh='ms_akce_prednasi'",  order:'poradi', key_id:'data'}
map ms_akce_cirkev:   table _cis {where:"druh='ms_akce_cirkev'",    order:'poradi', key_id:'data'}
map ms_akce_vzdelani: table _cis {where:"druh='ms_akce_vzdelani'",  order:'poradi', key_id:'data'}
map ms_akce_titul:    table _cis {where:"druh='ms_akce_titul'",     order:'poradi', key_id:'data'}
map ms_akce_platba:   table _cis {where:"druh='ms_akce_platba'",    order:'poradi', key_id:'data'}
map ms_platba_stav:   table _cis {where:"druh='ms_platba_stav'",    order:'poradi', key_id:'data'}
map ms_akce_sex:      table _cis {where:"druh='ms_akce_sex'",       order:'poradi', key_id:'data'}
map ms_akce_ucastnik: table _cis {where:"druh='ms_akce_ucastnik'",  order:'poradi', key_id:'data'}
map ms_cena_vzorec:   table _cis {where:"druh='ms_cena_vzorec'",    order:'poradi', key_id:'data'}
map ms_akce_ubytovan: table _cis {where:"druh='ms_akce_ubytovan'",  order:'poradi', key_id:'data'}
map ms_akce_dieta:    table _cis {where:"druh='ms_akce_dieta'",     order:'poradi', key_id:'data'}
map ms_akce_dite_kat: table _cis {where:"druh='ms_akce_dite_kat'",  order:'poradi', key_id:'data'} // cr
map ys_akce_dite_kat: table _cis {where:"druh='ys_akce_dite_kat'",  order:'poradi', key_id:'data'} // ys
map fa_akce_dite_kat: table _cis {where:"druh='fa_akce_dite_kat'",  order:'poradi', key_id:'data'} // fa
map ms_akce_s_role:   table _cis {where:"druh='ms_akce_s_role'",    order:'poradi', key_id:'data'}
map ms_akce_t_role:   table _cis {where:"druh='ms_akce_t_role'",    order:'poradi', key_id:'data'}
map ms_akce_titul_p:  table _cis {where:"druh='ms_akce_titul_p'",   order:'poradi', key_id:'data'}
map ms_umi:           table _cis {where:"druh='answer_umi'",        order:'poradi', key_id:'data', db:'ezer_group' }
map ms_web:           table _cis {where:"druh='answer_web'",        order:'poradi', key_id:'data', db:'ezer_group' }
map map_evi_vyber_o:  table _cis {where:"druh='evi_vyber_o' AND data<50",  order:'poradi', key_id:'data'}
map map_evi_vyber_x:  table _cis {where:"druh='evi_vyber_o' AND data>50",  order:'poradi', key_id:'data'}
map map_evi_vyber_r:  table _cis {where:"druh='evi_vyber_r'",       order:'poradi', key_id:'data'}
map map_stat:         table _cis {where:"druh='stat'",              order:'poradi', key_id:'data'}
map map_smtp_srv:     table _cis {where:"druh='smtp_srv'",          order:'poradi', key_id:'data'}

# =======================================================================================> Přihláška
# přihláška na akci
panel Prihlaska [,,400,500] { title:'Data přihlášky', type:'popup', css:'dialog'
  var virgin=1
  func Show(idw) {
    if (virgin) { panel.popup(85,60); virgin= 0; } else panel.popup(0,0,0,1);
    frm.txt= php.sys_db_rec_show('prihlaska','id_prihlaska',idw,'-'); // bez class=stat
  }
  use frm: form [0,0,400,500] { 
    label txt [0,0,400,500] { style:"overflow:auto" }
  }
}
# ==========================================================================================> PROCES
panel Proces [0,0,300,50] { type:'popup' title:'průběh výpočtu' 
  var parent:object,  // vstup - parent je panel, ve kterém je obsažena procedura se 
      refresh:text,   //         jménem v refresh volaná s id_mail po každé dávce
      sent:number,    // výstup - počet odeslaných mailů
      problem:text    //          text případné chyby
  use it: form _it 
  // Start - odstartuje výpočet definovaný objektem par a zobrazí jeho průběh 
  proc Start(par,title) { 
    // inicializace
    clear; continue.set(1); it.msg.set(''); Show(0,1); it.display(1,'t'); 
    panel.set_attrib('title',title); sent.set(0); problem.set(''); 
    // inicializace cyklu a předání prametrů
    // PHP procedura musí nastavit položky: todo, done, sent, last, error
    y.set(object('par',par)); 
    // zahájení cyklu (rekurze je asi efektivnější než foreach s předávaným polem)
    [ panel.call('Step') ]; // asynchronní spuštění, aby bylo provedeno panel.modal
    panel.modal 
  }
  // Step - jeden krok procesu
  proc Step() { 
    continue.get;  // po Stop (třeba stisku Cancel) se výpočet přeruší
    // odeslání dávky mailů - odpovídá  za done<=todo 
    y.set(ask('mail2_mai_sending',y.get)); 
    sent.set(sum(sent.get,y.get('sent')));
    it.msg.set(conc('posláno ',sent.get,', zbývá ',y.get('msg'),
        cconc(not(continue.get),' -- PŘERUŠENO!')));
    [ y.get('error'); Stop; problem.set(y.get('error')); 
      it.msg.set(conc('CHYBA: ',problem.get,' -- PŘERUŠENO!')) ];
    [ y.get('max'); Stop; problem.set(y.get('max')); 
      it.msg.set(conc('DOSAŽENO MAXIMA DNEŠNÍ dávky: ',problem.get,' -- PŘERUŠENO!')) ];
    [ y.get('last'); refresh.get; parent.get.call(refresh.get,y.get('last')) ];
    Show(y.get('done'),y.get('todo')); // posune termometr
    [ eq(y.get('done'),y.get('todo')); Stop ]; 
    Step
  }
  // stavové proměnné
  var y:object,     // střadač zajištující komunikaci mezi klientem a serverem
      continue=1
  // Show(cast,celek) - posune termometr
  proc Show(cast,celek) { 
    it.thermo1.property(object('width',divide(multiply(cast,290),celek))) }
  // Stop - zastaví a nechá zobrazené
  proc Stop() { continue.set(0); it.display(0,'b'); }
  // End - zruší zobrazení
  proc End() { it.display(0,'t') }
  form _it { 
    label thermo1 [6,1,0,8]   { tag:'t', title:'' style:'background-color:#ef7f13' }
    label thermo2 [5,0,290,8] { tag:'t', title:'' style:'border:1px dotted grey' }
    label msg [0,15,300,40]   { tag:'t' format:'c' }
    button cancel [120,30,,]  { tag:'t,b', title:'Přerušit' proc onclick () { Stop; } }
  }
}
# ===========================================================================================> TRACK
# přehled provedených změn
panel track [,,550,276] { title:'Historie oprav', type:'popup', css:'dialog'
//  var reverted_table= '', reverted_key= 0
  use back: form _back [0,0,,] { tabindex:20 },
  proc back_show(kde,klic) {
    [ virgin_track.get; panel.popup(0,1) | panel.popup(0,0,0,1) ];
    virgin_track.set(0);
    panel.set_attrib('title',conc('Historie oprav pro ',kde,' id=',klic));
//    reverted_table.set(''); reverted_key.set(0);
    back.lst.browse_load(conc("(kde='",kde,"' AND klic=",klic,")"),"kdy DESC");
    back.lst.raise('onrowclick')
  }
  proc back_double(tab1,klic1,tab2,klic2) {
    [ virgin_track.get; panel.popup(0,1) | panel.popup(0,0,0,1) ];
    virgin_track.set(0);
    panel.set_attrib('title',conc('Historie oprav pro ',tab1,'/',klic1,' a ',tab2,'/',klic2));
    back.lst.browse_load(conc(
        "(kde='",tab1,"' AND klic=",klic1,") OR (kde='",tab2,"' AND klic=",klic2,")"),"kdy DESC");
    back.lst.raise('onrowclick')
  }
  func back_osoba_rodina(ido,kmen) { var idr:number
    idr= kmen=='-' ? 0 : split(kmen,'/',-1); // poslední
    if (idr) back_double('osoba',ido,'rodina',idr);
    else back_show('osoba',ido);
  }
  # ------------------------------------------------------------- _back
  # id_track,kdy,kdo,kde,klic,zmena:fld,op,val,old
  form _back [,,*,*] {
    browse lst [0,0,150,100] { rows:12,
      show kdy [,,90,] { title:'kdy', data:_track.kdy, sql_pipe:'sql_time1' }
      show kdn [,,30,] { title:'kdn', data:_track.kdo }
      show op [,,12,] { title:'?', data:_track.op }
      show kde [,,40,] { title:'tabulka', data:_track.kde }
      show fld [,,60,] { title:'položka', data:_track.fld }
      show old [,,160,] { title:'původní hodnota', data:_track.old, format:'t' }
      show val [,,120,] { title:'změněná hodnota', data:_track.val, format:'t' }
      show id_track [,,0,] { data:_track.id_track }
      menu { type:'context'
        item { title:'vrátit nastavenou opravu'
          proc onclick() {
            lst.selected('clear'); lst.selected('toggle',1); revert }}
        item { title:'vrátit i související opravy'
          proc onclick() { var ret:object
            lst.selected('clear');
            ret.set(ask('track_like',lst.browse_key));
            { ret.ok; lst.selected('set',ret.ids); [ revert ]
            | alert(ret.msg) }
          }}
      }
      proc revert() { var ret:object
        confirm('mám zkusit vrátit opravy označených řádků?');
        ret.set(ask('track_revert',lst.selected('get',0)));
        { ret.ok; warning("změny byly vráceny");
//          reverted_table.set(ret.tab); reverted_key.set(ret.klic);
          lst.browse_refresh;
        | alert(ret.msg) }
      }
    },
    label [0,250,545,] { title:"ÚDAJE: i=vložení (insert), u=úprava, U= hromadná úprava<div style='float:right'>V=vrácení spojených záznamů</div><br>ZÁZNAM: x=smazano, o=obnoveno, d=vzniklo spojením duplicitních záznamů, r=různé od uvedeného záznamu" }
  }
}
# ============================================================================================> MAPA
panel mapa [,,640,400] { type:'popup', title:'mapa účastníků'
  var metoda='', 
      id_akce:number, pecouni:number,       // metoda=akce - id akce a počet pečounů
      id_mailist:number,                    // metoda=mail
      mrop_par:object, mrop_body:number     // metoda=mrop
  proc onfirstfocus() { 
    spinner(1); 
//    f.cr.init('ROADMAP',object('clustering',cconc(eq(sys('options','gmap'),2),1,0))); 
    f.cr.init('ROADMAP',0,'smap'); 
    [ ukaz_psc ]; 
    spinner(0) 
  }
  func onfocus() { 
    ukaz_psc(); 
  }
  func ukaz_psc() { var ret: object, smazat: number, psc:text, gps:text, filtr:text
    if ( not(metoda) ) return();
    smazat= 1;
    switch (metoda) {
    case 'akce': 
      filtr= '';
      if ( pecouni>0 ) {
        filtr= confirm("Mám zobrazit i PSČ pečounů?") ? '' : "pobyt.funkce!=99";
      };
      ret= php.akce2_mapa(id_akce,filtr); 
      break;
    case 'mail': 
      ret= php.mail2_mapa(id_mailist); 
      break;
    case 'mrop': 
      ret= php.sta2_mrop_stat_map(mrop_par);
      smazat= ret.rewrite;
      mrop_body= ret.suma;
      break;
    case 'ms':  
      ret= php.sta2_ms_stat_map(mrop_par);
      smazat= ret.rewrite;
      mrop_body= ret.suma;
      break;
    }
    if ( ret.err ) warning(ret.err);
    if ( smazat ) f.cr.set(object('mark',''));
    f.cr.set(object('mark',ret.mark));
    if ( eq(metoda,'mrop','ms') ) panel.title= ret.title;
    if ( (has_skill('yaa+;faa+;caa+') && ret.err) 
      && confirm("chceš pomocí <b>mapy.cz</b> doplnit polohu PSČ?") ) {
      for (psc of ret.chybi) {
        gps= prompt2(`V <b>mapy.cz</b> dej vyhledat <b>${psc}</b> a zkopíruj GPS. 
            Pokud se v mapy.cz nenajde, je asi špatně uvedeno u adresy, najdi ji 
            (ve výpisech jednotlivců) a oprav podle <b>psc.cz</b>`);
        php.mapa2_psc_set(psc,gps);
      }
    }
  }
  use f: form _f [0,0,,]
  form _f [,,*,*] {
    label cr [0,0,640,400] { type:'map' }
  }
}
# =======================================================================================> formuláře
# společné procedury
proc obligatory(elem) { elem.enable(1); elem.change(1) }
# -----------------------------------------------------------------------------------------==> OSOBA
panel osoba_config [,,210,150] {type:'popup', title:"Podrobnosti údajů"
  var tit='osobní údaje', grp='ZKAS', var ucast:object
  proc start() {
    grp.set(get_cookie(conc(sys('root'),'_conf_osoba'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    [ has_skill('yaa:c;faa:c;caa:c') | grp.set(replace(grp.get,'C','')) ];
    [ has_skill('a') | grp.set(replace(grp.get,'W','')) ];
    cnfg._back; }
  proc tune(calee) {
    ucast.set(calee); _old.set(grp.get); [ ucast.call('evid.z_change','o') ]; panel.modal(500,200) }
  use cnfg: form _cnfg
  form _cnfg {
    check z [ 0,  0,100,] { title:"základní údaje",      format:'d', value:'1'}
    check s [ 100,0,110,] { title:"oddělovat skupiny",   format:'t', proc onchange() { _tuned }}
    check k [ 0, 20,200,] { title:"kontaktní údaje",     format:'t', proc onchange() { _tuned }}
    check g [100,20,110,] { title:"konference",          format:'t', proc onchange() { _tuned }}
    check a [ 0, 40,200,] { title:"poštovní adresa",     format:'t', proc onchange() { _tuned }}
    check v [100,40,110,] { title:"web, souhlasy",       format:'t', skill:'a|a'
                                                                     proc onchange() { _tuned }}
    check o [ 0, 60,200,] { title:"organizační údaje",   format:'t', proc onchange() { _tuned }}
    check c [ 0, 80,200,] { title:"citlivé údaje",       format:'t', skill:'yaa|yaa:c;faa|faa:c;caa|caa:c'
                                                                     proc onchange() { _tuned }}
    check p [ 0,100,200,] { title:"trvalá poznámka, schopnosti",
                                                         format:'t', proc onchange() { _tuned }}
    button  [ 0,130,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_osoba'),grp.get); panel.hide(1) }}
    button  [85,130,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; ucast.call('osoby_show'); panel.hide(1) }}
    proc _tuned() {
      grp.set(cconc(s.get,'S',k.get,'K',g.get,'G',a.get,'A',o.get,'O',p.get,'P','Z'));
      [ form.part('c'); c.get; grp.set(conc(grp.get,'C')) ];
      [ form.part('v'); v.get; grp.set(conc(grp.get,'W')) ];
      ucast.call('osoby_show') }
    proc _back() { z.set(1); s.set(contains('S',grp.get));
      k.set(contains('K',grp.get)); g.set(contains('G',grp.get));
      a.set(contains('A',grp.get)); o.set(contains('O',grp.get));
      [ form.part('c'); c.set(contains('C',grp.get)) ];
      [ form.part('v'); v.set(contains('W',grp.get)) ];
      p.set(contains('P',grp.get)); }
  }
  var _old= 'Z'
}
form _osoba2x [,,244,322] {css:'ae_frame'
  proc onclick() { on_click }
  var host=''           // 'U' - použito z Uživatelé, 'E' - použito z Evidence
  var idr=0             // klíč rodiny pro rodinné údaje (pro akce2_osoba2)
  var mode=0            // 0 zobrazit jen osobní kontakt a adresu, rodinnou skrýt
                        // 2 zobrazí pro adresa=0 kopie rodinných údajů uvozené ®
                        // 1 (jen EVID) zobrazí i pro adresa=0 osobní údaje (měly by být prázdné)
  proc onstart() { stat.selects(staty.get,',',1); prisl.selects(staty.get,',',1) }
  # ==> . globální procedury
  proc set_mode(_mode,_host) { var x:object
    mode.set(_mode); host.set(_host); form.enable(1,'a|b|j|k');
    [ form.part('detail.r'); x.set(form.part('detail.r')); x.get.enable(eq(_host,'U')) ];
  }
  func save_osoba() { var removed:number, geo:object, ido:number
    ido= form.key();
    if (adresa.changed()||ulice.changed()||stat.changed()||psc.changed()||obec.changed()) {
      removed= php.geo_remove(ido);
      form.save();
      geo= php.geo_refresh(ido);
      if (geo.ok) {
        warning(geo.warning);
//        alert(`${geo.note}`)
      }
    }
    else {
      form.save()
    }
  }
  # ==> . přepisované procedury
  proc onchanged() { }
  proc elim_kopie() { }
  proc see_new_osoba() { }
  proc see_old_osoba() { }
  proc correct() { var ok:number
    ok.set(1);
    adresa.get; eq(ulice.get,''); eq(obec.get,''); warning("osobní adresa nesmí být prázdná"); ok.set(0);
    return(ok);
  }
  proc clear_osoba() { form.init; role.display(0);
    kontakt_r.set(''); adresa_r.set('');
    kontakt.enable(0); kontakt.set(1); form.enable(1,'k');
    adresa.enable(0);  adresa.set(1);  form.enable(1,'b');
  }
  proc on_click() {}
  proc init_osoba() {
    form.display(0,'[^f]'); access.display(1);
  }
  proc refresh() { eq(host.get,'U');
    ucast.call('osoby_show')
  | evi.call('osoby_show') }
  proc show_osoba(even) { var tags:text
    form.display(0,'[^f]'); access.display(1);             // even=2 pro evidenci
    [ has_skill('T') 
    | go_evi.display(lt(even,2)); chain.display(eq(even,1)); // 0,1=jen pro účastníky, 1=zobrazí chain
      { keys_osoba.get; chain.set_css('db_chain','db_evidence')
      | chain.set_css('db_evidence','db_chain') };
    ];
    kontakt.enable(1); adresa.enable(1);
    frame.set(osoba_config.tit.get);
    tags.set('i,ii');
    [ contains('K',osoba_config.grp.get);
      { eq(form_mode.get,'new');
        kontakt.set(0); kontakt_r.set('');
        tags.set(conc(tags,',j,k')); form.enable(1,'k');
      | [ kontakt.get; kontakt_r.set('') | kontakt_r.set(kmen.get) ];
        eq(mode.get,0);   // 0: pro kontakt=0 jen kontakt_r
        [ kontakt.get; tags.set(conc(tags,',j,k')) | tags.set(conc(tags,',j,J')) ]
      | // 2: pro kontakt=0 ®rodinné+disabled, 1: kontakt=0 osobní+disabled (měly by být prázdné)
        tags.set(conc(tags,',j,k')); form.enable(kontakt.get,'k');
      }
    ];
    [ contains('A',osoba_config.grp.get);
      { eq(form_mode.get,'new');
        adresa.set(0); adresa_r.set('');
        tags.set(conc(tags,',a,b')); form.enable(1,'b');
      | [ adresa.get; adresa_r.set('') | adresa_r.set(kmen.get) ];
        eq(mode.get,0);   // 0: pro adresa=0 jen adresa_r
        [ adresa.get; tags.set(conc(tags,',a,b')) | tags.set(conc(tags,',a,A')) ]
      | // 2: pro adresa=0 ®rodinné+disabled, 1: adresa=0 osobní+disabled (měly by být prázdné)
        tags.set(conc(tags,',a,b')); form.enable(adresa.get,'b');
      }
    ];
    [ or(eq(even,2),key_spolu.get,eq(form_mode.get,'new'));
      [ contains('O',osoba_config.grp.get); tags.set(conc(tags,',o')) ];
      [ contains('C',osoba_config.grp.get); tags.set(conc(tags,',c')) ];
      [ contains('P',osoba_config.grp.get); tags.set(conc(tags,',p')) ];
      [ contains('G',osoba_config.grp.get); tags.set(conc(tags,',g')) ];
      [ contains('W',osoba_config.grp.get); tags.set(conc(tags,',v')) ];
    ];
    [ contains('S',osoba_config.grp.get); form.set_css('db_hr','','S') | form.set_css('','db_hr','S') ];
    [ or(eq(even,2),key_spolu.get,eq(form_mode.get,'new')) | tags.set(conc(tags,',x')) ];
    form.stacks(tags,'down',0,0,10);
//    rc.enable(0);
  }

  // kontextové menu
  menu detail { type:'context', skill:'yae;fae;cae'
    item { title:'konfigurace formuláře', proc onclick () { osoba_config.tune(panel) } }
    item { title:'ukázat změny os. údajů',proc onclick () { 
      track.back_osoba_rodina(key_osoba.get,cconc(eq(host.get,'E'),id_kmen.get,kmen.get)) }}
    item r { title:'-zobrazovat ®rodinné údaje',  proc onclick () { set_mode(2,host.get); refresh }}
    item o { title:'nezobrazovat ®rodinné údaje', proc onclick () { set_mode(0,host.get); refresh }}
    item { title:'-aktualizovat GPS z mapy.cz', skill:'m', 
      func onclick() { var gps:text, msg:text
        gps= prompt2("souřadnice GPS z mapy.cz");
        msg= php.geo_manual(key_osoba,gps);
        alert(msg);
      }
    }
    item { title:'ukázat data', skill:'m|mm', 
      func onclick() { js.call_root_func_par('syst_tab_rec_show',array('osoba',key_osoba),&this,'onclick_')}
      func onclick_() {}
    }
  }

  // společné
  view o: table osoba

  label frame [0,2,242,50] {tag:'f', css:'frame_label_up', title:'osobní údaje'}
  button chain [102,1,,] {tag:'f', title:'[fa-chain]', css:'db_evidence', skill:'#T' 
    func onclick() {
      elim_kopie()
  }}
  button go_evi [121,1,,] {tag:'f', title:'^evidence', css:'db_evidence', skill:'#T'
    func onclick() { evi.evid_osoba(key_osoba) } }
  field access    [186,0,10,] {tag:'f,I', format:'or', css:'Label', data:o.access, tabindex:0  }
  field key_osoba [196,0,40,] {tag:'f', format:'or', css:'Label', help:' ', data:o.id_osoba, tabindex:0 }
  field keys_osoba // seznam pravděpodobných kopií
  field key_tvori [186,10,50,] {tag:'f', format:'or', css:'Label', help:' ', tabindex:0 }
  field key_spolu
  field kmen    { expr:"IFNULL(SUBSTR((SELECT MIN(CONCAT(role,nazev)) FROM tvori AS ot JOIN rodina AS r USING (id_rodina) WHERE ot.id_osoba=o.id_osoba),2),'-')" }
  field id_kmen { expr:"IFNULL(SUBSTR((SELECT MIN(CONCAT(role,id_rodina)) FROM tvori AS ot JOIN rodina AS r USING (id_rodina) WHERE ot.id_osoba=o.id_osoba),2),'-')" }
  field deleted { expr:"LEFT(o.deleted,1)='D'" }

  #==> . see+new_osoba
  # vytvoření osoby: 1.see_osoba 2.new_osoba
  # úprava formuláře pro prohledání db
  proc see_osoba(_clen_rodiny,_prijmeni,_jmeno,_idr) { form.init;
    idr.set(_idr);
    prijmeni1.set(_prijmeni); jmeno1.set(_jmeno);
    kontakt_r.set(''); adresa_r.set('');
    [ _clen_rodiny; role.display(1);
      kontakt.enable(1); kontakt.set(0);
      adresa.enable(1); adresa.set(0);
      [ idr; adresa.rodinna ];
      jmeno1.add_attrib('par.prijmeni',_prijmeni);
    | role.display(1);
      kontakt.enable(0); kontakt.set(1); form.enable(1,'k');
      adresa.enable(0);  adresa.set(1);  form.enable(1,'b'); ];
    show_osoba(1);
    see.see_n.set(0); see.see_beg;
    foreach(array(jmeno1,prijmeni1),obligatory);
  }
  # úprava formuláře pro vytvoření osoby
  proc new_osoba(_clen_rodiny,_prijmeni,_jmeno,_idr) { form.init;
    see.see_end;
    idr.set(_idr);
    prijmeni.set(_prijmeni); jmeno.set(_jmeno);
    kontakt_r.set(''); adresa_r.set(''); access.set(my_org.get);
    [ _clen_rodiny; role.display(1);
      kontakt.enable(1); kontakt.set(0);
      adresa.enable(1); adresa.set(0);
      [ idr; adresa.rodinna]
    | role.display(1);
      kontakt.enable(0); kontakt.set(1); form.enable(1,'k');
      adresa.enable(0);  adresa.set(1);  form.enable(1,'b'); ];
  }
  #==> . hledání dle příjmení a jména
  select prijmeni1 [5,32,106,] {tag:'w', type:'auto', par:°{fce:'ucast2_auto_prijmeni'}
    format:'n', title:'^příjmení?', format:'T'
    proc onchanged() {
      // předej nalezené příjmení jako parametr pro hledání jmen
      this.get; jmeno1.add_attrib('par.prijmeni',this.get);
      jmeno1.get; see.see_show(1);
  }}
  select jmeno1 [120,32,83,] {tag:'w', type:'auto', par:°{fce:'ucast2_auto_jmeno2',prijmeni:''}
    format:'n', title:'^jméno?', format:'T'
    proc onchanged() { prijmeni1.get; this.get; see.see_show(1);
  }}
  label see [41,2,72,22] { tag:'W', css:'ae_parm search', format:'n'
    const css_all = 'ezer_ys ezer_fa ezer_db'
    var see_n=0
    proc see_show(n) { var ret:object
      ret.set(ask('db2_oso_show',prijmeni1.get,jmeno1.get,n));
      see_next.enable(ret.next); see_back.enable(ret.back); see_use.enable(ret.n); see_new.enable(1);
      see_n.set(ret.n); form.set_css(ret.css,css_all.get,'w'); ret.n;
      copy_by_name(ret.oso,form); form.key(key_osoba.get);
      warning
    | form.set_css('',css_all.get,'w');
      warning("osoba '",prijmeni1.get,' ',jmeno1.get,"' ještě není v evidenci, použij ",
        replace_fa('[fa-heart-o]')," pro založení");
    }
    proc see_beg() {
      function("return Ezer.Shield.show();"); form.set_css('search');
      form.enable(0,'[abiyjkocpsW]'); form.display(1,'[wW]');
      prijmeni.display(0); jmeno.display(0);
    }
    proc see_end() {[
      function("return Ezer.Shield.hide();"); form.set_css('','search');
      form.set_css('',css_all.get,'w');
      form.enable(1,'[abiyjkocp]'); form.display(0,'[wW]');
      prijmeni.display(1); jmeno.display(1);
    ]}
  }
  button see_back [44,6,16,16] {tag:'W', type:'html', title:"[fa-chevron-left]", format:'n'
    css:"search fa", help:"předchozí osoba se stejným příjmením a jménem"
    proc onclick() {
      see.see_show(sum(see.see_n.get,-1))
  }}
  button see_next [61,6,16,16] {tag:'W', type:'html', title:"[fa-chevron-right]", format:'n'
    css:"search fa", help:"následující osoba se stejným příjmením a jménem"
    proc onclick() {
      see.see_show(sum(see.see_n.get,1))
  }}
  button see_use [78,6,16,16] {tag:'W', type:'html', title:"[fa-plug]", format:'n'
    css:"search fa", help:"potvrzení nalezené osoby a její přidání k pobytu"
    proc onclick() { var ret:object
      see.see_end;
      warning; see_old_osoba                             // dokončení v účastnících nebo evidenci
  }}
  button see_new [95,6,16,16] {tag:'W', type:'html', title:"[fa-heart]", format:'n'
    css:"search fa", help:'Vytvoření nové osoby s daným příjmením a jménem'
    proc onclick() {
      warning; see_new_osoba                             // dokončení v účastnících nebo evidenci
  } }
  #==> . základní údaje: i,y (jsou vždy vidět)
  field prijmeni [5,32,106,] {tag:'i,I', data:o.prijmeni, format:'n', help:'příjmení', title:'^příjmení' }
  field jmeno    [120,32,83,] {tag:'i,I', data:o.jmeno, format:'n', title:'^jméno' }
#   select titul   [218,32,10,] {tag:'y', title:"^P.", type:'map', options:ms_akce_titul_p.hodnota, format:'n' }
  //field role   [218,32,10,] {tag:'y', title:"^role", format:'n' }
  select role    [210,32,31,] {tag:'y', type:'map', options:ms_akce_t_role.hodnota, format:'wn', title:'^role'}
  field rodne    [5,66,63,] {tag:'i', data:o.rodne, format:'n', help:'rodné příjmení', title:'^rodné příjmení'}
  radio sex      [73,54,46,32] {tag:'i,I', data:o.sex, format:'n', value:'1'
    case [0,2,47,] { title:'muž', expr:'1' }
    case [0,15,47,] { title:'žena', expr:'2' }
    proc onchange() { }
  }
  label vek      [210,52,24,] {tag:'i', format:'nr'}
  field narozeni [120,66,85,] {tag:'i,I', type:'date', data:o.narozeni, format:'nrR:e',title:'^narození'}
  field umrti    [208,66,28,] {tag:'i', data:o.umrti, format:'nr:e',title:'^rok úmrtí'}
  label [0,0,,3] {tag:'ii,S', format:'n', css:'db_sep' } // zarovnání

  #==> . kontakt: j,k  (rodinný=0, osobní=1)
  label [5,3,50,] {tag:'j', title:'kontakt je' }
  radio kontakt [50,0,185,18] {tag:'j', format:'n', value:'0', data:o.kontakt
    case [0,0,70,] { title:'osobní', expr:'1' }
    case [56,0,70,] { title:'rodinný:', expr:'0' }
    proc onchange() { var r:object, yes:number
      yes.set(1);
      // varovné confirm při existenci osobního telefonu nebo emailu a pokusu přepnutí na rodinný
      [ and(not(this.get),or(telefon.get,email.get));
        { yes.set(confirm("Opravdu mám zneplatnit osobní kontakt?")); yes
        | this.set(function('x',"return x.original.value",this)); this.plain
      }];
      yes;
      { eq(host.get,'E'); show_osoba(0)
      | eq(host.get,'U'); r.set(ask('akce2_osoba2x',key_osoba.get,idr.get)); // varianty kontaktu
        [ this.get; copy_by_name(r.o_kontakt,form,'',1) | copy_by_name(r.r_kontakt,form,'',1) ];
        [ eq(form_mode.get,'new') | show_osoba(0) ]
    }}
  }
  label kontakt_r [169,3,75,] {tag:'j', format:'n'}
  label [0,0,,3] {tag:'J,S', format:'n', css:'db_sep' } // zarovnání
  field telefon  [41,2,197,] {tag:'k', type:'list', data:o.telefon, format:'n', title:'telefon'}
  check nomail   [48,19,169,] {tag:'k', title:"neposílat hromadné informace", data:o.nomail,
    help:"nepoužívat mailovou adresu pro rozesílání hromadných nabídek a informací",
    format:'n', tabindex:0
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum odmítnutí hromadně rozesílaných informací")
  } }
  field email    [5,38,233,] {tag:'k', type:'list', data:o.email, format:'n', title:'^e-mail'}
  label [0,58,,5] {tag:'k,S', format:'n', css:'db_sep' } // zarovnání

  #==> . adresa: a,b (rodinná=0, osobní=1)
  label [5,3,49,12] {tag:'a', title:'adresa' }
  radio adresa [50,0,189,18] {tag:'a', format:'n', value:'0', data:o.adresa
    case [0,0,70,] { title:'osobní', expr:'1' }
    case [56,0,70,] { title:'rodinná:', expr:'0' }
    proc onchange() { var yes:number
      yes.set(1);
      // varovné confirm při existenci osobního adresy a pokusu přepnutí na rodinnou
      [ and(not(this.get),or(ulice.get,obec.get));
        { yes.set(confirm("Opravdu mám zneplatnit osobní adresu?")); yes
        | this.set(function('x',"return x.original.value",this)); this.plain
      }];
      yes;
      { eq(host.get,'E'); show_osoba(0)
      | eq(host.get,'U'); rodinna
    }}
    proc rodinna() { var r:object
      r.set(ask('akce2_osoba2x',key_osoba.get,idr.get)); // varianty adres
      [ this.get; copy_by_name(r.o_adresa,form,'',1) | copy_by_name(r.r_adresa,form,'',1) ];
      [ eq(form_mode.get,'new'); form.enable(this.get,'b') | show_osoba(0) ]
    }
  }
  field geo_ok   [39,2,12,12] {tag:'a', css:'Label3', format:'no' }
  label adresa_r [169,3,75,12] {tag:'a', format:'n', style:"z-index:3;background-color:inherit" }
  label [0,0,,3] {tag:'A,S', format:'n', css:'db_sep' } // zarovnání
  field ulice    [31,2,157,] {tag:'b', data:o.ulice, format:'n', title:'ulice'}
  select stat    [195,2,45,] {tag:'b', data:o.stat, format:'nr:e', title:'^stát'}
  check noadresa [104,19,126,] {tag:'b', title:"nespolehlivá adresa", data:o.noadresa,
    help:"pošta vrací zásilky", format:'n', tabindex:0
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum zjištění neplatnosti")
  } }
  field psc      [5,38,47,] {tag:'b', data:o.psc, format:'n', title:'^psč'
    proc onchanged() { this.let(replace(this.get,' ','')) }
  }
  field obec     [59,38,179,] {tag:'b', data:o.obec, format:'n', title:'^obec'}
  label [0,58,,9] {tag:'b,S', format:'n', css:'db_sep' } // zarovnání

  #==> . organizační údaje: o (jen pro oprávněné)
  field obcanka  [18,2,70,] {tag:'o', data:o.obcanka, format:'n', title:'op:'}
//  field rc       [106,2,45,] {tag:'o', format:'nd', title:'rč:'}
//  field rc_xxxx  [159,2,37,] {tag:'o', data:o.rc_xxxx, format:'n:e', title:'/'}
  select clen    [29,26,54,] {tag:'o', type:'map', format:'n', data:o.clen,
                                options:ms_akce_clen.zkratka, title:'ymca'}
  check uvitano  [190,25,58,] {tag:'o', data:o.uvitano, title:'vítáno',
                               help:'dítě bylo slavnostně uvítáno ve společenství na nějaké akci'}
  field iniciace [113,26,31,] {tag:'o', data:o.iniciace, format:'nr:e', title:'mrop'}
  field firming [159,26,31,] {tag:'o', data:o.firming, format:'nr:e', title:'f.'}
  select prisl   [205,2,35,] {tag:'o', data:o.prislusnost, format:'nr:e', title:'^   přísl.', format:'r'}
  label [0,46,,6] {tag:'o,S', format:'n', css:'db_sep' } // zarovnání

  #==> . citlivé údaje: c (jen pro oprávněné)
  const Tq=-106
  select cirkev  [44,Tq+110,70,] {tag:'c', type:'map', data:o.cirkev, format:'n',       skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c'
                                options:ms_akce_cirkev.zkratka, title:'církev'}
  field aktivita [143,Tq+110,92,] {tag:'c', data:o.aktivita, format:'n', title:'aktiv.',skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c'}
  field jazyk    [44,Tq+131,94,] {tag:'c', data:o.jazyk, format:'n', title:'jazyky',    skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c'}
  select dieta   [171,Tq+131,64,] {tag:'c', type:'map', data:o.dieta, format:'n',       skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c',
                                options:ms_akce_dieta.zkratka, title:'dieta'}
  select vzdelani[44,Tq+152,114,] {tag:'c', type:'map', data:o.vzdelani, format:'n',    skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c',
                                options:ms_akce_vzdelani.zkratka, title:'vzděl.'}
  select titul   [181,Tq+152,54,] {tag:'c', type:'map', data:o.titul, format:'n',       skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c',
                                options:ms_akce_titul.zkratka, title:'tit.'}
  field zamest   [44,Tq+173,191,] {tag:'c', data:o.zamest, format:'n', title:'zaměst.', skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c'}
  field zajmy    [44,Tq+194,191,] {tag:'c', data:o.zajmy, format:'n', title:'zájmy',    skill:'yaa:c|yaa:c;faa:c|faa:c;caa:c|caa:c'}
  label [0,Tq+214,,6] {tag:'c,S', format:'n', css:'db_sep' } // zarovnání

  #==> . osobní schopnosti a poznámka: p
  label [6,6,172,] {tag:'p', title:'schopnosti:', format:'n'}
  select o_umi     [65,4,172,] {tag:'p', type:'map+', data:o.o_umi, options:ms_umi.hodnota, format:'n'}
  edit  note     [5,26,231,74] {tag:'p', data:o.note, format:'n', title:'^poznámka'}
  label [0,104,,6] {tag:'p,S', format:'n', css:'db_sep' } // zarovnání
  
  #==> . konference: g (jen pro oprávněné)
  # tlačítko gmail_save se zviditelní pouze v evidenci pro skill=mrop
  field gmail    [5,14,118,] {tag:'g', type:'list', data:o.gmail, format:'n', //,           skill:'mrop|mrop;dk|dk',
    title:'^adresy chlapi@groups'}
  field pin_ch   [128,14,54,] {tag:'g', type:'list', title:'^pin/ch', format:'n',
      expr:"CONCAT(pin_ch,',',date_format(pin_vydan_ch,'%e.%c.%y'),',',date_format(pin_vydan_ch,'%H:%i'))" }
  field pin      [186,14,54,] {tag:'g', type:'list', title:'^pin/YS', format:'n',
      expr:"CONCAT(pin,',',date_format(pin_vydan,'%e.%c.%y'),',',date_format(pin_vydan,'%H:%i'))" }
  button gmail_save [ 188,14,,] {tag:'g', title:'[fa-save] Ulož', css:'hidden', skill:'mrop|mrop'
    proc visible() { this.set_css('visible','hidden') }
    proc onclick() { var old:text
      old.set(function('x',"return x.original.value",gmail));
      eq(old,gmail.get)
    | ask('evid2_upd_gmail',key_osoba.get,old,gmail.get);
      { eq(host.get,'E'); evi.ulozen_gmail
      | eq(host.get,'U'); gmail.plain
      }
  }}
  label [0,34,,6] {tag:'g,S', format:'n', css:'db_sep' } // zarovnání

  #==> . údaje související s weby: v
  field web_souhlas [5,12,85,] {tag:'v', type:'date', data:o.web_souhlas, format:'rn', title:'^souhlas'}
  field web_zmena   [93,12,85,] {tag:'v', type:'date', data:o.web_zmena, format:'rn', title:'^změna'}
  select web_level  [182,12,59,] {tag:'v', type:'map+', data:o.web_level, options:ms_web.zkratka,
    title:'^web', format:'n'}
  label [0,34,,2] {tag:'v,S', format:'n', css:'db_sep' } // zarovnání
  
  // x = upozornění o omezení údajů neúčastníků
  label [5,4,235,] {tag:'x', format:'n', title:'<i>neúčastník má zobrazeny jen identifikační údaje</i>'}
}
# ----------------------------------------------------------------------------------------==> RODINA
panel rodina_config [,,200,60] {type:'popup', title:"Podrobnosti údajů"
  var tit='osobní údaje', grp='Z', var ucast:object
  proc start() { grp.set(get_cookie(conc(sys('root'),'_conf_rodina'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    cnfg._back;  }
  proc tune(from) { ucast.set(from); _old.set(grp.get);
    [ ucast.call('evid.z_change','o') ]; panel.modal(500,200) }
  use cnfg: form _cnfg
  form _cnfg {
    check z [ 0, 0,200,] { title:"základní údaje", format:'d', value:'1'}
    check p [ 0,20,200,] { title:"trvalá poznámka, schopnosti", format:'t', proc onchange() { _tuned }}
    button  [ 0,40,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_rodina'),grp.get); panel.hide(1) }}
    button  [85,40,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; ucast.call('rodina_show'); panel.hide(1) }}
    proc _tuned() { grp.set(cconc(p.get,'P','Z')); ucast.call('rodina_show') }
    proc _back() { z.set(1); p.set(contains('P',grp.get)); }
  }
  var _old= 'Z'
}
form _rodina2p [,,188,229] { css:'ae_frame'
  const Lp=5 // 187
  const Ts=190; Tp=0 // 0
  view r: table rodina
  view t: table tvori
  proc onstart() { r_stat.selects(staty.get,',',1) }
  proc onclick() { on_click }
  proc onchanged() { }
  proc show_rodina() { var tags:text
    form.display(0,'[^f]'); access.display(1);
    spolu.set('datum svatby');
    tags.set(cconc(1,'a,r',contains('P',rodina_config.grp.get),',p'));
    form.stacks(tags,'down',0,0,10);
  }
  proc on_click() {}
  func od_svatby() {
    if (r_rozvod) spolu= "<span style='background:yellow'>jsou rozvedeni</span>"
    elseif (r_datsvatba) spolu= `od svatby ${js.roku(r_datsvatba,r_svatba)} let`
    else spolu= 'datum svatby'
  }
//  proc od_svatby() {
//    r_rozvod.get; spolu.set("<span style='background:yellow'>jsou rozvedeni</span>")
//  | r_datsvatba.get; spolu.set(conc('od svatby ',roku(r_datsvatba.get,r_svatba.get),' let'))
//  | spolu.set('datum svatby') }
  label frame      [0,2,188,20]   {tag:'f', title:'společné rodinné údaje', css:'frame_label_up' }
  field access     [130,0,10,] {tag:'f,N', format:'or', css:'Label', data:r.access, tabindex:0  }
  field key_rodina [130,0,50,] {tag:'f', format:'or', css:'Label', data:r.id_rodina, tabindex:0  }

  // výběr rodiny
  proc rodina_changed() {}
  proc rodina_edit() {}
  field  rodiny0 [Lp+0,Ts+32,104,] {tag:'n,N', title:"^název nové rodiny", data:r.nazev, format:'n' }
  field  rodiny1 [Lp+0,Ts+32,104,] {tag:'m', title:"^oprava názvu rodiny", data:r.nazev, format:'n' }
  select rodiny  [Lp+0,Ts+32,110,] {tag:'a,R', format:'tT', title:"^zobrazená rodina", help:'výběr jiné rodiny'
    proc onchanged() { rodina_changed }}
  button [Lp+111,Ts+32,,] {tag:'a,o,R', type:'html', title:"[fa-chevron-left]", css:'button', skill:'yaa|yaa+;faa|faa+;caa|caa+'
    help:"oprava názvu zobrazené rodiny"
    proc onclick() { form.display(0,'a'); form.display(1,'m'); rodiny1.set(rodiny.get);
      rodiny1.change; rodina_edit }}

  // role v rodině
  select t_role    [Lp+141,Ts+32,35,] {tag:'a,N', type:'map', data:t.role
    options:ms_akce_t_role.hodnota, format:'wn', title:'^role'}

  // rodinné údaje
  field r_spz      [Lp+ 0,Tp+20,58,]  {tag:'r', data:r.spz, title:'^SPZ auta'}
  label spolu      [Lp+63,Tp+7,85,] {tag:'r' }
  field r_svatba   {data:r.svatba}
  field r_deleted  {data:r.deleted}
  field r_datsvatba[Lp+63,Tp+20,85,] {tag:'r', type:'date', data:r.datsvatba, format:'rR:e'}
  field r_rozvod   [Lp+150,Tp+20,28,] {tag:'r', format:'r:e', data:r.rozvod, title:'^rozv.', help:'rok rozvodu'}

  // adresa
  field r_ulice    [Lp+0,Tp+55,125,] {tag:'r', data:r.ulice, title:'^ulice'}
  select r_stat    [Lp+132,Tp+55,45,] {tag:'r', data:r.stat, format:'r:e', title:'^stát'}
  check noadresa   [Lp+75,Tp+72,126,] {tag:'r', title:"nespolehlivá adr.", data:r.noadresa,
    help:"pošta vrací zásilky", format:'n', tabindex:0
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum zjištění neplatnosti")
  } }
  field r_psc      [Lp+0,Tp+90, 40,] {tag:'r', data:r.psc, title:'^psč'
    proc onchanged() { this.let(replace(this.get,' ','')) }
  }
  field r_geo_ok   [Lp+29,Tp+76,12,12] {tag:'r', css:'Label3', format:'no' }
  field r_obec     [Lp+47,Tp+90,128,] {tag:'r', data:r.obec, title:'^obec'}

  // kontakty
  field r_telefony [Lp+0,Tp+125,176,] {tag:'r', type:'list', data:r.telefony,title:'^telefony'}
  check nomaily    [Lp+38,Tp+142,140,] {tag:'r', title:"neposílat hromadné info.", data:r.nomaily, tabindex:0
    help:"nepoužívat mailovou adresu pro rozesílání hromadných nabídek a informací", format:'n'
    proc onchange() {
      alert("napiš prosím do poznámky důvod a datum odmítnutí hromadně rozesílaných informací")
  } }
  field r_emaily   [Lp+0,Tp+160,176,] {tag:'r', type:'list', data:r.emaily, title:'^e-maily'}
  // rodinné schopnosti a poznámka
  select r_umi     [Lp+60,10,116,] {tag:'p', type:'map+', data:r.r_umi, options:ms_umi.hodnota,
    title:'schopnosti:', format:'n'}
  // účast na jiných MS
  field r_ms       [Lp+150,34,14,] {tag:'p', data:r.r_ms, title:'MS mimo YS/FA:', format:'r:e',
                   help:'zadej počet účastí na MS mimo YS,FA' }
  label            [Lp+170,39,5,] {tag:'p', title:'&times;' }
  edit  r_note     [Lp+ 0,56,175,74] {tag:'p', data:r.note, title:'^poznámka', format:'n'}
  // menu
  menu detail { type:'context', skill:'yae;fae;cae'
    item { title:'konfigurace formuláře',  proc onclick () { rodina_config.tune(evi) } }
    item { title:'ukázat změny rod. údajů',proc onclick () { key_rodina.get; track.back_show('rodina',key_rodina.get) }}
    item { title:'=zazurovění dětí a rodiny', skill:'daea', proc onclick () {
      ask('evid2_deti_access',key_rodina.get,3); panel.call('page.page_load');  } }
    item { title:'-ukázat data', skill:'m|mm', 
      func onclick() { js.call_root_func_par('syst_tab_rec_show',['rodina',key_rodina],&this,'onclick_')}
      func onclick_() {}
    }
  }
}
# ==========================================================================================> MODULY
group foto { include:'onload,db2.akce2.foto'
  form _alb {
    proc galery(fotka,id) {}
  }
}
group fio { include:'onload,db2/db2.fio'
  form _ucty {
    func Init(ucty) {}
    func LoadPobyt(ucty) {}
    func Load(ucty) {}
    func zaPobyt(id_pobyt,on) {}
    func SetOsoba(id_pobyt,on,id_osoba) {}
    func CurrIds() {}
  }
}
group dum { include:'onload,db2/db2.dum'
  panel Rozpis { type:'popup'
    func Load(id_pobyt) {}
  }
  panel Objednavka { type:'popup' 
    func Create(rok) {} // umožní vytvořit objednávku
    func Show(id_akce) {} // umožní zvolit správnou objednávku
    func Delete(id_order) {} // nastaví deleted=1 u objednávky
    func RegRefresh(blok,fce) {} // zaregistruje funkci pro refresh po změně objednávky
  }
  form _objednávka {}
  form _vyuctovani {
    func load_obj(ido){}
    func load_pob(idp){}
  }
}

