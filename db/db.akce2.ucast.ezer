#pragma test
# ------------------------------------------------------------------------------------------------ #
# Karta pro správu účastníků vybrané akce II.                                                      #
#                                                                                                  #
# Ans(w)er/Ezer                                     (c) 2007-2014 Martin Šmídek <martin@smidek.eu> #
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------==> stavové proměnné

var the_duakce_local= 0    // zobrazená akce - pokud se liší od the_duakce, je třeba překreslit
var the_pobyt: number
var zalozka: text           // evid | plat | akce
var back: object
var zmeny: object               // objekt naplněný požadavkem zobrazení nedávných změn

# ---------------------------------------------------------------------------==> inicializace panelu

# události panelu
proc onstart() {
}
proc onfirstfocus() {
#                                         set_trace('E',0); set_trace('f',0);
#                                         set_trace('E',1,'h_change_all'); set_trace('f',1,'sys');
  the_duakce_local.set(0);
  curr_h.set(0);
  curr_w.set(cconc(lt(sys('screen','width'),1280),1024,1280));
  init_forms;
  page.evd.onclick;
  akce_onstart;
  onresize(sys('screen','width'),sys('screen','height'));
  onfocus
}
proc onfocus() {
  [ [ dirty.get | akce_onstart ];
    eq(the_duakce_local.get,the_duakce.get)
  | init_ucast2;
    the_duakce_local.set(the_duakce.get)
  ];
  u.legenda(the_cenik.get,the_cena.get);
  switch(the_soubeh.get,
  0,{ header.soubeh.display(0) },
  1,{ header.soubeh.display(1); panel.display(2,'akce1'); header.soubeh.set('^Děti') },
  2,{ header.soubeh.display(1); panel.display(2,'akce2');  header.soubeh.set('^Kurs') }
  );
  page.page_start;
  h_change_all;
}

# ----------------------------------------------------------------------------==> globální procedury
# ukázání pobytu
proc ucast_pobyt(_idp)  {
  panel.focus; u.b.raise('onrowclick',_idp);
}
# zobrazení osob - nastavených účastníků
proc osoby_show() {                             // obnova údajů o osobách
  [ evid.os1.key; evid.os1.show_osoba(0) | evid.os1.init_osoba ];
  [ evid.os2.key; evid.os2.show_osoba(0) | evid.os2.init_osoba ];
}
proc rodina_show() {                            // obnova údajů o rodině
  evid.rod.key_rodina.get; evid.rod.show_rodina | evid.rod.init_rodina }
proc ucast_selected() {                         // seznam vybraných účastníků
  return(u.b.selected('get')) }
proc spolu_show() { evid.pob1.key; evid.pob1.show_spolu; evid.pob2.key; evid.pob2.show_spolu }
# úpravy formulářů pro y;f;c
proc init_forms() {
  the_pobyt.set(0);
  evid.evid_init;
}
# volání zajistí natažení dat z lst.the_akce z panel.onfucus
proc clear_ucast2() {
  the_duakce_local.set(0);
}
proc init_ucast2() {
  page.page_start;
  header.fill(the_title.get);
  init_forms;
  [ reload(0) ];
  eq(the_soubeh.get,0,1);
  # normální zobrazení
  [ u.b.browse_count; page.evd.onclick ];
| eq(the_soubeh.get,2);
  # souběžná akce - jen děti
  u2.reload
}
# -------------------------------------------------------==> reakce na změny rozměrů okna prohlížeče

const min_h=550           // minimální výška (nelze jednoduše měnit - jsou k ní vztaženy souřadnice v use)
var   curr_h: number      // výška nad základní výšku
var   curr_w: number      // 1024 nebo 1280

proc onfirstloaded() {    // zavolá se po prvním dokončení u.b.browse_load
  w_change_all
}
proc onresize(w,h) { // echo('ucast2 onresize(',w,',',h,')');
#                                         page.my_set(conc("resize(",w,",",h,") ... w=",
#                                             sys('screen','width'),", h=",sys('screen','height')));
  [ and(lt(h,min_h.get),not(eq(curr_h.get,min_h.get)));
    curr_h.set(0); h_change_all
  | and(gt(h,min_h.get),not(eq(h,sum(curr_h.get,min_h.get))));
    curr_h.set(minus(h,min_h.get)); h_change_all ];
  [ and(lt(w,1280),eq(curr_w.get,1280)); narrow
  | and(gt(w,1279),eq(curr_w.get,1024)); wide ];
}

# změna šířky 1024/1280
proc narrow() { curr_w.set(1024); w_change_all }
proc wide()   { curr_w.set(1280); w_change_all }
proc w_change_all() {
  evid.c_change(cconc(eq(curr_w.get,1024),1,2));
  page.pframe.property(object('widen',cconc(eq(curr_w.get,1024),-250,0)))//,'smooth',1));
}

# změna výšky oproti základní min_h
proc h_change_all() {
#                                         page.my_app('h_change_all');
  foreach(array(cmd,cmd2,cmdp),change_top1);
  foreach(array(evid.pob1,evid.pob2,evid.pob),change_top2);
  foreach(array(page.pframe,evid.frame,pla.duvod_text,pla.navrh,pla.duvod_typ,pla.doslo),change_height);
  change_top3;
  h_change_b;
}
# změna počtu řádků browse u.b oproti aktuálním řádkům
proc h_change_b() { var r:number, h:number
  h.set(sys('screen','height'));
  r.set(divide(sum(h.get,-190),17));
  not(eq(r,u.b.rows));
#                                         page.my_app(conc('h_change_b:',r));
  u.b.set_attrib('rows',r);
  act1.akc.set_attrib('rows',sum(r,-6));
  act2.akc.set_attrib('rows',sum(r,-6));
}

proc change_top1(x) { x.property(object('down',curr_h.get))}
proc change_top2(x) { x.property(object('down',minus(curr_h.get,223)))}
proc change_top3() {
  pla.property(object('down',curr_h.get),'b');
  alb.property(object('down',curr_h.get),'b')}
proc change_height(x) { x.property(object('stretch',curr_h.get))}//,'smooth',1)) }

proc akce_load(id_akce) { lst.akce_work(id_akce); onfocus(); }

# zobrazí dočasně jinou akci s tlačítkem ZPĚT  (jen z podzáložky Aktivita)
proc akce_show(xakce,xpobyt,xnadpis,xback) { var idp:number
  page.page_start;
  [ u.b.browse_count; idp.set(u.b.key_pobyt) ];
  back.set(object('ida',the_duakce.get,'idp',idp,'tit',the_title.get,'bck',xback));
  header.zpet.display(1);
  panel.focus(1); // bez vyvolání onfocus
  the_duakce.set(xakce);
  header.fill(conc('<i>',xback,': ',xnadpis,'</i>'));
  reload(xpobyt);
  [ u.b.browse_count; page.evd.onclick ];
}
proc akce_back() {
  the_duakce.set(back.get('ida'));
  the_title.set(back.get('tit')); header.fill(the_title.get);
  reload(back.get('idp'));
  switch(back.get('bck'),
  'AKTIVITA',{ page.jin.onclick },
  'EVIDENCE',{ evi.focus(1) });
}

# proc akce_evidence_os(id) { evi.evid_show(id); evi.focus(1) }
# proc akce_evidence_rod(id) { evi.evid_show_rodina(id); evi.focus(1) }

# 1. zobrazení normální nebo hlavní akce
use header:form _header   [  4,  0,,]
use u:     form _ucast    [  6, 20,,]  { tag:'akce1' }               // seznam účastníků
use page:  form _page     [400, 10,,]  { tag:'akce1' }
# záložka evidence
use evid:  form _evidence [400, 10,,]  { tag:'akce1', format:'n' }
use cmd:   form _cmd      [400,min_h-160,,]  { tag:'akce1', format:'n' }   // 490
use cmd2:  form _cmd2     [400,min_h-125,,]  { tag:'akce1', format:'' }
use alb:   form foto._alb [410, 32,,]  { tag:'akce0', format:'n' }
# záložka plateb
use pla:   form _platba   [400, 10,,]  { tag:'akce0', format:'n' }
use cmdp:  form _cmd_p    [400,min_h-160,,]  { tag:'akce0', format:'n' }
# záložka aktivity
use act1:  form _aktivity [420, 10,,]  { tag:'akce0', format:'n' }
use act2:  form _aktivity [700, 10,,]  { tag:'akce0', format:'n' }
# 2. zobrazení dětí
use u2:    form _ucast2  [   6, 20,,]  { tag:'akce2', format:'n' }   // seznam dětí

proc page_clear() {
  evid.evid_plain;
#   muz.init(1); zen.init(1); rod.init(1); pob.init(1); pob.s.browse_init; pob.d.browse_init;
#   [ has_skill('m'); u.develop.set('') ];
}
# --------------------------------------------------==> reload
proc reload(id_pobyt) { var filtr:text
  cmd.b_display(1);
  the_duakce.get;
  lst.the_akce.load(the_duakce.get);
  page_clear;
  filtr.set(1);
  [ u.lid.get; u.tym.get
  | u.lid.get; filtr.set("funkce IN (0,1,2)")
  | u.tym.get; filtr.set("funkce NOT IN (0,1,2)") ];
  [ u.b.browse_load(conc(filtr," AND funkce!=99 AND p.id_akce=",the_duakce.get),
      "IF(funkce<=2,1,funkce),_nazev",
      '','','','norowclick',
      conc('SET @akce:=',the_duakce.get,",@soubeh:=",the_soubeh.get,
              ",@app:='",sys('ezer','options','app'),"'"));
    u.b.browse_focus;
    { id_pobyt; { u.b.raise('onrowclick',id_pobyt)
                | u.b.browse_seek(conc('p.id_pobyt=',id_pobyt)) }
    | u.b.raise('onrowclick') }
  ];
}
# --------------------------------------------------==> jump
# skok na jiného účastníka akce
proc jump(ido) { var idp:number
  idp.set(ask('akce2_ido2idp',ido,the_duakce.get)); idp;
  u.b.raise('onrowclick',idp);
  evid.rod.cleni.raise('onrowclick',ido);
}
# --------------------------------------------------==> neni_ulozeno
# ochrana proti neuložení změny
proc neni_ulozeno() { var no: number
  no.set(not(evid.evid_same));
  [ no; echo('neni_ulozeno!');
    warning('neuložené změny pro pobyt <b>',u.b._nazev.get,'</b> použij [Zpět] nebo [Uložit]');
    u.b.browse_active(u.old_row.get) ];
  return(no)
}
# --------------------------------------------------==> clear_zmeny
# obsluha označení změněných polí
proc clear_zmeny(tables) {
  zmeny.set(0);
#   u.b.selected('clear'); pob.d.selected('clear');
#   set_css_changed(tables,'zmeneny');
}
# --------------------------------------------------------------------==> přidání na akci / k pobytu
var pall: object
proc pobyt_add(p,i) {  // používá [Nový pobyt] a panely PridaniJmenem1, PridaniJmenem2 a PridaniAkce
  var ret: object
  p.chck.get;
  pall.set(p.all.get);
  // zamezení duplicit
  ret.set(ask('akce2_pridej',the_duakce.get,pall.get));
  { ret.ok; reload(ret.pobyt);
  | warning(ret.msg) }
}
proc ucast_add(p,i) {  // používá panel PridaniJmenem1
  var ret: object
  p.chck.get;
  pall.set(p.all.get);
  // zamezení duplicit
  ret.set(ask('akce2_pridej_k_pobytu',the_duakce.get,the_pobyt.get,pall.get));
  { ret.ok; reload(the_pobyt.get);
  | warning(ret.msg) }
}
# ================================================================================================== ovládání
# -----------------------------------------------------------------------------------------==> _cmd2
# operace nad pobyty - nesmí být rozpracována žádná změna
form _cmd2 [,,623,30] { css:'ae_work'
  proc set_state2(mode) { switch(mode,
    'show', {form.enable(1,'s|x')},
    'hide',{form.enable(0,'s|x')}
  )}
  label [4,9,80,] { title:"<b>Přidat na akci:</b>" }
  // PŘIDAT RODINU
  button pridat_2   [86,5,,] {tag:'x', title:'[fa-plug] ... rodinu',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Přidání manželského páru a dětí podle jména'
    proc onclick() {
      neni_ulozeno // warning
    | PridaniJmenem2.modal(240,50)
  } }
  // PŘIDAT OSOBU
  button pridat_1   [166,5,,] {tag:'x', title:'[fa-plug] ... osobu',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Přidání účastníka podle jména - samostatně nebo přidat k jiným'
    proc onclick() {
      neni_ulozeno // warning
    | PridaniJmenem1.modal(240,50)
  } }
  // PŘIDAT z AKCE
  button pridat_a   [245,5,,] {tag:'x', title:'[fa-plug] ... z jiné akce',
    skill:'yaa+|yaa+;faa+|faa+;caa+|caa+', help:'Hromadné přidání účastníků z jiné akce'
    proc onclick() {
      neni_ulozeno // warning
    | PridaniAkce.modal(240,50)
  } }
  // NOVÝ POBYT - SINGL
  button [356,5,,] {tag:'s', title:'[fa-heart-o] .. neevidovanou osobu', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    help:'Vytvoření nového pobytu s novou osobou bez rodiny a vložení jako účastníka'
    proc onclick() {
      cmd.mode.set('novy_singl'); // příznak pro "nová osoba + pobyt" (bez rodiny)
      cmd.b_display(0);
      // skryj data pro rodinu a 3. sloupec
      ucast.evid.rod.hide_rodina; ucast.evid.pob.new_pobyt;
      ucast.evid.rod.enable(0,'.*');
      ucast.evid.os2.enable(0,'.*'); ucast.evid.pob2.enable(0,'.*');
      ucast.evid.os2.init_osoba(0); ucast.evid.pob2.new_spolu;
      // inicializuj osobu + vyznač povinná pole
      ucast.evid.os1.new_osoba(0); ucast.evid.pob1.new_spolu;
      // změnit způsob pobytu lze až po vložení osoby
      ucast.evid.pob1.enable(0,'.*');
      // uprav viditelnost tlačítek
      set_state2('hide'); cmd.set_state('new');
  } }
  // NOVÝ POBYT - RODINA
  button [514,5,,] {tag:'s', title:'[fa-heart] .. neev. rodinu', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vytvoření nového pobytu s novou rodinou a 1-2 příslušníky (a vložení jako účastníků)'
    proc onclick() {
      cmd.mode.set('novy_pobyt'); // příznak pro "nová rodina + pobyt"
      cmd.b_display(0);
      // inicializuj rodinu jako skupinu, pobyt + vyznač povinná pole
      ucast.evid.rod.new_rodina; ucast.evid.pob.new_pobyt;
      // inicializuj osoby vč. případně i neviditelnou druhou + vyznač povinná pole
      ucast.evid.os1.new_osoba(1); ucast.evid.pob1.new_spolu;
      ucast.evid.os2.new_osoba(1); ucast.evid.pob2.new_spolu;
      ucast.evid.os2.enable(1,'.*');
      // změnit způsob pobytu lze až po vložení osob
      ucast.evid.pob1.enable(0,'.*'); ucast.evid.pob2.enable(0,'.*');
      // uprav viditelnost tlačítek
      set_state2('hide'); cmd.set_state('new');
  } }
}
# ------------------------------------------------------------------------------------------==> _cmd
# změny v evidenci konkrétního pobytu a jeho účastníků
form _cmd [,,623,30] { css:'ae_work'
  var mode=''           // novy_clen | novy_pobyt | novy_singl | ''
  proc set_state(_mode) { switch(_mode,
    'new', {form.enable(1,'z'); form.enable(0,'x'); form_mode.set('new')}, // blok umístění role
    'edit',{form.enable(1,'s'); form.enable(0,'x')},
    'show',{form.enable(0,'s'); form.enable(1,'x'); form_mode.set('show')}
  )}
  // ZPĚT
  label  [1,0,119,30] { css:'ae_parm', skill:'yaa;faa;caa' }
  proc _reload(renew,ido) { // renew=0 vrácení původních dat a zhasnutí warningu, jinak znovunačtení
    set_state('show'); cmd2.set_state2('show');
    evid.evid_plain;
    ucast.evid.pob1.enable(1,'.*');
    ucast.evid.os2.enable(1,'.*'); ucast.evid.pob2.enable(1,'.*');
    ucast.evid.pob.enable(1,'.*'); ucast.evid.rod.enable(1,'.*');
    ucast.evid.rod.cleni.enable(1);
    warning;
    [ renew; reload(the_pobyt.get) | u.b.load_zalozka ];
    [ ido; ucast.evid.rod.cleni.raise('onrowclick',ido) ];
    mode.set('');
  }
  button [7,6,,] { tag:'s,z',title:'[fa-undo] Zpět',help:'Neměnit změněná data',skill:'yaa;faa;caa'
    proc onclick() {
      eq(mode.get,'novy_pobyt'); _reload(0,0);
    | eq(mode.get,'novy_singl'); _reload(0,0);
    | ucast.evid.rod.cleni.browse_count; _reload(0,ucast.evid.rod.cleni.key_osoba.get)
    | _reload(1,0);
  } }
  // ULOŽIT
  button [60,6,,] { tag:'s', title:'[fa-save] Uložit',  help:'Uložit změněná data',
                skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    proc onclick() { var ok:number, idr:number, ido:number, war:text
      war.set('');
      // uložení změn
      eq(mode.get,'novy_singl');
      # ---------------------==> vytvoření pobyt+osoba+spolu
      // kontrola dostatečnosti údajů
      [ ucast.evid.os1.jmeno.get    | war.set(conc(war,' křestní jméno, ')) ];
      [ ucast.evid.os1.prijmeni.get | war.set(conc(war,' příjmení, ')) ];
      [ war; alert("Pozor: aspoň ",war," ... musí být vyplněné"); return ];
      // pobyt
      ucast.evid.pob.key_akce.set(the_duakce.get); ucast.evid.pob.key_akce.change;
      ucast.evid.pob.i0_rodina.set(0); ucast.evid.pob.i0_rodina.change;
      the_pobyt.set(ucast.evid.pob.insert);
      // osoba a spolu a tvori
      ucast.evid.os1.kontakt.change; ucast.evid.os1.adresa.change; // singl má jen osobní údaje
      ido.set(ucast.evid.os1.insert);
      ucast.evid.pob1.key_spolu.set(the_pobyt.get); ucast.evid.pob1.key_spolu.change;
      ucast.evid.pob1.key_osoba.set(ido); ucast.evid.pob1.key_osoba.change;
      ucast.evid.pob1.insert;
      _reload(1,ido)
    | // pohlídání korektnosti případné úpravy pro ne-singla
      //[ ucast.evid.os1.same | ucast.evid.os1.correct | return(0) ];
      //[ ucast.evid.os2.same | ucast.evid.os2.correct | return(0) ];
      eq(mode.get,'novy_clen');
      # ---------------------==> vytvoření nového člena rodiny: osoba+tvori
      [ ucast.evid.os1.same
      | ido.set(ucast.evid.os1.insert);
        tvori.insert_record(object('id_osoba',ido,'id_rodina',ucast.evid.rod.key_rodina.get,
          'role',ucast.evid.os1.role.get));
        // možná přidáme do pobytu
        confirm("Rovnou přidat na akci?");
        ucast.evid.pob1.pridat.na_akci(ido);
      ];
      _reload(1,ido)
    | eq(mode.get,'novy_pobyt');
      # ---------------------==> vytvoření pobyt+osoby+spolu [+rodina+tvori]
      // 1.osoba a rodina - kontrola dostatečnosti údajů
      [ ucast.evid.rod.rodiny0.get  | war.set(conc(war,' název rodiny, ')) ];
      [ ucast.evid.os1.prijmeni.get | war.set(conc(war,' příjmení, ')) ];
      [ ucast.evid.os1.jmeno.get    | war.set(conc(war,' křestní jméno, ')) ];
      [ ucast.evid.os1.role.get     | war.set(conc(war,' role, ')) ];
      [ war; alert("Pozor: u první osoby chybí ",war," ... doplň údaje před uložením"); return ];
      // 2.osoba - kontrola dostatečnosti údajů (pokud je vyplněno aspoň jméno nebo příjmení)
      [ and(eq(ucast.evid.os2.prijmeni.get,''),eq(ucast.evid.os2.jmeno.get,''))
      | war.set('');
        [ ucast.evid.os2.prijmeni.get | war.set(conc(war,' příjmení, ')) ];
        [ ucast.evid.os2.jmeno.get    | war.set(conc(war,' křestní jméno, ')) ];
        [ ucast.evid.os2.role.get     | war.set(conc(war,' role, ')) ];
        [ war; alert("Pozor: u druhé osoby chybí ",war," ... doplň údaje před uložením"); return ]
      ];
      // rodina
      [ ucast.evid.rod.same; idr.set(0) | idr.set(ucast.evid.rod.insert); ucast.evid.rod.plain ];
      // pobyt
      ucast.evid.pob.key_akce.set(the_duakce.get); ucast.evid.pob.key_akce.change;
      [ idr; ucast.evid.pob.i0_rodina.set(idr); ucast.evid.pob.i0_rodina.change ];
      the_pobyt.set(ucast.evid.pob.insert);
      // 1. osoba a spolu a tvori
      [ ucast.evid.os1.same
      | ido.set(ucast.evid.os1.insert);
        [ idr; tvori.insert_record(
            object('id_osoba',ido,'id_rodina',idr,'role',ucast.evid.os1.role.get)) ];
        ucast.evid.pob1.key_spolu.set(the_pobyt.get); ucast.evid.pob1.key_spolu.change;
        ucast.evid.pob1.key_osoba.set(ido); ucast.evid.pob1.key_osoba.change;
        ucast.evid.pob1.insert; ];
      // 2. osoba a spolu - nevloží se, pokud nemá vyplněné aspoň jméno
      [ eq(ucast.evid.os2.jmeno.get,'')
      | ido.set(ucast.evid.os2.insert);
        [ idr; tvori.insert_record(
            object('id_osoba',ido,'id_rodina',idr,'role',ucast.evid.os2.role.get)) ];
        ucast.evid.pob2.key_spolu.set(the_pobyt.get); ucast.evid.pob2.key_spolu.change;
        ucast.evid.pob2.key_osoba.set(ido); ucast.evid.pob2.key_osoba.change;
        ucast.evid.pob2.insert; ];
      _reload(1,ido)
    | the_pobyt.get;
      # ---------------------==> oprava
      [ ucast.evid.rod.same
      | ucast.evid.rod.r.key(ucast.evid.rod.key_rodina.get); [ ucast.evid.rod.r.save ];
        ucast.evid.rod.t_role.changed;
        ask('akce_save_role',ucast.evid.rod.cleni.key_tvori.get,ucast.evid.rod.t_role.get) ];
      [ ucast.evid.pob.same | ucast.evid.pob.save; ];
      [ ucast.evid.os1.same | ucast.evid.os1.key; ucast.evid.os1.save; ];
      [ ucast.evid.os2.same | ucast.evid.os2.key; ucast.evid.os2.save; ];
      [ ucast.evid.pob1.same | ucast.evid.pob1.key; ucast.evid.pob1.save; ];
      [ ucast.evid.pob2.same | ucast.evid.pob2.key; ucast.evid.pob2.save; ];
      _reload(1,ucast.evid.rod.cleni.key_osoba.get)
    | error("Uložit co?")
    }
  }
  // VYŘADIT
  button [175,5,,] {tag:'x', title:'[fa-plug fa-rotate-180 fa-red] Zrušit celý pobyt', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vyřazení účastníka nebo páru z účasti na akci'
    proc onclick() {
      neni_ulozeno // warning
    | confirm("Opravdu vyřadit ",u.b._nazev.get,' (',u.b._jmena.get,") z této akce?");
      spolu.delete_record(conc('id_pobyt=',u.b.key_pobyt.get),9999);
      pobyt.delete_record(conc('id_pobyt=',u.b.key_pobyt.get));
      reload(0);
  } }
  // VYMAZAT
  button [481,5,,] {tag:'y', title:'[fa-times fa-red] Vymazat z evidence', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Vymazání informací o páru z evidence', format:'d'
    proc onclick() {
      neni_ulozeno // warning
    | confirm("Opravdu vymazat z evidence ",u.b._nazev.get,' (',u.b._jmena.get,") s celou rodinou?");
      alert('není hotovo - tady bude ještě jedno varování s výčtem rodiny a akcí, kterých se zúčastnila');
      reload(0);
  } }
  // PŘIDAT člena rodiny
  button novy_clen [344,5,,] {tag:'x', title:'[fa-heart-o] Nový člen rodiny', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
    help:'Přidání nového člana rodiny'
    proc onclick() { var _sex:number, _prijmeni:text
      neni_ulozeno // warning
    | ucast.evid.rod.key_rodina.get;
      mode.set('novy_clen');
      _prijmeni.set(ucast.evid.os1.prijmeni.get); _sex.set(ucast.evid.os1.sex.get);
      ucast.evid.os1.new_osoba(1);
      ucast.evid.os1.role.set('d'); ucast.evid.os1.role.change;
      ucast.evid.os1.sex.set(_sex); ucast.evid.os1.sex.change;
      ucast.evid.os1.prijmeni.set(_prijmeni); ucast.evid.os1.prijmeni.change;
      ucast.evid.os1.narozeni.change; ucast.evid.os1.jmeno.change;
      cmd2.set_state2('hide'); cmd.set_state('new');
      ucast.evid.pob1.enable(0,'.*'); ucast.evid.pob.enable(0,'.*');
      ucast.evid.rod.enable(0,'.*'); ucast.evid.rod.cleni.enable(0); ucast.evid.rod.t_role.display(0);
      ucast.evid.os2.enable(0,'.*'); ucast.evid.pob2.enable(0,'.*');
      cmd.b_display(0);
    | warning("není vybrána rodina, do které má být přidán nový člen")
  } }
  // procedury
  proc b_display(on) {
    u.b.enable(on);
#     [ on; u.b.browse_focus ]
  }
}
# ----------------------------------------------------------------------------------------==> _cmd_p
# uložení změn v platbách
form _cmd_p [,,623,30] { css:'ae_work'
  // Zpět a Uložit
  label  [519,0,102,30] { css:'ae_parm', skill:'yaa+;faa+;caa+' }
  button [525,4,,] {title:'Zpět',  help:'Neměnit změněné platby', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    proc onclick() {
      // potlačení ochrany proti neuložené změně
      pla.plain;
      reload(u.b.browse_key);
  } }
  button [571,4,,] {title:'Uložit',  help:'Uložit změny v platbách', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+'
    proc onclick() {
      var ok: number
      the_pobyt.get;
      // oprava
      [ pla.same | pla.save; pla.plain ];
      reload(the_pobyt.get);
    }
  }
  # uhrazení členského příspěvku na akci do pokladny
  label  [333,0,122,30] { css:'ae_parm', skill:'yaa+' }
  button [339,4,,] {title:'členský příspěvek',  help:'pokladna: zaplatit členský příspěvek',
    skill:'yaa+|yaa+'
    proc onclick() {
      var ret: object
      ret.set(ask('akce_platba_prispevek1',the_pobyt.get));
      ret.platit;
      [ confirm(ret.msg," - zaplatí nyní na akci do pokladny?");
        ret.set(ask('akce_platba_prispevek2',the_pobyt.get));
        warning(ret.msg); ]
    | alert(ret.msg);
    }
  }
}
# ================================================================================================== seznam
# ---------------------------------------------------------------------------------------==> _header
form _header [,,380,50] {
  proc fill(x) {
    head.set(conc("<div class='karta'>",x,"</div>"))
  }
  label head [0,2,*,50]  { title:'' }
  button zpet [-2,6,,] { title:'Zpět', help:'Navrátí zobrazení účastníků původní akce', format:'n',
    style:"z-index:5"
    proc onclick() { this.display(0); akce_back }
  }
  var soubeh_id:number
  button soubeh [-2,6,,] { title:'H/S', help:'Přepínač hlavní/souběžná akce', format:'n'
    proc onclick() {
      switch(the_soubeh.get,
      1,{ panel.display(2,'akce2');
          soubeh_id.set(ask('select1','id_duakce','akce',conc('id_hlavni=',the_duakce.get)));
          akce_load(soubeh_id.get)},
      2,{ panel.display(2,'akce1');
          soubeh_id.set(ask('select1','id_hlavni','akce',conc('id_duakce=',the_duakce.get)));
          akce_load(soubeh_id.get)}
      )
  }}
}
# ----------------------------------------------------------------------------------------==> _ucast
form _ucast [,,400,] { css:'ds_form'
  // legenda
  const NESTANOVENA = "<span class='blue'> nestanovena cena </span>"
  const DLUZNIK =     " <span class='yellow'> dlužník </span>"
  var old_row= 0
  proc legenda(cenik,cena) {
    cenik; leg.set(conc("MÁ CENÍK &nbsp;&nbsp; ",DLUZNIK.get," &nbsp;&nbsp; ",NESTANOVENA.get))
  | cena; leg.set(conc("MÁ PEVNOU CENU &nbsp;&nbsp; ",DLUZNIK.get))
  | leg.set('')
  }
  label leg [10,12,232,11]
  // omezení browse
  check lid [273,7,65,15] { title:'účastníci', format:'t', value:'1', proc onchange() { reload(0) }}
  check tym [340,7,43,15] { title:'tým', format:'t', value:'1', proc onchange() { reload(0) }}
  // seznam účastníků
  browse b [0,26,,] {buf_rows:200, rows:21, qry_rows:1, key_id:'key_pobyt',
    optimize:°{ask:'akce_browse_ask'}, css_rows:"dluh,1:yellow,2:blue"
    // klíče
    show key_pobyt
    show _empty         // 1 pokud je pobyt prázdný
    show key_akce
    show key_spolu
    show key_osoba
    show key_rodina
    // akce
    show dnu
    show datum_od
    // zobrazení
    show _nazev [,,100,] { title:'příjmení', format:'s+q*'}
    # varianta A plná jména
    show _jmena [,,180,] { title:'jméno/a', format:'tsq%' }
    # varianta B na úkor _jmena
    show c_suma  [,,0,] { title:'cena', format:"r" }
    show platba  [,,0,] { title:'platba', format:"rsq=" }
    # varianta C na úkor _jmena
    show fotka   [,,0,] { title:'fotka', format:'rsq*', help:'soubor s fotografií' }
    # je vždy vidět
    show xfunkce [,,40,] { title:'fce', format:'rq#s', map_pipe:ms_akce_funkce.zkratka, help:'funkce na akci'}
    show skupina [,,30,] { title:'sk.', format:'rq=s:e', help:'číslo skupinky'}
    // barvení
    show dluh
    // údaje ucast.evid.rod
    show r_spz, show r_svatba, show r_datsvatba, show r_rozvod,
    show r_ulice, show r_psc, show r_obec, show r_stat,
    show r_telefony, show r_emaily, show r_umi, show r_note
    // údaje ucast.evid.rod.cleni
    show r_cleni // naplní browse pro rodinu daty jejích členů
    // údaje ucast.evid.pob
    show p_poznamka, show pokoj, show budova, show funkce, show prednasi, show skup,
    // platby
    show luzka, show pristylky, show kocarek, show pocetdnu, show strava_cel, show strava_pol,
    show c_nocleh, show c_strava, show c_program, show c_sleva, show datplatby,
    show cstrava_cel, show cstrava_pol, show svp, show zpusobplat, show naklad_d, show poplatek_d,
    show platba_d, show zpusobplat_d, show datplatby_d, show ubytovani, show cd, show avizo,
    show sleva, show vzorec, show duvod_typ, show duvod_text,
    // klíč první a druhé osoby na akci
    show ido1, show ido2

    // změna
    proc load_zalozka {
      switch(zalozka.get,
      'evid', {
        ucast.evid.pob.id.set(key_pobyt.get);
        page.evd.last.set(key_pobyt.get);
        ucast.evid.pob.key(the_pobyt.get);
        ucast.evid.rod.cleni.browse_fill(r_cleni.get,'~');
        ucast.evid.pob.skup.browse_fill(skup.get,'~');
        [ ucast.evid.pob.skup.browse_count;
          ucast.evid.pob.skup.raise('onrowclick',key_pobyt.get,0,0,1) ];
        ucast.evid.os1.key_osoba.set(ido1.get);
        ucast.evid.os2.key_osoba.set(ido2.get);
        reload_evid
      },
      'plat',{
        pla.key(key_pobyt.get); pla.nove; copy_by_name(b,pla.get); pla.ini;
        page.plt.last.set(key_pobyt.get);
      },
      'akce',{
        act1.ucasti(ido1.get); act2.ucasti(ido2.get);
        page.jin.last.set(key_pobyt.get);
      },
      'foto',{
        alb.galery('rodina',key_rodina.get);
        page.fot.last.set(key_pobyt.get);
      },
      {stop}
      );
      // označ nedávno změněné hodnoty, chce-li se to
      [ zmeny.get;
#         pob.d.selected('clear');
        set_css_changed(array(
            array(ucast.evid.rod,'rodina',ucast.evid.rod.key_rodina.get)
#             array(muz,'osoba',id_m.get),
#             array(zen,'osoba',id_z.get),
#             array(pob,'pobyt',key_pobyt.get),
#             array(pla,'pobyt',key_pobyt.get)
          ),
          'zmeneny',
          zmeny.get('chngs'));
#         pob.d.selected('set',zmeny.get('osoby'));
      ];
    }
    proc reload_evid() {  var id2:number, row:number
      ucast.evid.rod.display(1,'r|s'); ucast.evid.pob.skup.display(1);
      copy_by_name(b,ucast.evid.rod.get);
      id2.set(ucast.evid.os2.key_osoba.get);
      ucast.evid.rod.cleni.raise('onrowclick',ucast.evid.os1.key_osoba.get);
      row.set(ucast.evid.rod.cleni.browse_active);
      [ eq(ucast.evid.cmode.get,2);
        { id2; ucast.evid.os2.enable(1,'.*'); ucast.evid.pob2.enable(1,'.*');
          ucast.evid.rod.cleni.raise('onrowclick',id2.get);
          ucast.evid.rod.cleni.browse_active(row)
        | ucast.evid.os2.enable(0,'.*'); ucast.evid.pob2.enable(0,'.*');
        }
      ];
      ucast.evid.pob.show_pobyt;
      cmd.enable(0,'s');
      cmd.b_display(1);
    }
    proc onrowclick() {
      b.browse_count;
      neni_ulozeno // warning
    | b.browse_count;
      page.page_init;
      old_row.set(b.browse_active);
      // přechod na jiný pobyt
      ucast.evid.os1.init; ucast.evid.os2.init;
      ucast.evid.pob1.init; ucast.evid.pob2.init;
      ucast.evid.rod.key_pobyt.set(key_pobyt.get);
      the_pobyt.set(key_pobyt.get);
      { _empty.get; ucast.evid.pob.init; the_pobyt.set(key_pobyt.get);
        ucast.evid.rod.init; ucast.evid.rod.cleni.browse_init;
        confirm("Tento pobyt je bez účastníků, mám jej smazat?");
        pobyt.delete_record(conc('id_pobyt=',key_pobyt.get));
        reload(0)
      | not(_empty.get); copy_by_name(b,ucast.evid.pob.get);
        load_zalozka
    } }
    proc onclick() {
#       _vek.width;   _vek.width(0); _vzd.width(0); fotka.width(0);
#                     platba.width(50); c_suma.width(50); _jmena.width(78)
#     | platba.width; platba.width(0); c_suma.width(0); _jmena.width(180)
#     | _vek.width(20); _vzd.width(20); fotka.width(20); _jmena.width(117)
      platba.width; platba.width(0); c_suma.width(0); _jmena.width(180)
    | platba.width(35); c_suma.width(35); _jmena.width(108)
    }
    proc onrefreshed() { h_change_b }
  }
}
# ---------------------------------------------------------------------------------------==> _ucast2 - účast dětí
form _ucast2 [,,400,] { css:'ds_form'
  view p: table pobyt
  view a: table akce   { join:'ON a.id_duakce=p.id_akce' }
  view s: table spolu  { join:'USING(id_pobyt)' }
  view o: table osoba  { join:'ON s.id_osoba=o.id_osoba' }
  view t: table tvori  { join_type:'LEFT', join:'ON t.id_osoba=o.id_osoba' }
  // seznam dětí účastníků hlavní akce
  browse b [0,26,,] {buf_rows:200, rows:27, qry_rows:1
    show key_akce  {data:p.id_akce}
    show key_pobyt {data:p.id_pobyt}
    show key_spolu {data:s.id_spolu}
    show key_osoba {data:o.id_osoba}
    show key_tvori {data:t.id_tvori}
    show prijmeni [,,100,] { title:'příjmení', format:'s+q*', data:o.prijmeni }
    show jmeno    [,,180,] { title:'jméno', format:'tsq%', data:o.jmeno }
    show kat      [,,50,]  { title:'kat', format:'tsq%', data:s.dite_kat, map_pipe:ms_akce_dite_kat.zkratka }
  }
  proc reload() {
    b.browse_load(conc("p.id_akce=",the_hlavni.get," AND t.role='d'"))
  }
}
# -----------------------------------------------------------------------------------------==> _page
form _page {
  # ------------------------==> záložky
  proc tags(a,on,off) {
    form.set_css('ae_butt_off','ae_butt_on','p');
    a.set_css('ae_butt_on','ae_butt_off');
  }
  proc page_start() {
    zalozka.set('evid'); evd.onclick; tags(evd,'z','h|o|f'); cmdp.display(0); page_init }
  proc page_init() {
    evd.last.set(0); plt.last.set(0); jin.last.set(0); fot.last.set(0); evid.z_change('o') }
  label evd [ 12,0,120,20] {tag:'p', _sys:'*', title:'<b>Evidenční karta</b>', format:'c', css:'ae_butt_on'
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'z','h|o|f');
      zalozka.set('evid');
      [ u.b.browse_count; evid.display(1); cmd.display(1) | evid.display(0); cmd.display(0) ];
      pla.display(0); cmdp.display(0); alb.display(0); act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  label plt [152,0,120,20] {tag:'p', _sys:'*', title:'<b>Platba za akci</b>', format:'c',
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'h','z|o|f');
      zalozka.set('plat');
      evid.display(0); cmd.display(0);
      pla.display(1); cmdp.display(1);
      alb.display(0);
      pla.get.display(the_cenik.get,'cenik'); // omezení výpisu pokud není definován ceník
      pla.display(eq(the_soubeh.get,1),'deti'); // platby za děti
      act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  label jin [292,0,120,20] {tag:'p', _sys:'*', title:'<b>Přehled aktivit</b>', format:'c',
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'o','z|h|f');
      zalozka.set('akce');
      evid.display(0); cmd.display(0);
      pla.display(0); cmdp.display(0);
      alb.display(0);
      act1.display(1); act2.display(1);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  label fot [432,0,120,20] {tag:'p', _sys:'*', title:'<b>Fotky</b>', format:'c', /*skill:'a'*/
    var last=0
    proc onclick() {
      neni_ulozeno // warning
    | tags(this,'f','o|z|h');
      zalozka.set('foto');
      evid.display(0); cmd.display(0);
      pla.display(0); cmdp.display(0);
      alb.display(1);
      act1.display(0); act2.display(0);
      [ eq(last.get,the_pobyt.get) | u.b.load_zalozka; last.set(the_pobyt.get) ];
    }
  }
  # ------------------------==> manuální úprava šíře
  button wider [589,9,,] {type:'html', title:'[fa-toggle-right]', style:'z-index:5;margin-top:-16px'
    proc onclick() { eq(evid.cmode.get,2); ucast.narrow | ucast.wide } }
  label pframe [0,16,873,min_h-191] { css:'ae_work'}
  # ------------------------==> TEST
#   button [495,9,,] {type:'html', title:"ff!", style:'z-index:5;margin-top:-16px', skill:'m|m'
#     proc onclick() {
#       onfirstfocus;
# #       clear; echo(ask('data_transform',object('cmd','adresy,kontakty','run',1)));
#   }}
#   button [529,9,,] {type:'html', title:"fiš", style:'z-index:5;margin-top:-16px', skill:'m|m'
#     proc onclick() {
#       alert(ask('fiserka'));
#   }}
  button [560,9,,] {type:'html', title:"[fa-beer]", style:'z-index:5;margin-top:-16px', skill:'m|m'
    help:"reset karty"
    proc onclick() {
      onfirstfocus; cmd.enable(1,'.*'); cmd2.enable(1,'.*'); reload(the_pobyt.get);
  }}
#   # ------------------------==> trasování
#   label mytrace [0,250,250,80] { style:"z-index:99;overflow:auto" }
#   proc my_set(msg) { mytrace.set(msg) }
#   proc my_app(msg) { mytrace.set(conc(mytrace.get,'<br>',msg)) }
}
# -------------------------------------------------------------------------------------==> _evidence
form _evidence {
  var cmode: number    // sloupce osob: 1=jeden, 2=dva
  var rmode: number    // bloky osob: iae-iep-
  var zmode: text      // o | p
  var back: text       // pozadí pro 2/3 sloupce
  label frame [0,16,873,min_h-191] { css:'ae_work'}
  # ------------------------==> kontextové_menu
  menu { type:'context', join:frame
    item { title:'zkontrolovat skupinky', skill:'yaa+;faa+;caa+',
      proc onclick () { alert(ask('akce_skup_check',the_duakce.get)) } }
    item { title:'přečíslovat skupinky podle VPS', skill:'yaa+;caa+',
      proc onclick () { alert(ask('akce_skup_renum',the_duakce.get)) } }
    item { title:'přečíslovat skupinky podle PPS', skill:'faa+',
      proc onclick () { alert(ask('akce_skup_renum',the_duakce.get)) } }
    item { title:'-obarvit změněné údaje'
      proc onclick () { var ret:object
#         u.b.selected('clear');
#         pob.d.selected('clear');
        ret.set(ask('akce_zmeny',the_duakce.get,
          prompt("zadej stáří obarvených změn v hodinách",72)));
        not(ret.errs);
#         u.b.selected('set',ret.pobyt);
        zmeny.set(ret);
#         u.b.reload_pobyt
      | warning(ret.errs)
    } }
    item { title:'... zrušit obarvení změn' proc onclick () {
#         clear_zmeny(array(rod,muz,zen,pob,pla,Dite.dite))
    } }
    item { title:'-m: opravit i0_rodina,pouze', skill:'m'
      proc onclick () { alert(ask('data_transform',object('cmd','i0_rodina,pouze','akce',the_duakce.get))) } }
  }
  proc evid_same() { return(and(rod.same,os1.same,pob.same,pob1.same,pob2.same,os2.same)) }
  proc evid_plain() { rod.plain; os1.plain; pob.plain; pob1.plain; pob2.plain; os2.plain }
# --------------------------------------------------==> evid_clear
#   proc evid_clear() {
#     ucast.evid.rod.not_rodina;
#     ucast.evid.os1.clear_osoba; ucast.evid.os1.show_osoba(0);
#     ucast.evid.os2.clear_osoba; ucast.evid.os2.show_osoba(0);
#     ucast.evid.pob1.new_spolu;
#     ucast.evid.pob2.new_spolu;
#     ucast.evid.pob.init_pobyt;
#   }
  proc evid_init() {
    cmode.set(2); rmode.set(1);
    osoba_config.start; spolu_config.start; pobyt_config.start; rodina_config.start;
    [ lt(sys('screen','width'),1280); c_change(1) ];
    ucast.evid.os1.init; ucast.evid.os1.set_mode(2,'U');
    ucast.evid.os2.init; ucast.evid.os2.set_mode(2,'U');
    ucast.evid.pob1.init; ucast.evid.pob1.pece_sel.set_attrib('par',
      object('fce','akce_auto_deti','akce',the_duakce.get,'save','value'));
    ucast.evid.pob2.init; ucast.evid.pob2.pece_sel.set_attrib('par',
      object('fce','akce_auto_deti','akce',the_duakce.get,'save','value'));
    ucast.evid.pob.init; ucast.evid.rod.init; ucast.evid.rod.cleni.browse_init;
    ucast.evid.pob1.os.set(ucast.evid.os1);
    ucast.evid.pob2.os.set(ucast.evid.os2);
#     evid_clear;
  }
  # změny sloupců
  proc c_change(n) {
    // 1 sloupec
    eq(n,1); eq(cmode.get,2); cmode.set(1); page.wider.set('[fa-toggle-right]');
    os2.display(0); pob2.display(0);
#     rod.property(°{left:255});//,smooth:1});
#     pob.property(object('left',255));//,'smooth',object('onproperty',this)));
    frame.set_css('page_2clmn','page_3clmn')
  | // 2 sloupce
    eq(n,2); eq(cmode.get,1); cmode.set(2); page.wider.set('[fa-toggle-left]');
    os2.display(1); pob2.display(1);
#     rod.property(°{left:505});//,smooth:1});
#     pob.property(°{left:505});//,smooth:1});
    frame.set_css('page_3clmn','page_2clmn');
  }
  proc onproperty() { form.display(0,'2') }
  # změna v některém z formulářů
  proc d_change(x) { echo('změna v ',x);
    cmd.set_state('edit'); cmd2.set_state2('hide');
  }
  # změny překryvu formulářů
  proc z_change(x) {
    and(eq(x,'o'),not(eq(zmode.get,x))); zmode.set('o');
    foreach(array(os1,os2,rod),z_up); foreach(array(pob1,pob2,pob),z_down);
  | and(eq(x,'p'),not(eq(zmode.get,x))); zmode.set('p');
    foreach(array(os1,os2,rod),z_down); foreach(array(pob1,pob2,pob),z_up);
  }
  proc z_up(x)   { x.get.set_css('shift_up','shift_down'); x.set_css('shift_up','shift_down','.*') }
  proc z_down(x) { x.get.set_css('shift_down','shift_up'); x.set_css('shift_down','shift_up','.*') }
  # osoba 1 a 2
  use os1: form _osoba2x [372,20,,] { //format:'n' left=5                     // ==> use os1
    proc on_click() { evid.z_change('o') }
    proc onchanged() { evid.d_change('o1') }
  }
  use os2: form _osoba2x [623,20,,] {tag:'2', //format:'n' left=255           // ==> use os2
    proc on_click() { evid.z_change('o') }
    proc onchanged() { evid.d_change('o2') }
  }
  # rodina
  use rod: form _rodina2 [4,20,,] { //format:'n' left=505                     // ==> use rod
    // pozor - proměnné jsou vzhledem k db.akce2._rodina2
    proc onchanged() { evid.d_change('r') }
    proc on_click() { evid.z_change('o') }
    proc neni_ulozen() { return(neni_ulozeno) }
    proc show_osoby(ido,ids,cleni) {
      eq(ucast.evid.cmode.get,2); ucast.evid.os1.key;   // 2 sloupce a 1. neprázdný
      [ eq(ido,ucast.evid.os1.key);                     //   čteme do 1.
        copy_by_name(cleni,ucast.evid.os1);
        ucast.evid.os1.show_osoba(0);
        ucast.evid.pob1.load_spolu(ids,cleni)
      | ucast.evid.os2.key(ido);                        //   nebo do 2.
        copy_by_name(cleni,ucast.evid.os2);
        ucast.evid.os2.enable(1,'.*');
        ucast.evid.os2.show_osoba(0);
        ucast.evid.pob2.enable(1,'.*');
        ucast.evid.pob2.load_spolu(ids,cleni)
      ]
    | ucast.evid.os1.key(ido);                          // 1 sloupec nebo 1. prázdný
      copy_by_name(cleni,ucast.evid.os1);
      ucast.evid.os1.show_osoba(0);
      ucast.evid.pob1.load_spolu(ids,cleni)
    }
    proc zmena_rodiny() {
      reload(ucast.the_pobyt.get);
      [ u.b.browse_count; page.evd.onclick ];
    }
  }
  # pobyt
  use pob1: form _spolu  [372,min_h-235,,] { //format:'n'                     // ==> use pob1
    proc on_click() { evid.z_change('p') }
    proc onchanged() { evid.d_change('p1') }
  }
  use pob2: form _spolu  [623,min_h-235,,] {tag:'2', //format:'n'             // ==> use pob2
    proc on_click() { evid.z_change('p') }
    proc onchanged() { evid.d_change('p2') }
  }
  use pob:  form _pobyt [4,min_h-10,,] //{ format:'n' }     // 650 => 207
}
# ----------------------------------------------------------------------------------------==> _pobyt
panel pobyt_config [,,200,120] {type:'popup', title:"Podrobnosti údajů"
  var tit='společné údaje o pobytu', grp='Z'
  proc start() { grp.set(get_cookie(conc(sys('root'),'_conf_pobyt'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    cnfg._back;  evid.pob.id.get; evid.pob.show_pobyt | evid.pob.init_pobyt }
  proc tune() { _old.set(grp.get); evid.z_change('p'); panel.modal }
  use cnfg: form _cnfg
  form _cnfg {
    check z [0, 0,200,] { title:"základní údaje", format:'d', value:'1'}
    check p [0,20,200,] { title:"společná poznámka k pobytu", format:'t', proc onchange() { _tuned }}
    check u [0,40,200,] { title:"platba za pobyt", format:'t', proc onchange() { _tuned }}
    check d [0,60,200,] { title:"platba za pobyt dětí", format:'t', proc onchange() { _tuned }}
    check s [0,80,200,] { title:"členové skupiny", format:'t', proc onchange() { _tuned }}
    button  [ 0,100,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_pobyt'),grp.get); panel.close(1) }}
    button  [85,100,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; evid.pob.show_pobyt; panel.close(1) }}
    proc _tuned() { grp.set(cconc(p.get,'P,',s.get,'S,',u.get,'U,',d.get,'D,','Z'));
      evid.pob.show_pobyt }
    proc _back() { z.set(contains('Z',grp.get)); p.set(contains('P',grp.get));
      s.set(contains('S',grp.get)); u.set(contains('U',grp.get)); d.set(contains('D',grp.get)); }
  }
  var _old= 'Z'
}
form _pobyt [,,0,62] {
  proc onchanged() { evid.d_change('p') }
  proc onclick() { on_click }
  proc init_pobyt() { evid.pob.display(0,'[^f]'); }
  proc show_pobyt() { var height:number, tags:text, tit:text
    form.display(0,'[^f]');
    tags.set('F');
    [ contains('P',pobyt_config.grp.get); tags.set(conc(tags,',p')) ];
    [ contains('U',pobyt_config.grp.get); tags.set(conc(tags,',u')) ];
    [ contains('D',pobyt_config.grp.get); tags.set(conc(tags,',d')) ];
    tags.set(conc(tags,',a'));
    [ contains('S',pobyt_config.grp.get); tags.set(conc(tags,',s')) ];
    height.set(sum(stack_forms(form,tags,0,'up'),10));
    //height.set(sum(form.stacks(tags,'up',0),10));
    frame.property(object('top',minus(60,height),'height',sum(height,-10)));   //-7
    [ contains('S',pobyt_config.grp.get); skupina.display(1);
      skupina.get; skup.display(1) ];
    // počítané údaje
    [ u.b.browse_count;
      celkem.set(sum(u.b.c_nocleh.get,u.b.c_strava.get,u.b.c_program.get,u.b.c_sleva.get)) ];
  }
  proc new_pobyt() {
    form.init; skup.display(0);
  }

  proc on_click() { evid.z_change('p') }
  view p: table pobyt
  const Lr=0
  label frame [0,0,360,50] {tag:'f', css:'ae_form2', title:'společné údaje o pobytu' }
  field id [304,-12,50,] {tag:'F', data:p.id_pobyt, format:'ro', style:'color:white', css:'Label',
                          help:' ', tabindex:0 }
  field key_akce { data:p.id_akce }
  field i0_rodina { data:p.i0_rodina }
  menu { type:'context', join:frame
    item { title:'konfigurace formuláře', proc onclick () { pobyt_config.tune } }
    item { title:'ukázat změny', proc onclick () { track.back_show('pobyt',the_pobyt.get) } }
#     item { title:'-naplnit i0_rodina', skill:'a|a',proc onclick () { alert(ask('akce_i0_rodina',the_duakce.get)) }}
  }

  // p = poznámka
  edit  p_poznamka [5,0,349,74] {tag:'p', data:p.poznamka, title:'^poznámka k pobytu'}
  label [5,74,1,3] { tag:'p' } // oprava

  // u = úhrada
  field celkem      [5,0,50,] {tag:'u', format:'dr', title:'^poplatek'}
  field platba      [60,0,50,] {tag:'u', data:p.platba, format:'r', title:'^uhrazeno'}
  select zpusobplat [120,0,86,] {tag:'u', type:'map', data:p.zpusobplat, title:'^jak',
                                 options:ms_akce_platba.zkratka, format:'u'}
  field datplatby   [216,0,84,] {tag:'u', type:'date', data:p.datplatby, title:'^kdy'}

  // d = úhrada za děti
  field poplatek_d [5,0,50,] {tag:'d', data:p.poplatek_d, format:'r', title:'^poplatek/d'}
  field platba_d   [60,0,50,] {tag:'d', data:p.platba_d, format:'r', title:'^uhrazeno'}
  select zpusobplat_d [120,0,86,] {tag:'d', type:'map', data:p.zpusobplat_d, title:'^jak',
                                 options:ms_akce_platba.zkratka, format:'u'}
  field datplatby_d [216,0,84,] {tag:'d', type:'date', data:p.datplatby_d, title:'^kdy'}

  // ubytování
  field pokoj     [7,0,82,] {tag:'a', data:p.pokoj, title:'^pokoj(e)', format:'n'}
  field budova    [95,0,56,] {tag:'a', data:p.budova, title:'^budova', format:'n'}

  // skupinka
  label [5,0,1,35] { tag:'s' } // výplň pro skupinky
  field skupina [158,-100,37,] { tag:'x', data:p.skupina, format:'r', title:'^skupinka'}
  browse skup [Lr+206,-105,,] { tag:'x', rows:4
    show id_pobyt //{data:pp.id_pobyt}
    show jmeno [,,120,] {title:'členové skupinky'}
    proc onrowclick () { var line:number
      line.set(this.browse_active);
      u.b.raise('onrowclick',id_pobyt.get);
      this.browse_active(line);
    }
  }

  // funkce
  select funkce   [7,35,82,] {tag:'a', type:'map', data:p.funkce, format:'un',
    options:ms_akce_funkce.zkratka, title:'^společná funkce'}
  select prednasi [96,35,101,] {tag:'a', type:'map', data:p.prednasi, format:'un',
    options:ms_akce_prednasi.zkratka, title:'^přednáš(ej)í'}
  label [5,65,1,1] { tag:'a' } // oprava
}
# ----------------------------------------------------------------------------------------==> _spolu
panel spolu_config [,,200,60] {type:'popup', title:"Podrobnosti údajů"
  var grp='Z'
  proc start() { grp.set(get_cookie(conc(sys('root'),'_conf_spolu'),grp.get));
    [ contains('Z',grp.get) | grp.set(conc('Z',grp.get)) ];
    cnfg._back; spolu_show; }
  proc tune() { _old.set(grp.get); evid.z_change('o'); panel.modal }
  use cnfg: form _cnfg
  form _cnfg {
    check z [ 0, 0,200,] { title:"základní údaje",       format:'d', value:'1'}
    check p [ 0,20,200,] { title:"poznámka k účasti",    format:'t', proc onchange() { _tuned }}
    button  [ 0,40,,] { type:'submit', title:'Nastav', proc onclick() {
      set_cookie(conc(sys('root'),'_conf_spolu'),grp.get); panel.close(1) }}
    button  [85,40,,] { title:'Zpět', proc onclick() {
      grp.set(_old.get); _back; ucast.spolu_show; panel.close(1) }}
    proc _tuned() { grp.set(cconc(p.get,'P',1,'Z')); ucast.spolu_show }
    proc _back() { z.set(contains('Z',grp.get)); p.set(contains('P',grp.get)); }
  }
  var _old= 'Z'
}
form _spolu [,,0,270] {
  var os: object
  proc onchanged() { }
  proc onclick() { on_click }
  proc on_click() {}
  proc show_spolu() { var height:number, tags:text, tit:text
    form.display(0,'[^f]');
    { key_spolu.get;
      # je na akci
      tit.set('účastník akce ...'); tags.set('S');
      [ /*s_role.key;*/ contains('P',spolu_config.grp.get); tags.set(conc(tags,',p')) ];
      switch(s_role.key,
      0, { tit.set('jako host') },
      1, { tit.set('účastník akce') },
      2, { tags.set(conc(tags,',d'));   tit.set('dítě na akci') },
      3, { tags.set(conc(tags,',o,d')); tit.set('dítě s osobním pečovatelem') },
      4, { tags.set(conc(tags,',d'));   tit.set('dítě jako pomocný pečovatel') },
      5, { tags.set(conc(tags,',c'));   tit.set('osobní pečovatel'); pece_sel.set(pece_val.get) }
      );
      tags.set(conc(tags,',r'));
    | # není na akci
      tit.set('- - -'); tags.set('a');
    };
    frame.set(tit);
    height.set(sum(stack_forms(form,tags,10,'up'),0));
  //height.set(sum(form.stacks(tags,'up',10),0));
    frame.property(object('top',minus(265,height),'height',sum(height,10)));
  }
  // globální procedury
  proc new_spolu() {
    form.init; show_spolu; vyradit.display(0);
  }
  proc load_spolu(ids,cleni) {
    form.key(ids); key_spolu.set(ids); pecoun.set(0);
    [ ids; copy_by_name(cleni,form) ];
    [ eq(pfunkce.get,5); pecoun.set(1) ]; // 5: je na kartě Pečouni
    show_spolu
  }

  view s: table spolu

  label frame [0,0,242,50] {tag:'f', css:'ae_form2', title:'osobní údaje o pobytu' }
  field key_spolu [186,0,50,] {tag:'S', data:s.id_pobyt, format:'ro',
    style:'color:white', css:'Label', help:' ', tabindex:0 }
  field key_osoba { data:s.id_osoba }
  menu detail { type:'context', join:frame
    item { title:'konfigurace formuláře', proc onclick () { spolu_config.tune } }
    item { title:'ukázat změny', proc onclick () {
      key_spolu.get; track.back_show('spolu',key_spolu.get) } }
  }

  // p = poznámka
  edit  s_poznamka [5,0,231,74] {tag:'p', data:s.poznamka, title:'^poznámka k účasti', format:'n'}

  // r = role
  select s_role [55,2,90,] {tag:'r', type:'map', options:ms_akce_s_role.zkratka, format:'nu'
    data:s.s_role, title:'účast jako:',
      proc onchanged() { show_spolu }
  }

  // informace závislé na s_roli

  # d: skupinka dítěte a kategorie
  field skupinka [216,0,20,]   { tag:'d', data:s.skupinka, help:'skupinka', title:"skup.", format:'n' }
  // cenová kategorie pro FA
  field kat_orig { data:s.dite_kat }
  select s_dite_kat [54,0,130,] { tag:'d', type:'map', options:ms_akce_dite_kat.hodnota,
    data:s.dite_kat, title:'kategorie:', format:'nuw'
    proc onchanged() { var a:object
      // kategorii kontrolujeme pouze pro FA
      eq(substr(sys('ezer','options','app'),0,2),'fa');
      { a.set(ask('akce_test_dite_kat',this.key,evid.rod.cleni.narozeni.get,the_duakce.get)); a.ok
      | alert("POZOR: kategorie '",this.get,"' neodpovídá věku dítěte ",a.vek," let (k začátku akce)");
        this.key(kat_orig.get); this.plain; }
  }}

  # o: osobně opečovávané dítě + info "je pečoun"
  field pece_val [70,0,160,] { tag:'o', format:'no', title:'pečovatel:     ' }
  button [55,3,,] { tag:'o', title:'^', css:'db_evidence',
    proc onclick() { jump(evid.rod.cleni.pece_ido.get) } }

  # c: osobní pečovatel pro dítě ...
  field pece_key { data:s.pecovane }
  label [10,3,45,17] { tag:'c', title:"pečuje o:", format:'n'}
  select pece_sel [70,0,160,17] { tag:'c', type:'auto', par:°{fce:'akce_auto_deti'}, format:'n'
    proc onchanged() { pece_key.set(pece_sel.key); pece_key.change; }  }
  button [55,3,,] { tag:'c', title:'^', css:'db_evidence',
   proc onclick() { jump(evid.rod.cleni.pece_ido.get) } }
  field pfunkce { data:s.pfunkce }
  check pecoun [36,27,130,17] { tag:'c', title:"je v kolektivu pečounů", format:'n', value:'0'
    proc onchange () { // 0 => osobní & 'dědeček'
      this.get; pfunkce.set(5); pfunkce.change
    | pfunkce.set(0); pfunkce.change
  } }

#   field s_dite_kat [70,0,44,] {tag:'r', data:s.dite_kat, title:'role na akci'}
#   check          [5,Hz+20,80,] {tag:'z,r', data:s.dite_kat, title:'účastník'}

  # ------------------------==> přidat/vyřadit
  proc _reload_spolu(ido) { var ido1: number, ido2: number
    ido1.set(ucast.evid.os1.key_osoba.get); ido2.set(ucast.evid.os2.key_osoba.get);
    reload(the_pobyt.get);
    ucast.evid.os1.key_osoba.set(ido1); ucast.evid.os2.key_osoba.set(ido2);
    u.b.reload_evid;
    ucast.evid.rod.cleni.raise('onrowclick',ido);
  }
  button vyradit [150,1,,] { tag:'r', title:"Vyřadit z akce", format:'n', proc onclick() {
    pece_val.get;
    alert("před vyřazením je třeba vyjmout z osobní péče")
  | spolu.delete_record(conc('id_spolu=',form.key));
    _reload_spolu(ucast.evid.rod.cleni.key_osoba.get)
  }}
  button pridat [150,7,,] { tag:'a', title:"Přidat na akci", format:'n',
    proc onclick() { na_akci(os.key_osoba.get) }
    proc na_akci(ido) { var ret:object
      on_click;
      // přidání se zamezením duplicit
      ret.set(ask('akce2_pridej_k_pobytu',the_duakce.get,the_pobyt.get,
        object('id',ido,'role',ucast.evid.rod.cleni.role.get)));
      ret.spolu;
      load_spolu(ret.spolu,ucast.evid.rod.cleni);
      _reload_spolu(ido);
    | alert(ret.msg)
  }}
}
# ---------------------------------------------------------------------------------------==> _platba
form _platba { key_id:'id_pobyt'
  const Td= 230
  var cena: object
  label [2,27,527,Td+95] //{title:"<img src='img/ms2p.png'>" }
  proc ini() {
    // výpočet součtu cen a rozpis, došlé platby
    [ has_skill("yaa;faa;caa");
#       dosle_platby;
      rozpis_ceny;
      celkem.set(sum(c_nocleh.get,c_strava.get,c_program.get,c_sleva.get));
      naklad.set(sum(celkem.get,minus(c_sleva.get)));
#       the_soubeh.get; naklad_d.set(cena.get('naklad_d')); poplatek_d.set(cena.get('poplatek_d'))
    ];
    // obarvení tlačítka [Str.pol]
    or(u.b.cstrava_cel.get,u.b.cstrava_pol.get); stravy.set_css('cervena','cerna');
  | stravy.set_css('cerna','cervena')
  }
#   proc dosle_platby() {
#     doslo.set(ask('akce_platby',the_pobyt.get));
#   }
  // rozpis a zápis ceny
  button [10,47,,] { tag:'cenik', title:"Návrh ceny", help:"zapíše počet lůžek a strav"
    var ret: object
    proc onclick() {
      ret.set(ask('akce_pobyt_default',the_pobyt.get));
      copy_by_name(ret,form);
      vzorec.change; luzka.change; pocetdnu.change; svp.change;
      strava_cel.change; strava_pol.change; kocarek.change;
      navrh.set("pro zobrazení ceny je třeba
        <br>1. upravit (je-li třeba) a uložit navržené hodnoty,
        <br>2. dát <b>Zapsat cenu</b> <br>3. uložit");
    }
  }
  button [10,72,,] { tag:'cenik', title:"Zapsat cenu"
    proc onclick() {
      { not(or(u.b.cstrava_cel.get,u.b.cstrava_pol.get))
      | or(u.b.cstrava_cel.get,u.b.cstrava_pol.get);
        confirm("Pozor - jsou vyplněny speciální stravy. Pokračovat?")
      };
      { the_soubeh.get; cena.set(ask('akce_vzorec_soubeh',the_pobyt.get,the_duakce.get,the_soubezna.get))
      | cena.set(ask('akce_vzorec',the_pobyt.get)) };
      copy_by_name(cena.get,form);
      c_nocleh.change; c_strava.change; c_program.change; c_sleva.change;
      poplatek_d.change; naklad_d.change; ini
  } }
  // parametry ceny
  label [93,53,,] { tag:'cenik', title:"cena pro:" }
  select vzorec [143,51,148,] { tag:'cenik', type:'map0', data:pobyt.vzorec, help:"výběr vzorce pro organizátory",
    options:ms_cena_vzorec.zkratka }
  label [110,77,,] { tag:'cenik', title:"sleva:" }
  field sleva [143,74,50,] { tag:'cenik', data:pobyt.sleva, help:"Slevy pro potřebné účastníky", format:'r' }
  // zdůvodnění ceny podle vzorce nebo textem
  proc rozpis_ceny() {
    duvod_typ.get; navrh.display(0); duvod_text.display(1)
  | navrh.display(1); duvod_text.display(0);
    { the_soubeh.get; cena.set(ask('akce_vzorec_soubeh',the_pobyt.get,the_duakce.get,the_soubezna.get))
    | cena.set(ask('akce_vzorec',the_pobyt.get)) };
    navrh.set(cena.get('navrh'))
  }
  radio duvod_typ [7,100,284,Td-68] { data:pobyt.duvod_typ, value:'0', style:"border:1px solid gray"
    case [0,2,157,] { title:'cena podle položek ceníku', expr:'0' }
    case [158,2,122,] { title:'vlastní text s cenou', expr:'1' }
    proc onchange () { rozpis_ceny }
  }
  label navrh [10,119,280,Td-87] { tag:'cenik', css:'karta_info' }
  edit duvod_text [10,119,280,Td-87] { tag:'cenik', /*type:'html',*/ data:pobyt.duvod_text }
#   // platby
#   button [307,70,,] { title:"Aktualizace bankovních výpisů", skill:'yaa|yaa'
#     proc onclick() {
#       var msg: text
#       // aktualizace tabulky PLATBA
#       msg.set(ask('akce_rb_platby'));
#       [ eq(msg,'Nepřišly nové platby') | alert(substr(msg,0,300),' ...') ];
#   } }
#   button [491,70,,] { title:"Došlé platby", skill:'yaa|yaa'
#     proc onclick() { dosle_platby }
#   }
  label doslo [300,99,281,170] { style:"border-left:2px solid grey" }
  // nestandardní strava
  button stravy     [89,Td+37,37,] {tag:'b', title:'Str Po', style:'font-size:10px;height:19px;width:40px',
    //skill:'yaa+|yaa+;faa+|faa+',
    proc onclick() {
      has_skill("yaa+;faa+;caa+");
      Strava.dnu.set(u.b.dnu.get); // pokud jsou definovány výjimky z pravidelné stravy
      lt(Strava.dnu.get,15);       // 15 je maximálně možný počet řádků vyjímek ze stravy
      Strava.modal(240,50)
  } }
  // funkce
  proc nove() {
    navrh.set(''); doslo.set('');
  }
  // parametry pro tvorbu ceny
  field luzka       [10,Td+56,11,] {tag:'b', data:pobyt.luzka}
  field pristylky   [30,Td+56,11,] {tag:'b', data:pobyt.pristylky}
  field pocetdnu    [51,Td+56,11,] {tag:'b', data:pobyt.pocetdnu}                  // sémantika: počet nocí
  field kocarek     [71,Td+56,11,] {tag:'b', data:pobyt.kocarek}
  field strava_cel  [94,Td+56,11,] {tag:'b', data:pobyt.strava_cel}
  field strava_pol  [112,Td+56,11,] {tag:'b', data:pobyt.strava_pol}
  field svp         [136,Td+56,11,] {tag:'b', data:pobyt.svp, help:"počet dětí s vlastním pečovatelem"}
  // pouze u hlavní akce - platba za souběžnou
  field platba_d      [283,Td+48,50,] {tag:'b,deti', data:pobyt.platba_d, format:'nr'}
  select zpusobplat_d [339,Td+48,86,] {tag:'b,deti', type:'map', data:pobyt.zpusobplat_d,
                                     options:ms_akce_platba.zkratka, format:'nu'}
  field datplatby_d   [430,Td+48,84,] {tag:'b,deti', type:'date', data:pobyt.datplatby_d, format:'n'}
  // rozpis plateb
  field celkem      [225,Td+91,50,] {tag:'b', format:'dr', help:'částka požadovaná po účastníkovi'}
  field poplatek_d  [225,Td+48,50,] {tag:'b,deti', format:'dr', data:pobyt.poplatek_d,
                                   help:'částka požadovaná po účastníkovi za děti'}
  field naklad      [523,Td+91,50,] {tag:'b', format:'dr',
                                   help:'rozpočtovaná částka na účastníka = poplatek+sleva'}
  field naklad_d    [523,Td+48,50,] {tag:'b,deti', format:'dr', data:pobyt.naklad_d,
                                   help:'rozpočtovaná částka na děti = poplatek+sleva'}
  field c_nocleh    [10,Td+91,47,] {tag:'b', data:pobyt.platba1, format:'r'}
  field c_strava    [60,Td+91,47,] {tag:'b', data:pobyt.platba2, format:'r'}
  field c_program   [110,Td+91,47,] {tag:'b', data:pobyt.platba3, format:'r'}
  field c_sleva     [160,Td+91,47,] {tag:'b', data:pobyt.platba4, format:'r'}
  field platba      [283,Td+91,50,] {tag:'b', data:pobyt.platba, format:'r'}
  select zpusobplat [339,Td+91,86,] {tag:'b', type:'map', data:pobyt.zpusobplat,
                                   options:ms_akce_platba.zkratka, format:'u'}
  field datplatby   [430,Td+91,84,] {tag:'b', type:'date', format:'RUr:e', data:pobyt.datplatby}
  check avizo       [275,Td+107,50,] {tag:'b', title:"avízo", data:pobyt.avizo, format:'r'}
  // pevné texty
  label [13,32,,]   { tag:'cenik', title:'Rozpis ceny akce podle cenového vzorce akce a přehled příchozích plateb' }
  label [5,Td+128,,]  {tag:'b', title:'Cena zapsaná v evidenční kartě (použitá pro export do Excelu)',
                      style:"border-top:2px solid grey" }
  label [3,Td+41,100,] {tag:'b', title:'lůž. při. nocí koč.', help:'počet lůžek, přistýlek, nocí a kočárků'}
  label [134,Td+41,27,] {tag:'b', title:'SVP'}
  label [530,Td+76,52,] {tag:'b', title:'rozpočet'}
  label [283,Td+76,33,] {tag:'b', title:'zaplaceno'}
  label [180,Td+40,302,21] {tag:'b,deti', css:'karta', style:"z-index:0"}
  label [190,Td+59,20,] {tag:'b,deti', title:'^Děti', style:"color:white"}
  label [340,Td+76,71,] {tag:'b', title:'způsob platby'}
  label [431,Td+76,51,] {tag:'b', title:'dne'}
  label [16,Td+110,,] {tag:'b', title:'nocleh'}
  label [56,Td+110,,] {tag:'b', title:'+ strava'}
  label [107,Td+110,,] {tag:'b', title:'+ program'}
  label [163,Td+110,,] {tag:'b', title:'- sleva'}
  label [217,Td+110,56,] {tag:'b', title:'= poplatek'}
}
# -------------------------------------------------------------------------------------==> _aktivity
form _aktivity {
  var ido: number
  field jme [10,34,200,] { format:'o' }
  button [160,20,,] { title:'^evidence', css:'db_evidence',
    proc onclick() { evi.evid_osoba(ido.get) } }
  view a: table akce
  view p: table pobyt { join:'ON a.id_duakce=p.id_akce' }
  view s: table spolu { join:'USING(id_pobyt)' }
  browse akc [ 0,60,,] { rows:15, qry_rows:1
    show ida { data:a.id_duakce }
    show idp { data:p.id_pobyt }
    show ids { data:s.id_spolu }
    show rok  [,, 30,] { title:'rok', expr:"YEAR(a.datum_od)", format:'q*s-' }
    show akce [,,150,] { title:'název', data:a.nazev, format:'q*s' }
    show fce  [,, 30,] { title:'fce', data:p.funkce, map_pipe:ms_akce_funkce.zkratka, format:'q*s' }
    proc onsubmit() {
      akce_show(ida.get,idp.get,conc(akce.get,' ',rok.get),'AKTIVITA') }
  }
  proc ucasti(id_osoba) {
    form.display(id_osoba);
    id_osoba; ido.set(id_osoba);
    jme.set(ask('select',"CONCAT(prijmeni,' ',jmeno)",'osoba',conc('id_osoba=',id_osoba)));
    akc.browse_load(conc('a.spec=0 AND s.id_osoba=',id_osoba),"datum_od DESC")
  }
}
# ================================================================================= Přidání jménem 1
panel PridaniJmenem1 [,,320,280] {type:'popup', title:'Přidání známých (nejen) dospělých jménem'
  use fl: form _fl [12,10,,]
  proc onfocus() { fl.jmena.init; fl.vse.init; fl.L.init; fl.jmena.focus }
  form _fl [,,300,200] {
    var last: number
    var rod: object
    var popis: text
    button [0,224,,] { title:'vložit jako účastníka', proc onclick() {
      each(L,pobyt_add); reload(0); panel.hide(0)
    } }
    button [0,250,,] { title:'přidat k nastavenému pobytu', proc onclick() {
      each(L,ucast_add); reload(0); panel.hide(0)
    } }
    button [150,224,,] { title:'jiná jména', proc onclick() {
      jmena.init; vse.init; L.init } }
    button [240,224,,] { title:'konec', proc onclick() {
      jmena.init; vse.init; L.init; panel.hide(0) } }
    // výběr z databáze MS
    select jmena [73,1,180,17] { type:'auto', format:'t'
      par:°{fce:'akce2_auto_jmena1',patt:'whole',deti:0,save:'key_only'}
      proc onchanged() {
        rod.set(ask('akce2_auto_jmena1L',this.key));
        each(rod.get,jmenovci); // nesmí volat asynchronní operace
      }
    }
    check deti [258,0,46,] { title:"i děti", value:'0', format:'t'
      proc onchange() { jmena.add_attrib('par.deti',this.get)
    }}
    proc jmenovci(p,i) {
      last.set(L.add);
      popis.set(p.nazev);
      L.part(last.get).part('info').set(popis.get);
      L.part(last.get).part('all').set(p);
    }
    // nastavení výběru
    check vse [4,0,80,16] { title:'všichni', format:'t'
      proc onchange() { each(L,nastav) }
      proc nastav (x,i) { x.chck.set(form.vse.get) }
    }
    list L [0,23,300,200] {rows:22      // anonymní group
      check chck [4,0,50,16] { title:' ', format:'t', value:'1' /*, proc onchange() { echo('jo/ne') }*/ }
      label info [23,4,300,16] {style:'white-space:nowrap', format:'t'}
      var all: object
    }
  }
}
# ================================================================================= Přidání jménem 2
panel PridaniJmenem2 [,,320,280] {type:'popup', title:'Přidání známých rodin jménem'
  use fl: form _fl [12,10,,]
  form _fl [,,300,200] {
    var last: number
    var rod: object
    var popis: text
    button [0,250,,] { title:'přidat do účastníků', proc onclick() {
      each(L,pobyt_add); reload(0);
    } }
    button [130,250,,] { title:'jiná jména', proc onclick() {
      jmena.init; vse.init; L.init } }
    button [220,250,,] { title:'konec', proc onclick() {
      jmena.init; vse.init; L.init; panel.hide(0) } }
    // výběr z databáze MS
    select jmena [100,0,200,17] { type:'auto',
      par:°{fce:'akce_auto_jmena2',save:'key_only'}, format:'t'
      proc onchanged() {
        rod.set(ask('akce_auto_jmena2L',this.key));
        each(rod.get,jmenovci); // nesmí volat asynchronní operace
      }
    }
    proc jmenovci(p,i) {
      last.set(L.add);
      popis.set(p.nazev);
      L.part(last.get).part('info').set(popis.get);
      L.part(last.get).part('all').set(p);
    }
    // nastavení výběru
    check vse [4,0,80,16] { title:'všichni', format:'t'
      proc onchange() { each(L,nastav) }
      proc nastav (x,i) { x.chck.set(form.vse.get) }
    }
    list L [0,23,300,200] {rows:22      // anonymní group
      check chck [4,0,50,16] { title:' ', format:'t', value:'1' /*, proc onchange() { echo('jo/ne') }*/ }
      label info [23,4,300,16] {style:'white-space:nowrap', format:'t'}
      var all: object
    }
  }
}
# ===================================================================================== Přidání akce
panel PridaniAkce [,,320,280] {type:'popup', title:'Přidání účastníků známých z jiných akcí'
  use fl: form _fl [12,10,,]
  form _fl [,,300,200] {
    var last: number
    var pary: object
    var popis: text
    button [0,250,,] { title:'přidat do účastníků', proc onclick() {
      each(L,pobyt_add); reload(0);
    } }
    button [130,250,,] { title:'jiná akce', proc onclick() {
      akce.init; vse.init; L.init } }
    button [220,250,,] { title:'konec', proc onclick() {
      akce.init; vse.init; L.init; panel.hide(0) } }
    // výběr z akcí
    select akce [100,0,200,17] { type:'auto', par:°{fce:'akce_auto_akce'}, format:'t'
      proc onchanged() {
        pary.set(ask('akce_auto_akceL',this.key));
        each(pary.get,ucastnici); // nesmí volat asynchronní operace
      }
    }
    proc ucastnici(p,i) {
      last.set(L.add);
      popis.set(p.nazev);
      L.part(last.get).part('info').set(popis.get);
      L.part(last.get).part('all').set(p);
    }
    // nastavení výběru
    check vse [4,0,80,16] { title:'všichni', format:'t'
      proc onchange() { each(L,nastav) }
      proc nastav (x,i) { x.chck.set(form.vse.get) }
    }
    list L [0,23,300,200] {rows:22      // anonymní group
      check chck [4,0,50,16] { title:' ', format:'t'  /*, proc onchange() { echo('jo/ne') }*/ }
      label info [23,4,300,16] {style:'white-space:nowrap', format:'t'}
      var all: object
    }
  }
}
# =========================================================================================== Strava
panel Strava [,,320,280] {type:'popup', title:'Nastavení nestandardního počtu strav'
  var dnu: number
  var arr: object
  var prvni: text       // první strava na akci
  use n: form nastaveni [5,5,,]
  proc onfocus() {
    var cela: text  // řetězec strav: sov.... po dnech
    var polo: text  // řetězec strav: sov.... po dnech
    prvni.set(substr(lst.the_akce.strava_oddo.get,0,1));    // první strava akce
    [ cela.set(u.b.cstrava_cel.get); cela.get | cela.set(strava_def(u.b.strava_cel.get)) ];
    [ polo.set(u.b.cstrava_pol.get); polo.get | polo.set(strava_def(u.b.strava_pol.get)) ];
    n.L.init;
    n.cele.set(u.b.strava_cel.get); n.polo.set(u.b.strava_pol.get);
    arr.set(ask('akce_strava_denne',u.b.datum_od.get,dnu.get,cela.get,polo.get));
    each(arr.get,den);
  }
  proc strava_def(strav) {
    return(conc('0',if(eq(prvni.get,'o'),strav,'0'),strav,
      repeat(strav,multiply(3,sum(dnu.get,-2))),
      strav,strav,'0'))
  }
  # přidání řádku pro i-tý den
  proc den (p,i) {
    [ n.L.add ];
    n.L.part(i).part('den').set(p.den);
    strava_set(i,'sc',p.sc,n.cele.get);
    strava_set(i,'sp',p.sp,n.polo.get);
    strava_set(i,'oc',p.oc,n.cele.get);
    strava_set(i,'op',p.op,n.polo.get);
    strava_set(i,'vc',p.vc,n.cele.get);
    strava_set(i,'vp',p.vp,n.polo.get);
  }
  # zobrazení stravy s pro i-tý den
  proc strava_set(i,s,val,norm) {
    var s1:text
    s1.set(substr(s,0,1));
    { or(and(eq(i,0),if(eq(prvni.get,'o'),eq(s1,'s'),eq(s1,'s','o')))   // první den
        ,and(eq(i,sum(dnu.get,-1)),eq(s1,'v')));                        // poslední den
      n.L.part(i).part(s).enable(0);
    | n.L.part(i).part(s).set(val);
      not(eq(val,norm));
      n.L.part(i).part(s).set_css('red')
    }
  }
  proc reset(co,jak) {
    each(arr.get,reset_den,co,jak);
  }
  proc reset_den(p,i,co,jak) {
    strava_set(i,co,jak,jak)
  }
  # ---------------------------------------------------------==> počty strav
  form nastaveni [0,0,320,200] {
    // sada návratu na default
    button [0,19,,] { title:'V'
      proc onclick() {
        reset('sc',n.cele.get); reset('oc',n.cele.get); reset('vc',n.cele.get);
        reset('sp',n.polo.get); reset('op',n.polo.get); reset('vp',n.polo.get);
    }}
    label  [ 43, 0,,] { title:'Celé'}
    field cele [39,20,13,] { proc onchange { reset_cele.onclick }}
    button reset_cele [ 55,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() {
        reset('sc',n.cele.get); reset('oc',n.cele.get); reset('vc',n.cele.get);
    }}
    label  [ 83, 0,,] { title:'Dětské'}
    field polo [83,20,13,] { proc onchange { reset_polo.onclick }}
    button reset_polo [ 99,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() {
        reset('sp',n.polo.get); reset('op',n.polo.get); reset('vp',n.polo.get);
    }}
    label  [153, 0,,] { title:'Snídaně'}
    button [155,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('sc',n.cele.get); }}
    button [175,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('sp',n.polo.get); }}
    label  [215, 0,,] { title:'Oběd' }
    button [213,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('oc',n.cele.get); }}
    button [233,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('op',n.polo.get); }}
    label  [267, 0,,] { title:'Večeře'}
    button [269,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('vc',n.cele.get); }}
    button [289,19,,] { title:'V', style:'width:17px;padding:0'
      proc onclick() { reset('vp',n.polo.get); }}
    // dny
    list L [0,50,320,200] {rows:22
      field den [4,0,140,16] {format:'o' }
      field sc  [155,0,15,] {format:':e' }
      field sp  [175,0,15,] {format:':e' }
      field oc  [213,0,15,] {format:':e' }
      field op  [233,0,15,] {format:':e' }
      field vc  [269,0,15,] {format:':e' }
      field vp  [289,0,15,] {format:':e' }
    }
    // ukončení
    button [205,255,,] { title:'Zpět', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
      proc onclick() { panel.hide(0)
    }}
    var scele: text
    var spolo: text
    button [264,255,,] { type:'submit', title:'OK', skill:'yaa+|yaa+;faa+|faa+;caa+|caa+',
      proc onclick() {
        scele.set(''); spolo.set('');
        each(L,save_den);
        ask('akce_strava_denne_save',u.b.key_pobyt.get,dnu.get,
          scele.get,u.b.strava_cel.get,u.b.cstrava_cel.get,
          spolo.get,u.b.strava_pol.get,u.b.cstrava_pol.get,prvni.get);
        panel.hide(0);
        reload(the_pobyt.get);
    }}
    proc save_den (p,i) {
      scele.set(conc(scele.get,pocet_strav(i,'sc'),pocet_strav(i,'oc'),pocet_strav(i,'vc')));
      spolo.set(conc(spolo.get,pocet_strav(i,'sp'),pocet_strav(i,'op'),pocet_strav(i,'vp')));
    }
    proc pocet_strav(i,f) {
      var x: text
      x.set(L.part(i).part(f).get);
      return(cconc(x,x,'0'));
    }
  }
}
# ----------------------------------------------------------------------------------------==> _empty
form _empty { }
